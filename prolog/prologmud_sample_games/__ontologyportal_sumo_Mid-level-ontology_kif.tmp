:-multifile lisp_trans/2.
:-dynamic lisp_trans/2.
:-style_check(-singleton).
lisp_trans('$COMMENT'(["; =============================="]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':0).
lisp_trans('$COMMENT'([";      MILO (Mid-Level Ontology)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':34).
lisp_trans('$COMMENT'(["; =============================="]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68).
lisp_trans('$COMMENT'(["; This is the source file for the MILO (MId-Level Ontology), an ontology that "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102).
lisp_trans('$COMMENT'(["; is being developed as a bridge between the abstract content of the SUMO and "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183).
lisp_trans('$COMMENT'(["; the rich detail of the various domain ontologies.    "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263).
lisp_trans('$COMMENT'(["; Those who are interested in making use of this ontology are urged "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320).
lisp_trans('$COMMENT'(["; to contact Adam Pease (apease [at] articulatesoftware [dot] com)."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390).
lisp_trans('$COMMENT'(["; The MILO (MId-Level Ontology) is copyrighted by Teknowledge (c) "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459).
lisp_trans('$COMMENT'(["; 2003 and Articulate Software 2004-2007.  It is released under the GNU Public License "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528).
lisp_trans('$COMMENT'(["; <http://www.gnu.org/copyleft/gpl.html>.  Users of this code also consent, by "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617).
lisp_trans('$COMMENT'(["; use of this material, to credit Teknowledge and Articulate Software"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698).
lisp_trans('$COMMENT'(["; in any writings, briefings, "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769).
lisp_trans('$COMMENT'(["; publications, presentations, or other representations of any code or other "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801).
lisp_trans('$COMMENT'(["; product which incorporates, builds on, or uses this material. "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':880).
lisp_trans('$COMMENT'(["; We ask that people using or referencing this work cite our primary paper:"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':946).
lisp_trans('$COMMENT'(["; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1024).
lisp_trans('$COMMENT'(["; Proceedings of the 2nd International Conference on Formal Ontology in "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1101).
lisp_trans('$COMMENT'(["; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1175).
lisp_trans('$COMMENT'(["; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1246).
lisp_trans('$COMMENT'(["; NS: delete."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1327).
lisp_trans('$COMMENT'(["; [1]"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1343).
lisp_trans('$COMMENT'(["; (subclass HumanCorpse OrganicObject)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1350).
lisp_trans('$COMMENT'(["; NS: delete."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1390).
lisp_trans('$COMMENT'(["; [2]"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1406).
lisp_trans('$COMMENT'(["; (documentation HumanCorpse EnglishLanguage \"A &%Dead thing which was"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1413).
lisp_trans('$COMMENT'(["; formerly a &%Human.\")"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1485).
lisp_trans('$COMMENT'(["; NS: delete."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1510).
lisp_trans('$COMMENT'(["; [3]"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1526).
lisp_trans('$COMMENT'(["; (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1533).
lisp_trans('$COMMENT'([";   (instance ?CORPSE HumanCorpse)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1540).
lisp_trans('$COMMENT'([";   (exists (?HUMAN)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1576).
lisp_trans('$COMMENT'([";     (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1598).
lisp_trans('$COMMENT'([";       (instance ?HUMAN Human)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1610).
lisp_trans('$COMMENT'([";       (before (WhenFn ?HUMAN) (WhenFn ?CORPSE))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1643).
lisp_trans('$COMMENT'([";       (not"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1694).
lisp_trans('$COMMENT'([";         (exists (?OTHERPART)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1708).
lisp_trans('$COMMENT'([";           (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1740).
lisp_trans('$COMMENT'([";             (holdsDuring"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1758).
lisp_trans('$COMMENT'([";               (WhenFn ?CORPSE)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1786).
lisp_trans('$COMMENT'([";               (part ?OTHERPART ?CORPSE))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1820).
lisp_trans('$COMMENT'([";             (not"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1864).
lisp_trans('$COMMENT'([";               (holdsDuring "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1884).
lisp_trans('$COMMENT'([";                 (WhenFn ?HUMAN) "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1915).
lisp_trans('$COMMENT'([";                 (part ?OTHERPART ?HUMAN)))))))))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':1951).
lisp_trans('$COMMENT'(["; NS: delete."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2003).
lisp_trans('$COMMENT'(["; [4]"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2019).
lisp_trans('$COMMENT'(["; (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2026).
lisp_trans('$COMMENT'([";   (instance ?CORPSE HumanCorpse)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2033).
lisp_trans('$COMMENT'([";   (attribute ?CORPSE Dead))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2069).
lisp_trans('$COMMENT'(["; NS: The KR above is inadequate for several reasons: (1)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2100).
lisp_trans('$COMMENT'(["; It completely fails to generalize, saying nothing about"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2160).
lisp_trans('$COMMENT'(["; the remains of organisms other than humans, or remains"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2219).
lisp_trans('$COMMENT'(["; that are not partonomically identical to the original"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2277).
lisp_trans('$COMMENT'(["; living organism; (2) Rule [3] is malformed, because"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2334).
lisp_trans('$COMMENT'(["; &%before must be used with TimePoints, not TimeIntervals;"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2389).
lisp_trans('$COMMENT'(["; and (3) Axioms that apply the attributes &%Living and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2450).
lisp_trans('$COMMENT'(["; &%Dead to &%Organism and &%HumanCorpse probably result in"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2507).
lisp_trans('$COMMENT'(["; unintended conclusions.  Consider rule [4], above, in"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2568).
lisp_trans('$COMMENT'(["; conjuction with rules [5] and [6], below, both of which"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2625).
lisp_trans('$COMMENT'(["; appear in Merge.kif:"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2684).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2708).
lisp_trans('$COMMENT'(["; [5] From Merge.kif.  Already changed there to prevent"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2711).
lisp_trans('$COMMENT'(["; concluding that Organisms can be Dead."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2768).
lisp_trans('$COMMENT'(["; (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2810).
lisp_trans('$COMMENT'([";   (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2817).
lisp_trans('$COMMENT'([";     (instance ?DEATH Death)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2827).
lisp_trans('$COMMENT'([";     (experiencer ?DEATH ?AGENT))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2858).
lisp_trans('$COMMENT'([";   (holdsDuring"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2894).
lisp_trans('$COMMENT'([";     (FutureFn"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2912).
lisp_trans('$COMMENT'([";       (WhenFn ?DEATH))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2929).
lisp_trans('$COMMENT'([";         (attribute ?AGENT Dead)))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2955).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2992).
lisp_trans('$COMMENT'(["; [6] From Merge.kif.  Already changed there, broadening"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':2995).
lisp_trans('$COMMENT'(["; the consequent to (instance ?ORG OrganicObject)."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3053).
lisp_trans('$COMMENT'(["; (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3105).
lisp_trans('$COMMENT'([";     (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3112).
lisp_trans('$COMMENT'([";         (attribute ?ORG ?ATT)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3124).
lisp_trans('$COMMENT'([";         (instance ?ATT BiologicalAttribute))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3157).
lisp_trans('$COMMENT'([";     (instance ?ORG Organism))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3205).
lisp_trans('$COMMENT'(["; "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3238).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3242).
lisp_trans('$COMMENT'(["; [6.1] From Merge.kif"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3245).
lisp_trans('$COMMENT'(["; (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3269).
lisp_trans('$COMMENT'([";     (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3276).
lisp_trans('$COMMENT'([";         (instance ?PATH PathologicProcess)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3288).
lisp_trans('$COMMENT'([";         (experiencer ?PATH ?ORG))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3334).
lisp_trans('$COMMENT'([";     (exists (?PART ?DISEASE)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3371).
lisp_trans('$COMMENT'([";         (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3403).
lisp_trans('$COMMENT'([";             (part ?PART ?ORG)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3419).
lisp_trans('$COMMENT'([";             (instance ?DISEASE DiseaseOrSyndrome)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3452).
lisp_trans('$COMMENT'([";             (attribute ?PART ?DISEASE))))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3505).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3550).
lisp_trans('$COMMENT'(["; [6] and [6.1] together entail the conclusion that every"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3553).
lisp_trans('$COMMENT'(["; skolemized part of an Organism that is affected by a"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3612).
lisp_trans('$COMMENT'(["; skolemized disease is also, itself, an instance of"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3668).
lisp_trans('$COMMENT'(["; Organism (since DiseaseOrSyndrome is a subclass of"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3722).
lisp_trans('$COMMENT'(["; BiologicalAttribute)."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3776).
lisp_trans('$COMMENT'(["; TO DO: "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3801).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3813).
lisp_trans('$COMMENT'(["; 1. Delete axioms [1] - [4], above, which already are"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3816).
lisp_trans('$COMMENT'([";    commented out."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3872).
lisp_trans('$COMMENT'(["; "]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3893).
lisp_trans('$COMMENT'(["; 2. In Merge.kif, delete [6] and replace it with the"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3897).
lisp_trans('$COMMENT'([";    following:  (already done.)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3952).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3986).
lisp_trans('$COMMENT'([";      (=>"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':3989).
lisp_trans('$COMMENT'([";        (and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4001).
lisp_trans('$COMMENT'([";          (instance ?ATT BiologicalAttribute)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4016).
lisp_trans('$COMMENT'([";          (holdsDuring ?T1 (attribute ?ORG ?ATT)))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4064).
lisp_trans('$COMMENT'([";        (instance ?ORG OrganicObject))"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4117).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4158).
lisp_trans('$COMMENT'(["; 3. In Merge.kif, rewrite [5] to avoid concluding that"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4161).
lisp_trans('$COMMENT'([";    Organisms can be Dead.  (already done.)"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4218).
lisp_trans('$COMMENT'([";"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4264).
lisp_trans('$COMMENT'(["; 4. Apparently, the intent of rule [3], above, is to"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4267).
lisp_trans('$COMMENT'([";    represent the state of most &%Dead &%Humans in a"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4322).
lisp_trans('$COMMENT'([";    rather short time interval following death, when the"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4377).
lisp_trans('$COMMENT'([";    body is still an intact, integral whole, and"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4436).
lisp_trans('$COMMENT'([";    embalming, cremation, mummification, or burial have"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4487).
lisp_trans('$COMMENT'([";    not yet occurred.  Add the section below, which tries"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4545).
lisp_trans('$COMMENT'([";    to address the presumed intent of [1] - [4], but also"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4605).
lisp_trans('$COMMENT'([";    tries to include human remains within a broader theory"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4665).
lisp_trans('$COMMENT'([";    of \"organism remains\"."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4726).
lisp_trans('$COMMENT'(["; Start: OrganismRemains"]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4755).
lisp_trans('$COMMENT'(["; NS: new."]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4782).
lisp_trans(genls(tSumoOrganismRemains,tSumoOrganicObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4795).
lisp_trans(documentation(tSumoOrganismRemains,vEnglishLanguage,s("An","#$instance","of","#$OrganismRemains","is","#$Dead","matter","of","a","formerly","#$Living","#$Organism",":","#$Plant",",","#$Animal",",","or","#$Microorganism",".","An","#$instance","of","#$OrganismRemains","might","or","might","not","be","recognizable","as","the","remains","of","a","particular","kind","or","species","of","organism",",","depending","on","the","cause","of","the","#$Organism","'s","#$Death","(","heart","failure",",","stroke",",","roadkill",",","dismemberment",",","etc",".",")",",","the","elapsed","time","since","death",",","the","speed","of","decomposition",",","and","any","post","-","mortem","processing","of","the","dead","organism","(","embalming",",","cremation",",","mummification",",","boiling",",","consumption","as","food",",","etc",".",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':4836).
lisp_trans(=>(tSumoOrganismRemains(X),holdsDuring(uWhenFn(X),sumoAttribute(X,tDead))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':5474).
lisp_trans(=>(and(tSumoOrganismRemains(REM),holdsDuring(T2,part(OBJ,REM))),exists([ORG,T1],and(tSumoOrganism(ORG),earlier(uWhenFn(ORG),uWhenFn(REM)),timeOfTimeInterval(T1),finishes(T1,uWhenFn(ORG)),holdsDuring(T1,part(OBJ,ORG))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':5636).
lisp_trans(=>(and(tSumoOrganicObject(REM),tSumoDeath(DEATH),tSumoOrganism(ORG),experiencer(DEATH,ORG),result(DEATH,REM)),tSumoOrganismRemains(REM)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':6139).
lisp_trans(=>(tSumoOrganismRemains(REM),exists([DEATH],and(tSumoDeath(DEATH),result(DEATH,REM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':6341).
lisp_trans(=>(and(tSumoDeath(DEATH),tSumoOrganismRemains(REM),tSumoOrganism(ORG),holdsDuring(T2,part(OBJ,REM)),holdsDuring(T1,part(OBJ,ORG)),earlier(T1,T2),result(DEATH,REM)),experiencer(DEATH,ORG)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':6476).
lisp_trans(=>(and(tSumoDeath(DEATH),tSumoOrganismRemains(REM),tSumoOrganism(ORG),holdsDuring(T2,part(OBJ,REM)),holdsDuring(T1,part(OBJ,ORG)),earlier(T1,T2),experiencer(DEATH,ORG)),result(DEATH,REM)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':6744).
lisp_trans(=>(tSumoOrganism(ORG),holdsDuring(uWhenFn(ORG),sumoAttribute(ORG,actLiving))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7036).
lisp_trans(genls(tSumoHumanCorpse,tSumoOrganismRemains),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7127).
lisp_trans(documentation(tSumoHumanCorpse,vEnglishLanguage,'HumanCorpse is the #$OrganismRemains of a #$Human'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7166).
lisp_trans(=>(tSumoHumanCorpse(X),isa(X,uDeadFn(tSumoHuman))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7265).
lisp_trans(rtUnaryFunction(uDeadFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7375).
lisp_trans(argGenl(uDeadFn,1,tSumoOrganism),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7407).
lisp_trans(resultGenl(uDeadFn,tSumoOrganismRemains),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7442).
lisp_trans(documentation(uDeadFn,vEnglishLanguage,s("(","#$DeadFn","?","ORGCLASS",")","denotes","the","#$Class","of","all","remains","that","were","once","part","of","#$Living","#$Organisms","of","the","type","?","ORGCLASS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7481).
lisp_trans(=>(and(isa(REM,uDeadFn(ORGTYPE)),tSumoDeath(DEATH),result(DEATH,REM),experiencer(DEATH,ORG)),isa(ORG,ORGTYPE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7654).
lisp_trans(=>(and(tSumoOrganicObject(REM),tSumoDeath(DEATH),experiencer(DEATH,ORG),isa(ORG,ORGTYPE),genls(ORG,tSumoOrganism),result(DEATH,REM)),isa(REM,uDeadFn(ORGTYPE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':7824).
lisp_trans(rtSocialRole(tSumoHumanSlave),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':9526).
lisp_trans(documentation(tSumoHumanSlave,vEnglishLanguage,s("A","#$Human","who","is","owned","by","someone","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':9559).
lisp_trans(=>(holdsDuring(TIME,sumoAttribute(SLAVE,tSumoHumanSlave)),exists([PERSON],and(tSumoHuman(PERSON),not(equal(PERSON,SLAVE)),holdsDuring(TIME,possesses(PERSON,SLAVE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':9874).
lisp_trans(genls(mobHumanAdult,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10106).
lisp_trans(genls(mobHumanAdult,mobLegalAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10239).
lisp_trans(documentation(mobHumanAdult,vEnglishLanguage,s("The","class","of","#$Humans","that","are","18","years","of","age","or","older",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10273).
lisp_trans(=>(holdsDuring(TIME,and(mobHumanAdult(ADULT),age(ADULT,uMeasureFn(NUMBER,actYearDuration)))),greaterThanOrEqualTo(NUMBER,18)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10557).
lisp_trans(=>(holdsDuring(TIME,mobHumanAdult(H)),exists([AGE],and(holdsDuring(TIME,age(H,AGE)),isa(AGE,uIntervalFn(uMeasureFn(18,actYearDuration),uMeasureFn(120,actYearDuration)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10756).
lisp_trans(=>(and(tSumoHuman(H),holdsDuring(T1,age(H,uMeasureFn(N,actYearDuration))),greaterThanOrEqualTo(N,18)),holdsDuring(T1,mobHumanAdult(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':10981).
lisp_trans(=>(holdsDuring(TIME,mobHumanAdult(ADULT)),holdsDuring(TIME,developmentalForm(ADULT,tSumoFullyFormed))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':11174).
lisp_trans(=>(and(tSumoHuman(ORG),holdsDuring(TIME,sumoAttribute(ORG,tSumoFullyFormed))),holdsDuring(TIME,mobHumanAdult(ORG))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':11316).
lisp_trans(=>(and(tSumoOrganicObject(ORG),vtDevelopmentalAttribute(ATTR),holdsDuring(TIME,sumoProperty(ORG,ATTR))),holdsDuring(TIME,developmentalForm(ORG,ATTR))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':11538).
lisp_trans(genls(tSumoHumanYouth,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':11729).
lisp_trans(documentation(tSumoHumanYouth,vEnglishLanguage,s("The","class","of","#$Humans","that","are","younger","than","18","years","of","age",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':11757).
lisp_trans(=>(holdsDuring(TIME,and(tSumoHumanYouth(YOUTH),age(YOUTH,uMeasureFn(NUMBER,actYearDuration)))),lessThan(NUMBER,18)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12034).
lisp_trans(=>(holdsDuring(TIME,tSumoHumanYouth(H)),exists([AGE],and(holdsDuring(TIME,age(H,AGE)),isa(AGE,uIntervalFn(uMeasureFn(0,actYearDuration),uMeasureFn(17,actYearDuration)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12216).
lisp_trans(=>(and(tSumoHuman(H),holdsDuring(T1,age(H,uMeasureFn(N,actYearDuration))),lessThan(N,18)),holdsDuring(T1,tSumoHumanYouth(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12439).
lisp_trans(genls(mobHumanChild,tSumoHumanYouth),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12602).
lisp_trans(documentation(mobHumanChild,vEnglishLanguage,s("A","#$HumanYouth","between","birth","and","puberty",",","i",".","e","a","#$Human","who","is","#$NonFullyFormed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12635).
lisp_trans(=>(holdsDuring(TIME,mobHumanChild(CHILD)),holdsDuring(TIME,developmentalForm(CHILD,tSumoNonFullyFormed))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12776).
lisp_trans(=>(and(tSumoHuman(CHILD),holdsDuring(TIME,sumoAttribute(CHILD,tSumoNonFullyFormed))),holdsDuring(TIME,tSumoHumanYouth(CHILD))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':12940).
lisp_trans(=>(holdsDuring(TIME,and(mobHumanChild(CHILD),age(CHILD,uMeasureFn(NUMBER,actYearDuration)))),lessThanOrEqualTo(NUMBER,14)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13116).
lisp_trans(=>(holdsDuring(TIME,mobHumanChild(H)),exists([AGE],and(holdsDuring(TIME,age(H,AGE)),isa(AGE,uIntervalFn(uMeasureFn(0,actYearDuration),uMeasureFn(14,actYearDuration)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13312).
lisp_trans(=>(and(tSumoHuman(H),holdsDuring(T1,age(H,uMeasureFn(N,actYearDuration))),lessThanOrEqualTo(N,14)),holdsDuring(T1,mobHumanChild(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13535).
lisp_trans(genls(tSumoTeenager,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13720).
lisp_trans(documentation(tSumoTeenager,vEnglishLanguage,s("A","#$Human","between","puberty","and","the","age","of","20",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13746).
lisp_trans(=>(holdsDuring(TIME,and(tSumoTeenager(TEEN),age(TEEN,uMeasureFn(NUMBER,actYearDuration)))),and(greaterThan(NUMBER,12),lessThan(NUMBER,20))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':13835).
lisp_trans(=>(holdsDuring(TIME,tSumoTeenager(H)),exists([AGE],and(holdsDuring(TIME,age(H,AGE)),isa(AGE,uIntervalFn(uMeasureFn(13,actYearDuration),uMeasureFn(19,actYearDuration)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14058).
lisp_trans(=>(and(tSumoHuman(H),holdsDuring(T1,age(H,uMeasureFn(N,actYearDuration))),greaterThan(N,12),lessThan(N,20)),holdsDuring(T1,tSumoTeenager(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14280).
lisp_trans(genls(tSumoBoy,mobHumanChild),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14465).
lisp_trans(genls(tSumoBoy,tSumoMan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14491).
lisp_trans(documentation(tSumoBoy,vEnglishLanguage,s("A","#$HumanChild","who","is","#$Male",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14510).
lisp_trans(=>(holdsDuring(T1,and(mobHumanChild(H),sumoAttribute(H,tMale))),holdsDuring(T1,tSumoBoy(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14591).
lisp_trans(genls(tSumoGirl,mobHumanChild),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14722).
lisp_trans(genls(tSumoGirl,tSumoWoman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14749).
lisp_trans(documentation(tSumoGirl,vEnglishLanguage,s("A","#$HumanChild","who","is","#$Female",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14771).
lisp_trans(=>(holdsDuring(T1,and(mobHumanChild(H),sumoAttribute(H,tFemale))),holdsDuring(T1,tSumoGirl(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14855).
lisp_trans(genls(tSumoHumanBaby,mobHumanChild),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':14989).
lisp_trans(documentation(tSumoHumanBaby,vEnglishLanguage,s("A","#$Human","between","birth","and","the","first","year","of","age",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':15021).
lisp_trans(=>(holdsDuring(TIME,and(tSumoHumanBaby(BABY),age(BABY,uMeasureFn(NUMBER,actYearDuration)))),lessThanOrEqualTo(NUMBER,1)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':15130).
lisp_trans(=>(holdsDuring(TIME,tSumoHumanBaby(BABY)),exists([AGE],and(holdsDuring(TIME,age(BABY,AGE)),isa(AGE,uIntervalFn(uMeasureFn(0,actYearDuration),uMeasureFn(1,actYearDuration)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':15470).
lisp_trans(=>(and(tSumoHuman(H),holdsDuring(T1,age(H,uMeasureFn(N,actYearDuration))),lessThanOrEqualTo(N,1)),holdsDuring(T1,tSumoHumanBaby(H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16059).
lisp_trans(documentation(older,vEnglishLanguage,s("(","older","?","OBJ1","?","OBJ2",")","means","that","?","OBJ1","is","older","than","?","OBJ2",",","i",".","e",".","the","age","of","?","OBJ1","is","#$greaterThan","the","age","of","?","OBJ2",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16230).
lisp_trans(rtBinaryPredicate(older),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16386).
lisp_trans(argIsa(older,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16419).
lisp_trans(argIsa(older,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16443).
lisp_trans(=>(older(O1,O2),exists([N1,N2,U],and(age(O1,uMeasureFn(N1,U)),age(O2,uMeasureFn(N2,U)),greaterThan(N1,N2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16468).
lisp_trans(documentation(iTimeOf_StartFn,vEnglishLanguage,s("(","StartFn","?","PROCESS",")","denotes","#$IntentionalProcesses","of","bringing","it","about","that","#$Processes","of","type","?","PROCESS","begin",",","e",".","g",".","start","working",",","begin","running",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16624).
lisp_trans(rtUnaryFunction(iTimeOf_StartFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16820).
lisp_trans(argIsa(iTimeOf_StartFn,1,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16853).
lisp_trans(resultGenl(iTimeOf_StartFn,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16880).
lisp_trans(=>(isa(S,iTimeOf_StartFn(P)),exists([I],and(isa(I,P),starts(uWhenFn(S),uWhenFn(I))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':16924).
lisp_trans(documentation(uStopFn,vEnglishLanguage,s("(","StopFn","?","PROCESS",")","denotes","#$IntentionalProcesses","of","bringing","it","about","that","#$Processes","of","type","?","PROCESS","end",",","e",".","g",".","stop","walking",",","quit","working",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17047).
lisp_trans(rtUnaryFunction(uStopFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17237).
lisp_trans(argIsa(uStopFn,1,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17269).
lisp_trans(resultGenl(uStopFn,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17295).
lisp_trans(=>(isa(S,uStopFn(P)),exists([I],and(isa(I,P),finishes(uWhenFn(S),uWhenFn(I))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17338).
lisp_trans(genls(actDodging,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17462).
lisp_trans(genls(actDodging,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17492).
lisp_trans(documentation(actDodging,vEnglishLanguage,s("Purposely","moving","one","'s","body","in","such","a","way","as","to","avoid","being","hit","by","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17530).
lisp_trans(=>(and(actDodging(D),agent(D,A),equal(DT,uWhenFn(D))),hasPurpose(D,not(exists([I],and(or(meetsTemporally(DT,uWhenFn(I)),overlapsTemporally(DT,uWhenFn(I))),actImpacting(I),patient(I,A)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':17697).
lisp_trans(genls(actMounting,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':18017).
lisp_trans(documentation(actMounting,vEnglishLanguage,s("Any","#$BodyMotion","which","results","in","being","#$On","something","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':18048).
lisp_trans(=>(and(actMounting(M),agent(M,A),patient(M,O)),and(holdsDuring(uBeginFn(uWhenFn(M)),not(orientation(A,O,tSumoOn))),holdsDuring(iTimeOf_EndFn(uWhenFn(M)),orientation(A,O,tSumoOn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':18154).
lisp_trans(genls(actStepping,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':18399).
lisp_trans(documentation(actStepping,vEnglishLanguage,s("The","#$BodyMotion","of","extending","one","foot","forward","and","then","bringing","the","other","foot","to","the","same","lateral","position","as","the","first","leg",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':18430).
lisp_trans(=>(and(actAmbulating(AMBULATE),equal(DURATION,uWhenFn(AMBULATE))),exists([STEP1,STEPN],and(actStepping(STEP1),actStepping(STEPN),subProcess(STEP1,AMBULATE),subProcess(STEPN,AMBULATE),starts(uWhenFn(STEP1),DURATION),finishes(uWhenFn(STEPN),DURATION),not(equal(STEP1,STEPN))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':19050).
lisp_trans(=>(and(actAmbulating(A),subProcess(S1,A),actStepping(S1),subProcess(S2,A),actStepping(S2),equal(S1_START,uBeginFn(uWhenFn(S1))),equal(S2_START,uBeginFn(uWhenFn(S2))),not(or(before(S1_START,S2_START),before(S2_START,S1_START)))),equal(S1,S2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':19455).
lisp_trans(=>(and(actAmbulating(AMBULATE),actStepping(STEP),subProcess(STEP,AMBULATE),agent(AMBULATE,AGENT)),agent(STEP,AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':19817).
lisp_trans(=>(and(actAmbulating(AMBULATE),actStepping(STEP),subProcess(STEP,AMBULATE),agent(STEP,AGENT)),agent(AMBULATE,AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':19994).
lisp_trans(genls(actWading,actWalking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20160).
lisp_trans(documentation(actWading,vEnglishLanguage,s("Any","instance","of","#$Walking","which","occurs","through","a","#$BodyOfWater",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20186).
lisp_trans(=>(actWading(P),exists([W],and(tSumoWaterArea(W),eventLocated(P,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20293).
lisp_trans(genls(actJumping,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20405).
lisp_trans(genls(actJumping,tSumoMotionUpward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20435).
lisp_trans(documentation(actJumping,vEnglishLanguage,s("Any","#$MotionUpward","which","is","done","by","one","'s","body","and","which","results","in","a","situation","where","one","'s","feet","are","unsupported",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20467).
lisp_trans(=>(and(actJumping(J),agent(J,A)),holdsDuring(iTimeOf_EndFn(uWhenFn(J)),not(sumoAttribute(A,actStanding)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20625).
lisp_trans(genls(actSomersaulting,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20764).
lisp_trans(documentation(actSomersaulting,vEnglishLanguage,s("Any","#$BodyMotion","which","begins","and","ends","in","a","#$Sitting","position","and","where","the","feet","roll","over","the","head","and","return","to","their","original","position",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20800).
lisp_trans(=>(and(actSomersaulting(S),agent(S,A)),and(holdsDuring(uBeginFn(uWhenFn(S)),sumoAttribute(A,actSitting)),holdsDuring(iTimeOf_EndFn(uWhenFn(S)),sumoAttribute(A,actSitting)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':20991).
lisp_trans(genls(actReflecting,actRadiating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21217).
lisp_trans(documentation(actReflecting,vEnglishLanguage,s("Any","instance","of","#$Radiating","where","the","radiated","waves","rebound","from","a","surface",",","e",".","g",".","an","echo","of","sound","or","a","reflection","of","light",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21249).
lisp_trans(genls(tSumoReflectingLight,actReflecting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21422).
lisp_trans(genls(tSumoReflectingLight,tSumoRadiatingLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21460).
lisp_trans(documentation(tSumoReflectingLight,vEnglishLanguage,s("Those","instances","of","#$RadiatingLight","where","the","#$instrument","is","not","a","light","source",",","but","is","simply","a","surface","which","bends","light","waves","that","come","in","contact","with","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21502).
lisp_trans(documentation(wavelength,vEnglishLanguage,s("(","wavelength","?","RADIATION","?","MEASURE",")","means","that","the","instance","of","radiation",",","?","RADIATION",",","has","an","average","wavelength","of","?","MEASURE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21713).
lisp_trans(rtSingleValuedRelation(wavelength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21881).
lisp_trans(argIsa(wavelength,1,actRadiating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21924).
lisp_trans(argIsa(wavelength,2,vtLengthMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21956).
lisp_trans(rtAsymmetricRelation(wavelength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':21992).
lisp_trans(rtBinaryPredicate(wavelength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22033).
lisp_trans(genls(tSumoRadiatingInfrared,actRadiating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22106).
lisp_trans(disjointWith(tSumoRadiatingInfrared,tSumoRadiatingLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22145).
lisp_trans(disjointWith(tSumoRadiatingInfrared,tSumoRadioEmission),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22189).
lisp_trans(documentation(tSumoRadiatingInfrared,vEnglishLanguage,s("Any","instance","of","#$Radiating","where","the","#$wavelengths","are","longer","than","those","of","visible","light","and","shorter","than","those","of","radio","emissions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22232).
lisp_trans(genls(tSumoRadiatingUltraviolet,tSumoRadiatingElectromagnetic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22421).
lisp_trans(disjointWith(tSumoRadiatingUltraviolet,tSumoRadiatingLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22478).
lisp_trans(disjointWith(tSumoRadiatingUltraviolet,tSumoRadiatingXRay),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22525).
lisp_trans(documentation(tSumoRadiatingUltraviolet,vEnglishLanguage,s("Any","case","of","#$RadiatingElectromagnetic","where","the","#$wavelengths","are","shorter","than","those","of","visible","light","and","longer","than","those","of","X","-","Rays",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22571).
lisp_trans(abbreviation("UV",tSumoRadiatingUltraviolet),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':22764).
lisp_trans(=>(tSumoRadiatingXRay(X),exists([M],and(vtLengthMeasure(M),wavelength(X,M),greaterThanOrEqualTo(X,uMeasureFn(0.01,tSumoNanometer)),greaterThan(uMeasureFn(10,tSumoNanometer),X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23057).
lisp_trans(genls(tSumoRadiatingVisibleLight,tSumoRadiatingLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23302).
lisp_trans(disjointWith(tSumoRadiatingVisibleLight,tSumoRadiatingUltraviolet),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23350).
lisp_trans(documentation(tSumoRadiatingVisibleLight,vEnglishLanguage,s("Any","instance","of","#$RadiatingLight","that","can","be","detected","by","normal","human","visual","perception",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23404).
lisp_trans(=>(and(tSumoRadiatingLight(R),tSumoHuman(H),actSeeing(S),agent(S,H),patient(S,R)),tSumoRadiatingVisibleLight(R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23551).
lisp_trans(genls(eventSunlight,tSumoRadiatingLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23723).
lisp_trans(documentation(eventSunlight,vEnglishLanguage,s("Any","instance","of","#$RadiatingLight","where","the","Sun","(","#$Sol",")","is","the","origin",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23758).
lisp_trans(genls(tPartTypeRadioReceiver,tSumoReceiverDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23873).
lisp_trans(documentation(tPartTypeRadioReceiver,vEnglishLanguage,s("A","#$RadioReceiver","is","a","#$Device","for","receiving","radio","broadcast","signals","from","a","#$RadioStation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':23913).
lisp_trans(genls(tSumoScript,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':24057).
lisp_trans(documentation(tSumoScript,vEnglishLanguage,s("The","collection","of","#$Characters","in","a","particular","written","language",".","Every","#$WrittenCommunication","consists","of","#$Characters","written","in","a","particular","script",".","Scripts","include","different","typefaces",",","as","well","as","entirely","different","characters",".","'","Times","Roman","'","is","a","very","specific","script",".","While","the","'","latin","'","character","set","is","a","general","one",",","that","has","specific","subclasses","like","Times","Roman",".","Other","scripts","include","Devanagri","(","which","may","be","expressed","in","many","different","more","specific","typefaces",")",",","or","Simplified","Chinese",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':24086).
lisp_trans(=>(actWrittenCommunication(W),exists([T,C,S],and(result(W,T),tSumoText(T),part(C,T),ftCharacter(C),tSumoScript(S),member(C,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':24680).
lisp_trans(genls(tSumoOrthography,tSumoProcedure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':24898).
lisp_trans(documentation(tSumoOrthography,vEnglishLanguage,s("A","method","for","representing","the","sounds","of","a","#$Language","with","written","#$Characters",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':24931).
lisp_trans(genls(tSumoLyrics,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25059).
lisp_trans(documentation(tSumoLyrics,vEnglishLanguage,s("Any","#$Text","which","is","intended","to","be","sung",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25082).
lisp_trans(=>(tSumoLyrics(LYRIC),hasPurpose(LYRIC,exists([SING],and(actSinging(SING),patient(SING,LYRIC))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25165).
lisp_trans(genls(tSumoParagraph,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25318).
lisp_trans(documentation(tSumoParagraph,vEnglishLanguage,s("A","#$Text","which","consists","of","one","or","more","sentences",",","begins","with","an","indented","line",",","and","expresses","a","single","topic",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25344).
lisp_trans(=>(tSumoParagraph(T),exists([S],and(ftSentence(S),part(S,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25500).
lisp_trans(documentation(sententialObject,vEnglishLanguage,s("(","sententialObject","?","OBJECT","?","SENTENCE",")","means","that","the","#$NounPhrase","?","OBJECT","is","the","object","of","the","#$Sentence","?","SENTENCE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25606).
lisp_trans(argIsa(sententialObject,1,xtNounPhrase),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25775).
lisp_trans(argIsa(sententialObject,2,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25814).
lisp_trans(genlPreds(sententialObject,grammaticalRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25852).
lisp_trans(documentation(sententialSubject,vEnglishLanguage,s("(","sententialSubject","?","SUBJECT","?","SENTENCE",")","means","that","the","#$NounPhrase","?","SUBJECT","is","the","subject","of","the","#$Sentence","?","SENTENCE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':25903).
lisp_trans(argIsa(sententialSubject,1,xtNounPhrase),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26077).
lisp_trans(argIsa(sententialSubject,2,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26117).
lisp_trans(genlPreds(sententialSubject,grammaticalRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26155).
lisp_trans(documentation(speaksLanguage,vEnglishLanguage,s("(","speaksLanguage","?","AGENT","?","LANGUAGE",")","means","that","the","#$SentientAgent","?","AGENT","is","capable","of","understanding","and","/","or","generating","the","#$Language","?","LANGUAGE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26208).
lisp_trans(rtBinaryPredicate(speaksLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26403).
lisp_trans(argIsa(speaksLanguage,1,mobSentientAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26445).
lisp_trans(argIsa(speaksLanguage,2,tLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':26485).
lisp_trans(vtRelationalAttribute(tSumoMonophonicMusic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':27156).
lisp_trans(documentation(tSumoMonophonicMusic,vEnglishLanguage,'MakingMusic which has a single part, i.e. #$MakingMusic which cannot be divided into two or more contemporaneous #$subProcesses which are also instances of #$MakingMusic.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':27203).
lisp_trans(vtRelationalAttribute(tSumoPolyphonicMusic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':27427).
lisp_trans(documentation(tSumoPolyphonicMusic,vEnglishLanguage,'MakingMusic which has two or more parts, i.e. #$MakingMusic which can be divided into two or more contemporaneous #$subProcesses which are also instances of #$MakingMusic.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':27474).
lisp_trans(<=>(sumoAttribute(MUSIC,tSumoPolyphonicMusic),exists([PART1,PART2],and(tSumoMakingMusic(MUSIC),tSumoMakingMusic(PART1),tSumoMakingMusic(PART2),subProcess(PART1,MUSIC),subProcess(PART2,MUSIC),not(equal(PART1,PART2)),cooccur(PART1,MUSIC),cooccur(PART2,MUSIC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':27699).
lisp_trans(genls(tSumoMusicalTone,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28398).
lisp_trans(documentation(tSumoMusicalTone,vEnglishLanguage,s("A","#$Process","of","#$RadiatingSound","where","the","sound","has","a","fundamental","frequency","and","0","or","more","partial","frequencies","or","unrelated","transients","or","noise","components","that","have","a","lesser","amplitude","than","the","fundamental",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28436).
lisp_trans(genls(tSumoRadiatingSoundUltrasonic,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28688).
lisp_trans(documentation(tSumoRadiatingSoundUltrasonic,vEnglishLanguage,s("All","sound","waves","that","have","frequencies","above","those","that","normal","#$Human","ears","can","detect",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28739).
lisp_trans(rtBinaryPredicate(soundFrequency),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28887).
lisp_trans(documentation(soundFrequency,vEnglishLanguage,s("A","relation","between","a","#$Process","of","#$MusicalTone","and","the","fundamental","frequency","of","that","tone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':28929).
lisp_trans(argIsa(soundFrequency,1,tSumoMusicalTone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':29071).
lisp_trans(argIsa(soundFrequency,2,vtFunctionQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':29109).
lisp_trans(genls(actWrittenCommunication,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':30838).
lisp_trans(documentation(actWrittenCommunication,vEnglishLanguage,s("Any","#$LinguisticCommunication","where","the","#$instrument","is","a","#$Text",",","e",".","g",".","a","letter",",","an","email",",","a","memo",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':30894).
lisp_trans(genls(tSumoVocalCords,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':36806).
lisp_trans(documentation(tSumoVocalCords,vEnglishLanguage,s("The","vocal","cords",",","are","composed","of","two","folds","of","mucous","membrane","stretched","horizontally","across","the","larynx",".","They","vibrate",",","modulating","the","flow","of","air","being","expelled","from","the","lungs","during","#$Vocalizing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':36834).
lisp_trans(typicalPart(tSumoVocalCords,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37077).
lisp_trans(typicallyContainsPart(tSumoVocalCords,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37108).
lisp_trans(initialPart(tSumoVocalCords,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37149).
lisp_trans(genls(actVocalizing,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37622).
lisp_trans(documentation(actVocalizing,vEnglishLanguage,s("Any","instance","of","#$RadiatingSound","where","the","instrument","is","the","vocal","cord",".","This","covers","grunts",",","screams",",","roars",",","as","well","as","#$Speaking",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37659).
lisp_trans(=>(actVocalizing(VOCAL),exists([CORD,ORGANISM],and(tSumoVocalCords(CORD),instrument(VOCAL,CORD),part(CORD,ORGANISM),tSumoOrganism(ORGANISM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':37838).
lisp_trans(genls(actSpeaking,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38045).
lisp_trans(genls(actSpeaking,actVocalizing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38089).
lisp_trans(genls(actCorresponding,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38121).
lisp_trans(documentation(actCorresponding,vEnglishLanguage,s("Instances","of","#$LinguisticCommunication","which","are","achieved","by","means","of","#$Texts","that","are","mailed","between","the","persons","communicating","with","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38170).
lisp_trans(=>(actCorresponding(C),exists([M,T],and(actMailing(M),subProcess(M,C),iCorrespondence(T),patient(M,T),patient(C,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38366).
lisp_trans(genls(actReminding,actRequesting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38563).
lisp_trans(documentation(actReminding,vEnglishLanguage,s("Any","#$Requesting","that","is","intended","to","cause","a","#$Remembering","of","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38595).
lisp_trans(=>(actReminding(REMIND),exists([REMEMBER],and(eventRemembering(REMEMBER),causes(REMIND,REMEMBER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38714).
lisp_trans(genls(iThreatening,actCommitting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38866).
lisp_trans(documentation(iThreatening,vEnglishLanguage,s("Any","#$Committing","where","the","thing","promised","is","something","that","is","deemed","undesirable","by","the","#$destination","of","the","#$Committing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':38900).
lisp_trans(=>(and(iThreatening(THREATEN),agent(THREATEN,AGENT),patient(THREATEN,PROP),destination(THREATEN,DEST)),not(desires(DEST,PROP))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39073).
lisp_trans(genls(actPunishing,actRegulatoryProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39256).
lisp_trans(documentation(actPunishing,vEnglishLanguage,s("A","#$RegulatoryProcess","where","the","agent","does","something","to","the","#$destination","that","the","#$agent","knows","is","undesirable","for","the","#$destination",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39295).
lisp_trans(=>(and(actPunishing(P),agent(P,A),patient(P,F),destination(P,D)),knows(A,not(desires(D,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39477).
lisp_trans(genls(actRegistering,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39628).
lisp_trans(genls(actRegistering,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39659).
lisp_trans(documentation(actRegistering,vEnglishLanguage,s("Submitting","official","paperwork","in","a","government","agency",",","e",".","g",".","filing","for","divorce",",","making","a","legal","claim","against","someone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39699).
lisp_trans(=>(actLegalAction(ACTION),exists([REGISTER],and(actRegistering(REGISTER),subProcess(REGISTER,ACTION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':39864).
lisp_trans(genls(actAnswering,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40022).
lisp_trans(documentation(actAnswering,vEnglishLanguage,s("Responding","to","a","#$Questioning",",","i",".","e",".","trying","to","answer","someone","'s","question",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40051).
lisp_trans(=>(actAnswering(ANSWER),exists([QUESTION],and(actQuestioning(QUESTION),refers(ANSWER,QUESTION),earlier(uWhenFn(QUESTION),uWhenFn(ANSWER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40170).
lisp_trans(genls(actArguing,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40377).
lisp_trans(documentation(actArguing,vEnglishLanguage,s("Any","#$Stating","which","has","the","form","of","an","#$Argument",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40404).
lisp_trans(=>(actArguing(ARGUE),exists([STATEMENT,ARGUMENT],and(patient(ARGUE,STATEMENT),iboStatement(STATEMENT),containsInformation(STATEMENT,ARGUMENT),tSumoArgument(ARGUMENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40498).
lisp_trans(genls(tSumoTellingALie,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40835).
lisp_trans(documentation(tSumoTellingALie,vEnglishLanguage,s("Any","#$LinguisticCommunication","which","is","both","#$False","and","believed","to","be","#$False","by","the","#$agent","of","the","#$LinguisticCommunication",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':40882).
lisp_trans(=>(and(tSumoTellingALie(STATE),agent(STATE,AGENT),patient(STATE,STATEMENT)),holdsDuring(uWhenFn(STATE),believes(AGENT,truth(STATEMENT,vFalse)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41058).
lisp_trans(genls(actFounding,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41259).
lisp_trans(genls(actFounding,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41289).
lisp_trans(documentation(actFounding,vEnglishLanguage,s("Setting","up","an","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41331).
lisp_trans(=>(actFounding(FOUND),exists([ORG],and(tGroupedOrganization(ORG),result(FOUND,ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41405).
lisp_trans(genls(tSumoClub,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41541).
lisp_trans(documentation(tSumoClub,vEnglishLanguage,s("A","Club","is","an","#$Organization","of","people","that","share","some","#$desire")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41570).
lisp_trans(=>(and(tSumoClub(CLUB),member(MEM1,CLUB),member(MEM2,CLUB)),exists([DESIRE],and(desires(MEM1,DESIRE),desires(MEM2,DESIRE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41672).
lisp_trans(documentation(yearOfFounding,vEnglishLanguage,s("(","yearOfFounding","?","ORG","?","NUMBER",")","means","that","the","#$Organization","?","ORG","was","founded","in","the","year","expressed","in","?","NUMBER",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':41871).
lisp_trans(rtBinaryPredicate(yearOfFounding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42032).
lisp_trans(rtAsymmetricRelation(yearOfFounding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42074).
lisp_trans(argIsa(yearOfFounding,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42119).
lisp_trans(argIsa(yearOfFounding,2,ftInt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42158).
lisp_trans(=>(yearOfFounding(O,Y),dateEstablished(O,iTimeOf_YearFn(Y))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42193).
lisp_trans(<=>(yearOfFounding(O,Y),exists([F],and(overlapsTemporally(F,iTimeOf_YearFn(Y)),actFounding(F),result(F,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42264).
lisp_trans(rtBinaryPredicate(dateEstablished),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42414).
lisp_trans(argIsa(dateEstablished,1,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42457).
lisp_trans(argGenl(dateEstablished,2,timeTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42493).
lisp_trans(documentation(dateEstablished,vEnglishLanguage,s("(","#$dateEstablished","?","THING","?","TIME",")","means","that","the","#$Physical","?","THING","was","founded","on","the","date","indicated","by","?","TIME",".","For","example",",","(","#$dateEstablished","#$UnitedNations","(","#$DayFn","26","(","#$MonthFn","#$June","(","#$YearFn","1945",")",")",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42541).
lisp_trans(=>(dateEstablished(THING,DATE),exists([DAY],and(isa(DAY,DATE),overlapsTemporally(DAY,uBeginFn(uWhenFn(THING)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42805).
lisp_trans(rtTernaryPredicate(dateUsed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42958).
lisp_trans(argIsa(dateUsed,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':42995).
lisp_trans(argIsa(dateUsed,2,timeOfTimePoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43022).
lisp_trans(argIsa(dateUsed,3,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43052).
lisp_trans(documentation(dateUsed,vEnglishLanguage,s("The","date","an","#$Object","is","used","by","an","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43078).
lisp_trans(termFormat(vEnglishLanguage,dateUsed,s("date","used")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43165).
lisp_trans(=>(dateUsed(OBJECT,DATE,AGENT),exists([PROCESS],and(actProcess(PROCESS),patient(PROCESS,OBJECT),agent(PROCESS,AGENT),uses(OBJECT,AGENT),overlapsTemporally(DATE,uWhenFn(PROCESS))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43215).
lisp_trans(genls(actAccrediting,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43469).
lisp_trans(documentation(actAccrediting,vEnglishLanguage,s("Any","process","of","certifying","an","#$EducationalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43502).
lisp_trans(=>(and(actAccrediting(A),patient(A,EO)),tGroupedEducationalOrganization(EO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43604).
lisp_trans(genls(actIndicating,actCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43716).
lisp_trans(genls(actIndicating,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43752).
lisp_trans(documentation(actIndicating,vEnglishLanguage,s("Pointing","out","a","person",",","place","or","thing","with","one","'s","hand","or","with","an","#$Artifact",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43785).
lisp_trans(genls(actDivorcing,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43909).
lisp_trans(documentation(actDivorcing,vEnglishLanguage,s("A","#$LegalAction","whereby","a","marriage","(","#$Wedding",")","is","dissolved",".","This","includes","annulments",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':43940).
lisp_trans(=>(actDivorcing(D),exists([P1,P2,T1,T2],and(holdsDuring(T1,spouse(P1,P2)),holdsDuring(T2,not(spouse(P1,P2))),finishes(T1,D),starts(T2,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':44073).
lisp_trans(genls(actAppointing,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':44296).
lisp_trans(documentation(actAppointing,vEnglishLanguage,s("Any","instance","of","#$Declaring","by","which","the","patient","is","assigned","to","a","#$Position","within","an","#$Organization","where","the","patient","previously","had","no","position",".","For","example",",","the","appointments","of","people","to","non","-","elective","offices","in","a","government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':44328).
lisp_trans(=>(and(actAppointing(A),patient(A,H)),exists([P,ORG],and(holdsDuring(uBeginFn(uWhenFn(A)),not(occupiesPosition(H,P,ORG))),holdsDuring(uImmediateFutureFn(uWhenFn(A)),occupiesPosition(H,P,ORG))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':44606).
lisp_trans(=>(actAppointing(A),not(exists([H],and(agent(A,H),tSumoPublic(H))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':44918).
lisp_trans(genls(tSumoTurningOffDevice,tSumoInternalChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45041).
lisp_trans(documentation(tSumoTurningOffDevice,vEnglishLanguage,s("Any","#$Process","whose","result","is","that","the","patient","of","the","process","is","in","the","state","of","#$DeviceOff",".","In","other","words",",","this","class","covers","any","process","of","turning","off","a","device",",","e",".","g",".","turning","off","the","lights",",","switching","off","a","television","set",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45084).
lisp_trans(=>(and(tSumoTurningOffDevice(P),patient(P,D)),and(holdsDuring(uBeginFn(uWhenFn(P)),sumoAttribute(D,tSumoDeviceOn)),holdsDuring(iTimeOf_EndFn(uWhenFn(P)),sumoAttribute(D,tSumoDeviceOff)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45371).
lisp_trans(=>(and(tSumoTurningOffDevice(P),patient(P,D)),tSumoDevice(D)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45603).
lisp_trans(genls(tSumoTurningOnDevice,tSumoInternalChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45695).
lisp_trans(documentation(tSumoTurningOnDevice,vEnglishLanguage,s("Any","#$Process","whose","result","is","that","the","patient","of","the","process","is","in","the","state","of","#$DeviceOn",".","In","other","words",",","this","class","covers","any","process","of","turning","on","a","device",",","e",".","g",".","turning","on","the","lights",",","switching","on","a","television","set",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':45737).
lisp_trans(=>(and(tSumoTurningOnDevice(P),patient(P,D)),and(holdsDuring(uBeginFn(uWhenFn(P)),sumoAttribute(D,tSumoDeviceOff)),holdsDuring(iTimeOf_EndFn(uWhenFn(P)),sumoAttribute(D,tSumoDeviceOn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46019).
lisp_trans(=>(and(tSumoTurningOnDevice(P),patient(P,D)),tSumoDevice(D)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46250).
lisp_trans(genls(tSumoProjectile,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46341).
lisp_trans(documentation(tSumoProjectile,vEnglishLanguage,s("A","missile",",","bullet",",","etc",".","that","is","fired","from","a","#$Weapon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46370).
lisp_trans(=>(tSumoProjectile(PROJECTILE),capability(actShooting,patient,PROJECTILE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46472).
lisp_trans(genls(tSumoProjectileShell,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46560).
lisp_trans(documentation(tSumoProjectileShell,vEnglishLanguage,s("The","outer","casing","of","a","#$Projectile",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46597).
lisp_trans(=>(tSumoProjectile(PROJECTILE),exists([SHELL],and(tSumoProjectileShell(SHELL),part(SHELL,PROJECTILE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':46931).
lisp_trans(genls(tObjectProjectileLauncher,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47085).
lisp_trans(documentation(tObjectProjectileLauncher,vEnglishLanguage,s("A","#$Weapon","that","shoots","a","#$Projectile",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47122).
lisp_trans(=>(tObjectProjectileLauncher(L),capability(actShooting,instrument,L)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47215).
lisp_trans(=>(actShooting(S),exists([P,L],and(tSumoProjectile(P),patient(S,P),tObjectProjectileLauncher(L),instrument(S,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47294).
lisp_trans(genls(tObjectSpear,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47471).
lisp_trans(documentation(tObjectSpear,vEnglishLanguage,s("A","#$Weapon","with","a","long","handle","and","a","short","blade",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47495).
lisp_trans(genls(tObjectSword,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47586).
lisp_trans(documentation(tObjectSword,vEnglishLanguage,s("A","#$Weapon","with","a","long","blade","and","covered","handle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47610).
lisp_trans(genls(tObjectWhip,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47701).
lisp_trans(documentation(tObjectWhip,vEnglishLanguage,s("A","#$Weapon","that","consists","of","a","thin","strand","of","#$Fabric",",","usually","#$Leather",",","and","a","handle","by","which","the","strand","is","impelled","at","a","high","rate","of","speed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47724).
lisp_trans(genls(tObjectGun,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47910).
lisp_trans(genls(tObjectGun,tObjectProjectileLauncher),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47932).
lisp_trans(sumo_partition(tObjectGun,tSumoArtilleryGun,tSumoFirearm),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':47966).
lisp_trans(documentation(tObjectGun,vEnglishLanguage,s("A","#$Weapon","that","shoots","a","#$Projectile",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48003).
lisp_trans(=>(tObjectGun(GUN),capability(actShooting,instrument,GUN)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48081).
lisp_trans(=>(actShooting(SHOOT),exists([PROJECTILE,GUN],and(tSumoProjectile(PROJECTILE),patient(SHOOT,PROJECTILE),tObjectGun(GUN),instrument(SHOOT,GUN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48151).
lisp_trans(genls(tSumoMortarGun,tSumoArtilleryGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48374).
lisp_trans(documentation(tSumoMortarGun,vEnglishLanguage,s("A","short","-","range","#$Gun","that","is","positioned","on","the","ground","at","a","high","angle","and","fires","explosive","shells",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48408).
lisp_trans(genls(tSumoBullet,tSumoProjectile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48551).
lisp_trans(documentation(tSumoBullet,vEnglishLanguage,s("A","#$Projectile","that","is","designed","to","be","fired","by","a","#$Gun",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48580).
lisp_trans(=>(tSumoBullet(B),hasPurpose(B,exists([S,GUN],and(actShooting(S),instrument(S,GUN),tObjectGun(GUN),patient(S,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48677).
lisp_trans(genls(tSumoBulletCartridge,tSumoProjectile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48872).
lisp_trans(documentation(tSumoBulletCartridge,vEnglishLanguage,s("The","entire","projectile","consisting","of","a","bullet",",","casing",",","gunpowder",",","and","primer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':48910).
lisp_trans(termFormat(vEnglishLanguage,tSumoBulletCartridge,s("bullet","cartridge")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49038).
lisp_trans(=>(tSumoBulletCartridge(CARTRIDGE),hasPurpose(CARTRIDGE,exists([BULLET,CASE],and(tSumoBullet(BULLET),tSumoCartridgeCase(CASE),properPart(BULLET,CARTRIDGE),properPart(CASE,CARTRIDGE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49103).
lisp_trans(genls(tSumoCartridgeCase,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49377).
lisp_trans(documentation(tSumoCartridgeCase,vEnglishLanguage,s("the","part","of","a","cartridge","that","holds","the","bullet")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49423).
lisp_trans(termFormat(vEnglishLanguage,tSumoCartridgeCase,"case"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49517).
lisp_trans(=>(tSumoCartridgeCase(CASE),exists([CARTRIDGE,BULLET,K],and(tSumoBulletCartridge(CARTRIDGE),tSumoBullet(BULLET),actKeeping(K),properPart(CASE,CARTRIDGE),properPart(BULLET,CARTRIDGE),agent(K,CASE),patient(K,BULLET)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49567).
lisp_trans(genls(tGunBarrel,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49904).
lisp_trans(documentation(tGunBarrel,vEnglishLanguage,s("The","part","of","a","#$Gun","through","which","a","#$Projectile","travels","when","it","is","fired",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':49946).
lisp_trans(=>(tGunBarrel(B),exists([G],and(tObjectGun(G),part(B,G)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50066).
lisp_trans(=>(and(tObjectGun(G),tGunBarrel(B),part(B,G),actShooting(S),instrument(S,GUN),patient(S,P),tSumoProjectile(P)),exists([SUB],and(subProcess(SUB,S),path(SUB,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50167).
lisp_trans(genls(tSumoGunPowder,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50425).
lisp_trans(documentation(tSumoGunPowder,vEnglishLanguage,s("A","#$Mixture","of","potassium","nitrate",",","sulfur",",","and","charcoal","that","is","used","in","#$ExplosiveDevices","and","to","propell","#$Projectiles","in","#$ProjectileWeapons",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50454).
lisp_trans(genls(tObjectLever,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50644).
lisp_trans(termFormat(vEnglishLanguage,tObjectLever,"lever"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50668).
lisp_trans(documentation(tObjectLever,vEnglishLanguage,s("Anything","which","is","actually","used","as","a","lever",",","since","many","things","can","be","used","as","such",",","regardless","of","the","intent","during","their","#$Manufacture",".","A","lever","necessarily","has","a","#$Fulcrum","around","which","the","lever","exhibits","#$Rotating",".","A","lever","has","a","mechanical","advantage","at","the","point","of","output","compared","to","the","point","of","input","of","force",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':50711).
lisp_trans(externalImage(tObjectLever,s("http",":","/","/","upload",".","wikimedia",".","org","/","wikipedia","/","commons","/","thumb","/","f","/","f2","/","Palanca","-","ejemplo",".","jpg","/","800","px","-","Palanca","-","ejemplo",".","jpg")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51068).
lisp_trans(=>(tObjectLever(L),exists([A],axis(A,L))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51196).
lisp_trans(=>(and(tObjectLever(L),actPushing(P),actMotion(M1),destination(P,E1),physicalEnd(E1,L),physicalEnd(E2,L),not(equal(E1,E2)),holdsDuring(uImmediatePastFn(uWhenFn(M1)),located(E1,P1)),holdsDuring(uImmediateFutureFn(uWhenFn(M1)),located(E1,P2)),holdsDuring(uImmediatePastFn(uWhenFn(M1)),located(E2,P3)),holdsDuring(uImmediateFutureFn(uWhenFn(M1)),located(E2,P4)),distance(P1,P2,D1),distance(P3,P4,D2)),greaterThan(D2,D1)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51257).
lisp_trans(=>(tSumoGunPowder(P),capability(eventExplosion,instrument,P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51828).
lisp_trans(genls(tPartTypeGunTrigger,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51899).
lisp_trans(genls(tPartTypeGunTrigger,tObjectLever),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51942).
lisp_trans(documentation(tPartTypeGunTrigger,vEnglishLanguage,s("The","part","of","the","#$Gun","which","is","pulled","in","#$Shooting","the","#$Gun",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':51970).
lisp_trans(typicalPart(tPartTypeGunTrigger,tObjectGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52079).
lisp_trans(typicallyContainsPart(tPartTypeGunTrigger,tObjectGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52108).
lisp_trans(genls(tSumoLoadingWeapon,actInserting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52148).
lisp_trans(documentation(tSumoLoadingWeapon,vEnglishLanguage,s("Inserting","ammunition","into","a","#$ProjectileWeapon","in","such","a","way","that","the","ammunition","can","be","fired","by","the","weapon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52183).
lisp_trans(=>(and(tSumoLoadingWeapon(L),patient(L,P)),tSumoProjectile(P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52342).
lisp_trans(=>(and(tSumoLoadingWeapon(L),destination(L,W)),tObjectProjectileLauncher(W)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52435).
lisp_trans(rtBinaryPredicate(effectiveRange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52540).
lisp_trans(rtSingleValuedRelation(effectiveRange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52582).
lisp_trans(genlPreds(effectiveRange,measure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52629).
lisp_trans(argIsa(effectiveRange,1,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52666).
lisp_trans(argIsa(effectiveRange,2,vtLengthMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52699).
lisp_trans(documentation(effectiveRange,vEnglishLanguage,s("Models","the","effective","range","of","some","device","that","is","able","to","move","by","itself","(","like","vehicles",",","rockets","and","so","on",")","or","move","other","things","(","like","weapons",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':52739).
lisp_trans(=>(and(tObjectGun(GUN),effectiveRange(GUN,LM),distance(GUN,O,LM1),not(exists([O2],cycBetween(O,O2,GUN))),lessThanOrEqualTo(LM1,LM)),capability(uKappaFn(DAMAGING,and(actDamaging(DAMAGING),patient(DAMAGING,O))),instrument,GUN)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':53000).
lisp_trans(=>(and(tObjectGun(GUN),effectiveRange(GUN,LM),distance(GUN,O,LM1),tSumoOrganism(O),not(exists([O2],cycBetween(O,O2,GUN))),lessThanOrEqualTo(LM1,LM)),capability(uKappaFn(KILLING,and(actKilling(KILLING),patient(KILLING,O))),instrument,GUN)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':53401).
lisp_trans(genls(tSumoGunStock,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':53755).
lisp_trans(documentation(tSumoGunStock,vEnglishLanguage,s("The","part","of","a","#$Gun","that","is","placed","against","the","shoulder","to","absorb","some","of","the","recoil","action","when","it","is","fired",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':53796).
lisp_trans(=>(tSumoGunStock(STOCK),exists([GUN],and(tObjectGun(GUN),part(STOCK,GUN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':53951).
lisp_trans(genls(tObjectWeaponOfMassDestruction,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':54075).
lisp_trans(documentation(tObjectWeaponOfMassDestruction,vEnglishLanguage,s("Nuclear",",","chemical","and","biological","weapons",".","What","these","weapons","have","in","common","is","that","they","are","designed","to","kill","large","numbers","of","people","indiscriminately",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':54117).
lisp_trans(genls(tPartTypeHandle,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':55481).
lisp_trans(documentation(tPartTypeHandle,vEnglishLanguage,s("The","part","or","parts","of","an","#$Artifact","that","are","designed","to","be","held","with","the","#$Hands","when","the","#$Artifact","is","used","or","carried",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':55520).
lisp_trans(=>(tPartTypeHandle(H),hasPurpose(H,exists([G,D],and(actGrabbing(G),patient(G,H),instrument(G,D),tPartTypeHand(D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':55683).
lisp_trans(genls(tObjectShield,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':55877).
lisp_trans(documentation(tObjectShield,vEnglishLanguage,s("An","#$Artifact","that","is","held","by","the","hand","or","whole","arm","and","is","used","to","prevent","injuries","from","#$Weapons",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':55904).
lisp_trans(=>(tObjectShield(S),hasPurpose(S,exists([P,H],and(actProtecting(P),instrument(P,S),tSumoHuman(H),patient(P,H),prevents(P,uKappaFn(I,and(actInjuring(I),exists([W],and(tObjectWeapon(W),instrument(I,W))),=>(patient(I,H),not(patient(P,H)))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':56047).
lisp_trans(=>(tObjectShield(S),exists([H],and(tPartTypeHandle(H),part(H,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':56573).
lisp_trans(genls(tSumoMast,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':56675).
lisp_trans(documentation(tSumoMast,vEnglishLanguage,s("A","large","pole","in","the","center","of","a","#$WaterVehicle","which","is","used","to","support","a","sail",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':56700).
lisp_trans(=>(tSumoMast(M),exists([W],and(tSumoWaterVehicle(W),part(M,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':56821).
lisp_trans(genls(tSumoWingDevice,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57210).
lisp_trans(documentation(tSumoWingDevice,vEnglishLanguage,s("The","wings","of","#$Aircraft",",","i",".","e",".","the","parts","of","#$Aircraft","that","allow","them","to","become","and","remain","airborne",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57253).
lisp_trans(=>(tSumoWingDevice(W),exists([A],and(tSumoAircraft(A),part(W,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57401).
lisp_trans(genls(tSumoTube,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57508).
lisp_trans(documentation(tSumoTube,vEnglishLanguage,s("A","long",",","narrow",",","and","hollow","#$Artifact","that","is","designed","for","moving","#$Fluids","from","place","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57533).
lisp_trans(=>(tSumoTube(T),hasPurpose(T,exists([P,OBJ],and(actTransfer(P),path(P,T),patient(P,OBJ),sumoAttribute(OBJ,tSumoFluid))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57672).
lisp_trans(genls(tObjectPhotographicFilm,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57862).
lisp_trans(documentation(tObjectPhotographicFilm,vEnglishLanguage,s("Celluloid","covered","with","an","emulsion","which","can","be","converted","into","photographic","negatives","by","a","#$Camera",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':57899).
lisp_trans(genls(tSumoPictureFrame,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58053).
lisp_trans(documentation(tSumoPictureFrame,vEnglishLanguage,s("A","frame","which","surrounds","a","#$PaintedPicture","or","#$Photograph","and","has","the","function","of","protecting","and","accenting","the","picture",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58086).
lisp_trans(=>(tSumoPictureFrame(F),hasPurpose(F,exists([P],and(meetsSpatially(F,P),or(tSumoPaintedPicture(P),tSumoPhotograph(P)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58256).
lisp_trans(genls(tPartTypeShelf,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58458).
lisp_trans(documentation(tPartTypeShelf,vEnglishLanguage,s("An","piece","of","#$Furniture","or","part","of","a","piece","of","#$Furniture","that","is","used","for","keeping","or","displaying","things",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58484).
lisp_trans(=>(tPartTypeShelf(S),exists([F],and(tSumoFurniture(F),part(S,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58631).
lisp_trans(genls(tSumoAutomaticGun,tObjectGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58734).
lisp_trans(documentation(tSumoAutomaticGun,vEnglishLanguage,s("A","#$Gun","that","fires","a","burst","of","#$Projectiles","with","each","pull","of","the","trigger",".","Also","known","as","a","machine","gun",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58762).
lisp_trans(=>(tSumoAutomaticGun(G),hasPurpose(G,exists([S1,S2,P,T],and(actPulling(P),tPartTypeGunTrigger(T),patient(P,T),part(T,G),actShooting(S1),actShooting(S2),instrument(S1,G),instrument(S2,G),not(equal(S1,S2)),causes(P,S1),causes(P,S2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':58915).
lisp_trans(=>(tPartTypeGunTrigger(T),hasPurpose(T,exists([S,G,P],and(tSumoAutomaticGun(G),part(T,G),patient(P,T),actPulling(P),actShooting(S),instrument(S,G),causes(P,S))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59315).
lisp_trans(genls(tSumoArtilleryGun,tObjectGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59593).
lisp_trans(documentation(tSumoArtilleryGun,vEnglishLanguage,s("A","#$Gun","that","is","too","large","to","be","carried","and","fired","by","a","single","#$Human",".","Typically",",","#$ArtilleryGuns","are","on","wheels",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59621).
lisp_trans(genls(tSumoFirearm,tObjectGun),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59785).
lisp_trans(sumo_partition(tSumoFirearm,tObjectRifle,tSumoPistol),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59808).
lisp_trans(documentation(tSumoFirearm,vEnglishLanguage,s("A","#$Gun","that","is","small","enough","to","be","carried","and","fired","by","a","single","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59841).
lisp_trans(genls(tObjectRifle,tSumoFirearm),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59959).
lisp_trans(documentation(tObjectRifle,vEnglishLanguage,s("A","#$Firearm","with","a","long","barrel","that","is","intended","to","be","fired","from","the","shoulder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':59984).
lisp_trans(genls(tSumoPistol,tSumoFirearm),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60105).
lisp_trans(documentation(tSumoPistol,vEnglishLanguage,s("A","#$Firearm","that","is","intended","to","be","aimed","and","fired","with","a","single","hand",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60131).
lisp_trans(genls(tSumoRevolverGun,tSumoPistol),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60245).
lisp_trans(documentation(tSumoRevolverGun,vEnglishLanguage,s("A","#$Pistol","whose","magazine","is","a","revolving","cylinder","with","six","chambers","for","#$Bullets",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60275).
lisp_trans(vtRelationalAttribute(tSumoContainerEmpty),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60406).
lisp_trans(documentation(tSumoContainerEmpty,vEnglishLanguage,'ContainerEmpty is the #$Attribute of a  #$Container that is empty.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60452).
lisp_trans(=>(sumoAttribute(C,tSumoContainerEmpty),tContainer(C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60571).
lisp_trans(=>(sumoAttribute(C,tSumoContainerEmpty),not(exists([H,S],and(tSumoHole(H),hole(H,C),partiallyFills(S,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60635).
lisp_trans(vtRelationalAttribute(tSumoContainerFull),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60795).
lisp_trans(contraryAttribute(tSumoContainerFull,tSumoContainerEmpty),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60840).
lisp_trans(documentation(tSumoContainerFull,vEnglishLanguage,'ContainerFull is the #$Attribute of a  #$Container that is full to capacity.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':60889).
lisp_trans(=>(sumoAttribute(C,tSumoContainerFull),tContainer(C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61017).
lisp_trans(=>(sumoAttribute(C,tSumoContainerFull),exists([H,S],and(tSumoHole(H),hole(H,C),fills(S,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61080).
lisp_trans(genls(tObjectHolster,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61211).
lisp_trans(documentation(tObjectHolster,vEnglishLanguage,s("A","#$Container","for","a","#$Pistol",".","It","is","generally","made","of","Leather","and","worn","on","either","the","shoulder","or","the","waist",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61240).
lisp_trans(=>(tObjectHolster(H),hasPurpose(H,exists([P],and(tSumoPistol(P),contains(H,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61393).
lisp_trans(genls(tObjectWastebasket,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61526).
lisp_trans(documentation(tObjectWastebasket,vEnglishLanguage,s("A","#$Container","which","is","used","for","trash",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61559).
lisp_trans(genls(tSumoArrowProjectile,tSumoProjectile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61645).
lisp_trans(documentation(tSumoArrowProjectile,vEnglishLanguage,s("A","long",",","thin","#$Projectile","with","a","pointed","tip","is","fired","from","a","bow",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61683).
lisp_trans(genls(tSumoDriveComponent,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61801).
lisp_trans(documentation(tSumoDriveComponent,vEnglishLanguage,s("An","#$EngineeringComponent","whose","purpose","is","to","transfer","force","from","one","part","of","a","#$Device","to","another","part",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':61848).
lisp_trans(genls(tPetroleumProduct,tOil),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62135).
lisp_trans(documentation(tPetroleumProduct,vEnglishLanguage,'PetroleumProduct is a broad class that  includes both crude oil (Petroleum) and #$RefinedPetroleumProducts.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62167).
lisp_trans(=>(tPetroleumProduct(PP),exists([O],and(tOrganicCompound(O),part(O,PP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62328).
lisp_trans(genls(tFossilFuel,tFuel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62450).
lisp_trans(genls(tFossilFuel,tPetroleumProduct),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62477).
lisp_trans(documentation(tFossilFuel,vEnglishLanguage,'FossilFuel is the subclass of #$Fuel whose  instances are derived from fossilized organic deposits, such as #$Coal  and #$LiquefiedPetroleumGas.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62516).
lisp_trans(genls(tFuel,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62709).
lisp_trans(documentation(tFuel,vEnglishLanguage,s("Fuel","is","the","class","of","#$Substances","that","can","be","used","as","resources","in","Combustion","processes","in","order","to","produce","heat",".","Mechanical","energy","can","be","produced","by","burning","fuel","in","an","#$Engine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62735).
lisp_trans(=>(tFossilFuel(X),sumoAttribute(X,tSumoFlammable)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':62957).
lisp_trans(genls(tWax,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63017).
lisp_trans(documentation(tWax,vEnglishLanguage,s("Any","#$Substance","of","high","molecular","weight","that","resembles","beeswax",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63042).
lisp_trans(genls(tLiquefiedPetroleumGas,tFossilFuel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63147).
lisp_trans(documentation(tLiquefiedPetroleumGas,vEnglishLanguage,'LiquefiedPetroleumGas is a  compressed hydrocarbon gas.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63340).
lisp_trans(genls(tSumoGasoline,tFossilFuel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63455).
lisp_trans(documentation(tSumoGasoline,vEnglishLanguage,'Gasoline is the subclass of  RefinedPetroleumProducts that are fuels for internal combustion engines.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63486).
lisp_trans(genls(tDieselFuel,tFossilFuel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63634).
lisp_trans(documentation(tDieselFuel,vEnglishLanguage,'DieselFuel is the subclass of  RefinedPetroleumProducts that are fuels for diesel engines.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63667).
lisp_trans(documentation(tPartTypeTransducer,vEnglishLanguage,s("A","#$Device","which","is","capable","of","converting","one","form","of","energy","into","another",".","Formally",",","a","#$Twoport","that","neither","stores","nor","dissipates",",","but","only","transfers","energy","between","its","two","ports",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':63806).
lisp_trans(genls(tPartTypeTransducer,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64037).
lisp_trans(genls(tObjectEngine,tPartTypeTransducer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64067).
lisp_trans(documentation(tObjectEngine,vEnglishLanguage,s("Engine","is","a","subclass","of","#$Transducer",".","#$Engines","are","devices","for","converting","some","form","of","energy","resource","into","mechanical","power",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64096).
lisp_trans(documentation(powerComponent,vEnglishLanguage,s("(","powerComponent","?","GENERATOR","?","THING",")","means","that","the","#$CorpuscularObject","?","GENERATOR","is","the","power","-","producing","component","of","the","#$CorpuscularObject","?","THING","which","provides","the","energy","for","its","operation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64268).
lisp_trans(rtBinaryPredicate(powerComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64510).
lisp_trans(rtAsymmetricRelation(powerComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64552).
lisp_trans(rtIrreflexiveRelation(powerComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64597).
lisp_trans(argIsa(powerComponent,1,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64643).
lisp_trans(argIsa(powerComponent,2,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64687).
lisp_trans(genlPreds(powerComponent,component),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64731).
lisp_trans(=>(powerComponent(G,O),and(tSumoDevice(G),tObjectArtifact(O))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64771).
lisp_trans(=>(and(powerComponent(G,O),tSumoDevice(O)),tObjectSelfPoweredDevice(O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':64862).
lisp_trans(genls(tObjectSteamEngine,tObjectEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65057).
lisp_trans(documentation(tObjectSteamEngine,vEnglishLanguage,'SteamEngine is the subclass of #$Engines  that produce mechanical power from heat and steam pressure.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65087).
lisp_trans(genls(tObjectTurbine,tObjectEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65238).
lisp_trans(documentation(tObjectTurbine,vEnglishLanguage,s("An","#$Engine","which","converts","the","kinetic","energy","of","a","moving","#$Liquid","(","typically","#$Water",")","into","mechanical","energy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65264).
lisp_trans(genls(tPlaceLikeWindmill,tObjectEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65419).
lisp_trans(documentation(tPlaceLikeWindmill,vEnglishLanguage,s("Windmill","is","the","subclass","of","#$Engines","that","produce","mechanical","power","from","#$Wind","energy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65446).
lisp_trans(genls(tObjectInternalCombustionEngine,tObjectEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65579).
lisp_trans(documentation(tObjectInternalCombustionEngine,vEnglishLanguage,'InternalCombustionEngine is  the subclass of #$Engines in which a heat reaction that occurs inside  the engine is transformed into mechanical energy.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65622).
lisp_trans(=>(isa(R,uOperatingFn(tObjectInternalCombustionEngine)),exists([E,C,F],and(tObjectInternalCombustionEngine(E),instrument(R,E),hole(C,E),actCombustion(F),completelyFills(F,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':65834).
lisp_trans(genls(tSumoManifold,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66077).
lisp_trans(documentation(tSumoManifold,vEnglishLanguage,s("A","pipe","which","has","several","outlets","for","other","pipes","that","flow","into","or","out","of","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66118).
lisp_trans(genls(tSumoElectricMotor,tObjectEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66241).
lisp_trans(genls(tSumoElectricMotor,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66273).
lisp_trans(documentation(tSumoElectricMotor,vEnglishLanguage,'ElectricMotor is the subclass of #$Engines  that produce mechanical power from electricity.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66313).
lisp_trans(genls(tSumoSwitchDevice,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66456).
lisp_trans(documentation(tSumoSwitchDevice,vEnglishLanguage,s("An","#$EngineeringComponent","which","is","capable","of","turning","an","#$ElectricDevice","on","and","off",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66501).
lisp_trans(=>(tSumoSwitchDevice(DEVICE),exists([PROC1,PROC2,ELECTRIC],and(instrument(PROC1,DEVICE),causes(PROC1,PROC2),instrument(PROC2,ELECTRIC),tSumoElectricDevice(ELECTRIC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66636).
lisp_trans(genls(tPartTypeMicrophone,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66880).
lisp_trans(genls(tPartTypeMicrophone,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66917).
lisp_trans(documentation(tPartTypeMicrophone,vEnglishLanguage,s("A","#$CommunicationDevice","that","converts","sound","into","electrical","energy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':66959).
lisp_trans(genls(tSumoReceiverDevice,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67074).
lisp_trans(genls(tSumoReceiverDevice,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67120).
lisp_trans(documentation(tSumoReceiverDevice,vEnglishLanguage,s("An","#$ElectricDevice","that","is","capable","of","receiving","and","decoding","#$RadioEmissions",",","e",".","g",".","#$Radios","and","#$Televisions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67161).
lisp_trans(=>(and(tSumoRadioEmission(E),destination(E,D)),tSumoReceiverDevice(D)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67325).
lisp_trans(genls(tObjectTelegraph,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67426).
lisp_trans(genls(tObjectTelegraph,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67462).
lisp_trans(documentation(tObjectTelegraph,vEnglishLanguage,s("A","#$Device","that","permits","#$LinguisticCommunication","between","remote","points","by","means","of","a","code","of","aural","dots","and","dashes","that","can","be","converted","into","letters","of","an","alphabet",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67503).
lisp_trans(genls(tObjectProjectionScreen,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67717).
lisp_trans(documentation(tObjectProjectionScreen,vEnglishLanguage,s("A","#$CommunicationDevice","upon","which","images","are","projected","so","that","they","can","be","viewed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67765).
lisp_trans(genls(tObjectPencil,tSumoWritingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67902).
lisp_trans(documentation(tObjectPencil,vEnglishLanguage,s("A","#$WritingDevice","that","consists","of","an","encased","piece","of","graphite",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':67934).
lisp_trans(genls(vtDeviceAttribute,tSumoObjectiveNorm),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68509).
lisp_trans(documentation(vtDeviceAttribute,vEnglishLanguage,s("This","class","contains","#$Attributes","that","indicate","how","a","#$Device","is","behaving","with","respect","to","some","norm","or","expectation",".","Examples",":","#$Functioning",",","#$Malfunctioning",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68550).
lisp_trans(=>(and(sumoAttribute(DEVICE,ATTRIBUTE),vtDeviceAttribute(ATTRIBUTE)),tSumoDevice(DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68760).
lisp_trans(vtDeviceAttribute(actFunctioning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68885).
lisp_trans(contraryAttribute(actFunctioning,actMalfunctioning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68924).
lisp_trans(documentation(actFunctioning,vEnglishLanguage,s("Indicates","that","a","#$Device","is","performing","its","intended","function",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':68971).
lisp_trans(=>(and(sumoAttribute(DEVICE,actFunctioning),hasPurpose(DEVICE,PROP)),truth(PROP,vTrue)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69082).
lisp_trans(vtDeviceAttribute(actMalfunctioning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69190).
lisp_trans(documentation(actMalfunctioning,vEnglishLanguage,s("Indicates","that","a","#$Device","is","not","performing","its","intended","function",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69232).
lisp_trans(=>(and(sumoAttribute(DEVICE,actMalfunctioning),hasPurpose(DEVICE,PROP)),truth(PROP,vFalse)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69350).
lisp_trans(genls(vtDeviceStateAttribute,vtInternalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69905).
lisp_trans(documentation(vtDeviceStateAttribute,vEnglishLanguage,'DeviceStateAttribute is the class of attributes that represent different states that a Device may be in.  Examples: #$DeviceOff, #$DeviceOn, #$DeviceOpen, and #$DeviceClosed.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':69956).
lisp_trans(vtDeviceStateAttribute(tSumoDeviceClosed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':70189).
lisp_trans(vtDeviceStateAttribute(tSumoDeviceOff),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':70834).
lisp_trans(vtDeviceStateAttribute(tSumoDeviceOn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':70951).
lisp_trans(vtDeviceStateAttribute(tSumoDeviceOpen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71066).
lisp_trans(documentation(deviceState,vEnglishLanguage,s("(","deviceState","?","DEVICE","?","STATE",")","means","that","the","#$Object","?","DEVICE","is","in","the","#$DeviceStateAttribute","?","STATE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71190).
lisp_trans(rtBinaryPredicate(deviceState),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71339).
lisp_trans(argIsa(deviceState,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71378).
lisp_trans(argIsa(deviceState,2,vtDeviceStateAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71408).
lisp_trans(genlPreds(deviceState,sumoAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71452).
lisp_trans(genls(tSumoAerator,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71489).
lisp_trans(documentation(tSumoAerator,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","mix","#$Substances","with","#$Air",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71515).
lisp_trans(=>(tSumoAerator(AERATOR),hasPurpose(AERATOR,exists([COMBINE,AIR],and(actCombining(COMBINE),resource(COMBINE,AIR),tAir(AIR),instrument(COMBINE,AERATOR))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71619).
lisp_trans(genls(actAerating,actCombining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71965).
lisp_trans(documentation(actAerating,vEnglishLanguage,s("Combining","a","substance","with","#$Air",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':71995).
lisp_trans(=>(actAerating(AERATE),exists([AIR,S],and(patient(AERATE,AIR),tAir(AIR),patient(AERATE,S),sumoAttribute(S,tSumoLiquid)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72072).
lisp_trans(genls(tObjectBroom,tSumoBrushOrComb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72265).
lisp_trans(documentation(tObjectBroom,vEnglishLanguage,s("A","#$BrushOrComb","whose","purpose","is","to","remove","dirt","and","other","small","particles","from","floors",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72294).
lisp_trans(=>(tObjectBroom(B),hasPurpose(B,exists([S],and(actSweeping(S),instrument(S,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72423).
lisp_trans(genls(tSumoBrushOrComb,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72558).
lisp_trans(documentation(tSumoBrushOrComb,vEnglishLanguage,s("A","#$Device","which","consists","of","a","handle","and","bristles","and","whose","purpose","is","to","remove","particles","from","something","or","to","smooth","something","out",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72588).
lisp_trans(=>(tSumoBrushOrComb(B),hasPurpose(B,exists([S],and(or(actRemoving(S),tSumoSurfaceChange(S)),instrument(S,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72771).
lisp_trans(genls(tSumoMatchDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72965).
lisp_trans(documentation(tSumoMatchDevice,vEnglishLanguage,s("A","small","stick","of","carboard","or","wood","that","is","treated","with","chemicals","that","can","be","easily","ignited","with","friction",".","MatchDevices","are","used","for","starting","fires",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':72995).
lisp_trans(=>(tSumoMatchDevice(M),capability(iTimeOf_StartFn(actCombustion),instrument,M)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73194).
lisp_trans(genls(tSumoVendingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73278).
lisp_trans(documentation(tSumoVendingDevice,vEnglishLanguage,s("A","#$Device","which","is","capable","of","#$Selling","a","#$Product","to","a","customer","automatically","when","the","customer","inserts","the","appropriate","amount","of","Currency",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73310).
lisp_trans(=>(tSumoVendingDevice(VD),hasPurpose(VD,exists([T,C,P],and(actFinancialTransaction(T),instrument(T,VD),patient(T,C),tObjectCurrency(C),patient(T,P),tProduct(P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73504).
lisp_trans(genls(tSumoWritingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73777).
lisp_trans(documentation(tSumoWritingDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","be","an","instrument","of","#$Writing",",","e",".","g",".","pens",",","pencils",",","crayons",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73809).
lisp_trans(=>(tSumoWritingDevice(D),hasPurpose(D,exists([W],and(actWriting(W),instrument(W,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':73955).
lisp_trans(genls(tObjectSmokingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74097).
lisp_trans(documentation(tObjectSmokingDevice,vEnglishLanguage,s("Any","Device","whose","purpose","is","#$Smoking",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74129).
lisp_trans(=>(tObjectSmokingDevice(D),hasPurpose(D,exists([S],and(actSmoking(S),instrument(S,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74217).
lisp_trans(genls(tSumoSmokingPipe,tObjectSmokingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74362).
lisp_trans(documentation(tSumoSmokingPipe,vEnglishLanguage,s("A","#$SmokingDevice","consisting","of","a","tube","and","a","small","bowl",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74399).
lisp_trans(genls(tSumoShower,tSumoBathingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74504).
lisp_trans(documentation(tSumoShower,vEnglishLanguage,'Shower refers to a plumbing fixture that sprays water over you.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74536).
lisp_trans(termFormat(vEnglishLanguage,tSumoShower,"shower"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74643).
lisp_trans(=>(tSumoShower(SHOWER),hasPurpose(SHOWER,exists([SPRAY],and(actWaterMotion(SPRAY),origin(SPRAY,SHOWER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74689).
lisp_trans(=>(tSumoShower(SHOWER),exists([X,FLOOR],and(or(iWall(X),actCeiling(X)),connected(SHOWER,X),tSumoFloor(FLOOR),orientation(SHOWER,FLOOR,tSumoAbove)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':74850).
lisp_trans(genls(tSumoBathTub,tSumoBathingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75085).
lisp_trans(genls(tSumoBathTub,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75118).
lisp_trans(documentation(tSumoBathTub,tSumoBathingDevice,'BathTub refers to a #$BathingDevice that you can fill with water to use to watch the body'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75152).
lisp_trans(termFormat(vEnglishLanguage,tSumoBathTub,"tub"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75284).
lisp_trans(=>(tSumoBathTub(TUB),hasPurpose(TUB,exists([WATER],and(tWater(WATER),contains(TUB,WATER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75328).
lisp_trans(genls(tSumoExcrement,tSumoBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75477).
lisp_trans(documentation(tSumoExcrement,vEnglishLanguage,'Excrement refers to the waste matter  that is discharged from the body'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75512).
lisp_trans(termFormat(vEnglishLanguage,tSumoExcrement,"excrement"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75629).
lisp_trans(=>(tSumoExcrement(X),exists([PROC,ORG],and(tSumoOrganism(ORG),actPhysiologicProcess(PROC),result(PROC,X),agent(PROC,ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75681).
lisp_trans(genls(tFeces,tSumoExcrement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75869).
lisp_trans(documentation(tFeces,vEnglishLanguage,'Feces is a type of #$Solid #$Excrement  evacuated from the bowels'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':75896).
lisp_trans(termFormat(vEnglishLanguage,tFeces,"feces"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76004).
lisp_trans(=>(tFeces(X),sumoAttribute(X,tSumoSolid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76048).
lisp_trans(=>(tFeces(X),exists([PROC,INT],and(actPhysiologicProcess(PROC),instrument(PROC,INT),tPartTypeIntestine(INT),result(PROC,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76099).
lisp_trans(genls(tUrine,tSumoExcrement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76295).
lisp_trans(documentation(tUrine,vEnglishLanguage,'Urine is a type of #$Liquid #$Excrement that is secreted by the #$Kidney'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76322).
lisp_trans(termFormat(vEnglishLanguage,tUrine,"urine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76437).
lisp_trans(=>(tUrine(X),sumoAttribute(X,tSumoSolid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76481).
lisp_trans(=>(tUrine(X),exists([PROC,KIDNEY],and(actPhysiologicProcess(PROC),instrument(PROC,KIDNEY),tPartTypeKidney(KIDNEY),result(PROX,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76533).
lisp_trans(genls(actExcretion,actOrganismProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76733).
lisp_trans(documentation(actExcretion,vEnglishLanguage,'Excretion is a type of #$OrganismProcess that discharges waste from tissues, organs or the body'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76770).
lisp_trans(termFormat(vEnglishLanguage,actExcretion,"excretion"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76912).
lisp_trans(=>(actExcretion(PROC),exists([ORG,WASTE,PART],and(tSumoOrganism(ORG),agent(PROC,ORG),patient(PROC,WASTE),tSumoExcrement(WASTE),tSumoBodyPart(PART),instrument(PROC,PART)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':76964).
lisp_trans(genls(actUrination,actExcretion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77222).
lisp_trans(documentation(actUrination,vEnglishLanguage,'Urination is a type of #$Excretion that  discharges #$Urine'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77253).
lisp_trans(termFormat(vEnglishLanguage,actUrination,"urination"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77359).
lisp_trans(=>(actUrination(PROC),exists([URINE],and(tUrine(URINE),patient(PROC,URINE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77411).
lisp_trans(genls(actDefecation,actExcretion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77541).
lisp_trans(documentation(actDefecation,vEnglishLanguage,'Defecation is a type of #$Excretion that discharges #$Feces'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77573).
lisp_trans(termFormat(vEnglishLanguage,actDefecation,"defecation"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77680).
lisp_trans(=>(actDefecation(PROC),exists([FECES],and(tFeces(FECES),patient(PROC,FECES)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77734).
lisp_trans(genls(tSewage,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77859).
lisp_trans(documentation(tSewage,vEnglishLanguage,s("The","byproduct","of","#$Animal","digestion",".","Sewage","is","a","waste","product","that","is","removed","from","the","body","of","an","animal","by","a","normally","functioning","#$BiologicalProcess",".","Sewage","consists","largely","of","substances","which","the","animal","cannot","digest",",","or","may","be","harmful",",","so","the","breakdown","of","the","biological","waste","removal","process","can","be","evidence","or","cause","of","a","#$DiseaseOrSyndrome",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':77886).
lisp_trans(=>(and(tClazzAnimal(ANI),tSumoDiseaseOrSyndrome(D),not(sumoAttribute(ANI,D))),exists([P,W],and(eventBiologicalProcess(P),actRemoving(P),origin(P,ANI),tSewage(W),agent(P,ANI),patient(P,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':78283).
lisp_trans(genls(tSumoBidet,tSumoWashingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':78593).
lisp_trans(documentation(tSumoBidet,vEnglishLanguage,'Bidet is a #$WashingDevice intended for washing genitals and the anal area while on the toilet'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':78624).
lisp_trans(termFormat(vEnglishLanguage,tSumoBidet,"bidet"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':78761).
lisp_trans(=>(tSumoBidet(X),hasPurpose(X,exists([PROC,WASH,PART],and(or(actDefecation(PROC),actUrination(PROC)),instrument(PROC,PART),actWashing(WASH),patient(WASH,PART),instrument(WASH,X),before(uBeginFn(uWhenFn(PROC)),uBeginFn(uWhenFn(WASH))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':78805).
lisp_trans(genls(tPartTypeToilet,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79198).
lisp_trans(documentation(tPartTypeToilet,vEnglishLanguage,s("A","#$Device","for","the","disposal","of","wastes","resulting","from","urination","and","defecation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79223).
lisp_trans(=>(and(located(T,R),tPartTypeToilet(T),tSumoRoom(R)),tPartTypeBathroom(R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79344).
lisp_trans(=>(tPartTypeToilet(X),hasPurpose(X,exists([PROC],and(or(actDefecation(PROC),actUrination(PROC)),destination(PROC,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79451).
lisp_trans(genls(tObjectToothbrush,tSumoBrushOrComb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79653).
lisp_trans(documentation(tObjectToothbrush,vEnglishLanguage,s("A","small","#$BrushOrComb","with","relatively","soft","bristles","and","a","long","handle",",","used","for","brushing","teeth","(","see","#$Tooth",")",".","It","is","used","help","control","bacteria","living","in","the","mouth",".","While","most","typically","used","by","humans","on","themselves",",","it","can","be","used","by","#$Dentists","on","their","patients","and","by","adults","assisting","children",".","They","are","occasionally","used","by","humans","caring","for","pets",",","zoo","animals","and","valuable","livestock",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':79687).
lisp_trans(=>(tObjectToothbrush(T),hasPurpose(T,exists([K],and(tPartTypeTooth(TOOTH),instrument(K,T),actKilling(K),tClazzBacterium(B),patient(K,B),patient(K,TOOTH))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80121).
lisp_trans(genls(tSumoCigarOrCigarette,tObjectSmokingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80375).
lisp_trans(documentation(tSumoCigarOrCigarette,vEnglishLanguage,s("A","tube","of","thin","paper","containing","finely","ground","tobacco","that","is","smoked",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80417).
lisp_trans(=>(tSumoCigarOrCigarette(C),exists([T],and(tTobacco(T),part(T,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80539).
lisp_trans(genls(tSumoTableware,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80651).
lisp_trans(documentation(tSumoTableware,vEnglishLanguage,'Devices that are used in #$Ingesting (#$Eating  and/or #$Drinking) a meal.  This coves dishware, flatware, and glassware.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80679).
lisp_trans(=>(tSumoTableware(T),hasPurpose(T,exists([I],and(actIngesting(I),instrument(I,T))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80848).
lisp_trans(genls(tObjectCompass,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':80988).
lisp_trans(genls(tObjectCompass,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81014).
lisp_trans(documentation(tObjectCompass,vEnglishLanguage,s("A","#$Device","that","indicates","the","direction","of","the","various","#$DirectionalAttributes","with","respect","to","the","device",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81054).
lisp_trans(=>(tObjectCompass(C),exists([D],and(vtDirectionalAttribute(D),represents(C,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81203).
lisp_trans(genls(tSumoMajorAppliance,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81325).
lisp_trans(genls(tObjectRefrigerator,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81402).
lisp_trans(genls(tObjectFreezer,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81441).
lisp_trans(genls(tSumoStove,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81475).
lisp_trans(genls(tSumoCookingOven,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81507).
lisp_trans(genls(tObjectHotWaterHeater,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81545).
lisp_trans(genls(tSumoClothesWashingMachine,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81586).
lisp_trans(genls(tObjectClothesDryer,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81634).
lisp_trans(genls(tObjectDishwasher,tSumoMajorAppliance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81673).
lisp_trans(genls(tObjectCoolingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81723).
lisp_trans(documentation(tObjectCoolingDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","#$Cooling","something",",","e",".","g",".","air","conditioners",",","refrigerators",",","freezers",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81755).
lisp_trans(=>(tObjectCoolingDevice(D),hasPurpose(D,exists([C],and(actCooling(C),instrument(C,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':81906).
lisp_trans(genls(tSumoFanDevice,tObjectCoolingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82049).
lisp_trans(documentation(tSumoFanDevice,vEnglishLanguage,s("A","#$CoolingDevice","which","consists","simply","of","one","or","more","blades","that","circulate","the","air",".","Note","that","this","class","covers","both","electrical","fans","and","fans","that","are","manually","operated",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82084).
lisp_trans(=>(tSumoFanDevice(F),hasPurpose(F,exists([W],and(tSumoWind(W),instrument(W,F))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82303).
lisp_trans(genls(tObjectHeatingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82438).
lisp_trans(documentation(tObjectHeatingDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","#$Heating","something",",","e",".","g",".","electric","heaters",",","heat","lamps",",","ovens",",","stoves",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82470).
lisp_trans(=>(tObjectHeatingDevice(D),hasPurpose(D,exists([H],and(actHeating(H),instrument(H,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82624).
lisp_trans(genls(tObjectOven,tObjectHeatingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82766).
lisp_trans(genls(tObjectOven,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82796).
lisp_trans(documentation(tObjectOven,vEnglishLanguage,s("A","#$HeatingDevice","with","a","door","for","inserting","and","removing","#$Food","that","is","to","undergo","#$Baking",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82822).
lisp_trans(=>(tObjectOven(O),hasPurpose(O,exists([C],and(actCooking(C),instrument(C,O))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':82956).
lisp_trans(genls(tSumoStove,tObjectHeatingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83081).
lisp_trans(documentation(tSumoStove,vEnglishLanguage,s("A","#$HeatingDevice","which","consists","one","or","more","burners","for","heating","pots","and","pans","of","#$Food",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83112).
lisp_trans(=>(tSumoStove(S),hasPurpose(S,exists([C],and(actCooking(C),instrument(C,S))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83244).
lisp_trans(genls(tObjectRefrigerator,tObjectCoolingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83378).
lisp_trans(genls(tObjectRefrigerator,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83416).
lisp_trans(genls(tObjectRefrigerator,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83455).
lisp_trans(documentation(tObjectRefrigerator,vEnglishLanguage,s("The","intersection","of","#$Containers","and","#$ElectricDevices","in","which","the","temperature","is","reduced","from","that","of","the","outside","air","by","a","#$Cooling","process",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83489).
lisp_trans(genls(tSumoPotOrPan,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83683).
lisp_trans(documentation(tSumoPotOrPan,vEnglishLanguage,s("A","#$Container","which","has","a","handle","and","is","used","for","#$Cooking",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83713).
lisp_trans(=>(tSumoPotOrPan(P),hasPurpose(P,exists([C],and(actCooking(C),instrument(C,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83818).
lisp_trans(genls(tRamp,tSumoSelfConnectedObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83955).
lisp_trans(documentation(tRamp,vEnglishLanguage,s("Ramp","is","the","class","of","#$SelfConnectedObjects","that","are","inclined","planes","used","for","moving","objects","from","one","level","to","another",",","especially","used","for","wheeled","vehicles","and","people","who","cannot","climb","stairs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':83991).
lisp_trans(=>(tRamp(R),capability(tSumoMotionUpward,path,R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84226).
lisp_trans(=>(tRamp(R),capability(tSumoMotionDownward,path,R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84289).
lisp_trans(genls(tSumoRecreationOrExerciseDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84354).
lisp_trans(documentation(tSumoRecreationOrExerciseDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","#$RecreationOrExercise",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84399).
lisp_trans(=>(tSumoRecreationOrExerciseDevice(D),hasPurpose(D,exists([E],and(tSumoRecreationOrExercise(E),instrument(E,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84513).
lisp_trans(genls(tObjectWalkingCane,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84681).
lisp_trans(documentation(tObjectWalkingCane,vEnglishLanguage,s("A","#$Device","which","has","the","form","of","a","staff","with","a","handle","and","which","enables","some","people","to","walk","with","greater","assurance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84711).
lisp_trans(=>(tObjectWalkingCane(C),hasPurpose(C,exists([W],and(actWalking(W),instrument(W,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':84876).
lisp_trans(genls(tSumoWashingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85016).
lisp_trans(documentation(tSumoWashingDevice,vEnglishLanguage,s("Any","#$Device","whose","purpose","is","#$Washing","something",",","e",".","g",".","washing","machines",",","dishwashers",",","bathtubs",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85048).
lisp_trans(=>(tSumoWashingDevice(D),hasPurpose(D,exists([W],and(actWashing(W),instrument(W,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85200).
lisp_trans(genls(tSumoMaterialHandlingEquipment,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85342).
lisp_trans(documentation(tSumoMaterialHandlingEquipment,vEnglishLanguage,'MaterialHandlingEquipment  is a class of #$Devices that are equipment used for handling goods and  supplies more efficiently or safely.  Examples are cranes, hoists,  forklifts, conveyors, racks, etc.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85386).
lisp_trans(genls(tSumoCrane,tSumoMaterialHandlingEquipment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85650).
lisp_trans(documentation(tSumoCrane,vEnglishLanguage,s("Crane","is","a","subclass","of","mechanical","#$Devices","that","consist","of","a","#$HoistingDevice","on","a","moveable","boom",",","designed","to","assist","in","moving","heavy","loads",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85693).
lisp_trans(=>(tSumoCrane(C),exists([H],and(tSumoHoistingDevice(H),component(H,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85877).
lisp_trans(genls(tSumoHoistingDevice,tSumoMaterialHandlingEquipment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':85990).
lisp_trans(documentation(tSumoHoistingDevice,vEnglishLanguage,'HoistingDevice is a subclass of  mechanical #$Devices that provide a mechanical advantage in lifting  and lowering, e.g., by use of a block and tackle.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86042).
lisp_trans(=>(tSumoHoistingDevice(H),capability(tSumoMotionUpward,instrument,H)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86246).
lisp_trans(=>(tSumoHoistingDevice(H),capability(tSumoMotionDownward,instrument,H)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86325).
lisp_trans(genls(tObjectOpticalDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86406).
lisp_trans(documentation(tObjectOpticalDevice,vEnglishLanguage,s("A","#$Device","which","enables","someone","to","see","something","more","clearly","or","with","greater","magnification",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86438).
lisp_trans(=>(tObjectOpticalDevice(D),hasPurpose(D,exists([S],and(actSeeing(S),instrument(S,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86582).
lisp_trans(genls(tSumoEyeGlass,tObjectOpticalDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86723).
lisp_trans(documentation(tSumoEyeGlass,vEnglishLanguage,s("A","lens","or","pair","of","lenses","with","or","without","frames","whose","purpose","is","to","to","correct","a","defect","in","vision",".","This","class","covers","ordinary","eye","glasses",",","reading","glasses",",","contact","lenses",",","monocles",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86757).
lisp_trans(genls(tLens,tObjectOpticalDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':86991).
lisp_trans(documentation(tLens,vEnglishLanguage,s("An","#$OpticalDevice","which","consists","of","a","polished",",","transparent","piece","of","glass","or","plastic",".","Lenses","are","often","part","of","other","#$OpticalDevices",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87021).
lisp_trans(genls(tObjectMicroscope,tObjectOpticalDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87201).
lisp_trans(documentation(tObjectMicroscope,vEnglishLanguage,s("An","#$OpticalDevice","with","a","stand","and","a","focus",",","which","is","used","for","magnifying","the","images","of","things","that","are","placed","in","the","stand",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87237).
lisp_trans(genls(tObjectFilter,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87409).
lisp_trans(documentation(tObjectFilter,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","remove","part","of","a","#$Mixture","that","is","passed","through","the","#$Filter",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87434).
lisp_trans(=>(tObjectFilter(FILTER),hasPurpose(FILTER,exists([REMOVE,M],and(actRemoving(REMOVE),origin(REMOVE,M),tMixture(M),instrument(REMOVE,FILTER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87572).
lisp_trans(genls(tSumoFileDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87799).
lisp_trans(documentation(tSumoFileDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","make","something","smoother",".","For","example",",","a","nail","file","is","used","to","even","out","the","tips","of","one","'s","finger","nails",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':87828).
lisp_trans(=>(tSumoFileDevice(DEVICE),capability(tSumoSurfaceChange,instrument,DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88010).
lisp_trans(genls(tSumoElectricDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88096).
lisp_trans(documentation(tSumoElectricDevice,vEnglishLanguage,s("A","#$Device","that","uses","#$Electricity","as","its","primary","power","source",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88129).
lisp_trans(=>(and(tSumoElectricDevice(DEV),actProcess(EV),instrument(EV,DEV)),exists([R],and(tElectricity(R),resource(EV,R)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88396).
lisp_trans(genls(tElectricity,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88580).
lisp_trans(documentation(tElectricity,vEnglishLanguage,s("While","electricity","is","typically","thought","of","as","just","a","difference","in","electrical","potential",",","one","way","of","modeling","electricity","is","as","a","substance","that","can","be","moved","from","one","point","to","another","or","consumed",".","One","could","make","the","claim","that","subatomic","physics","also","supports","the","classification","as","a","substance","since","electrons","are","objects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88613).
lisp_trans(documentation(tSumoPowerSource,vEnglishLanguage,s("A","source","of","electrical","power",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':88987).
lisp_trans(termFormat(vEnglishLanguage,tSumoPowerSource,s("power","source")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89063).
lisp_trans(genls(tSumoPowerSource,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89119).
lisp_trans(=>(tSumoPowerSource(PS),exists([RE],and(tSumoRadiatingElectromagnetic(RE),origin(RE,PS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89149).
lisp_trans(documentation(tSumoDCPowerSource,vEnglishLanguage,s("A","direct","-","current","#$PowerSource",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89280).
lisp_trans(termFormat(vEnglishLanguage,tSumoDCPowerSource,s("DC","power","source")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89360).
lisp_trans(genls(tSumoDCPowerSource,tSumoPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89421).
lisp_trans(genls(tPartTypeBattery,tSumoDCPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89459).
lisp_trans(genls(tPartTypeBattery,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89492).
lisp_trans(documentation(tPartTypeBattery,vEnglishLanguage,s("Battery","is","a","subclass","of","#$Device",".","Batteries","are","devices","that","use","chemical","means","to","store","or","produce","electrical","power",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89526).
lisp_trans(genls(tSumoRadar,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89690).
lisp_trans(documentation(tSumoRadar,vEnglishLanguage,s("An","#$ElectricDevice","that","emits","and","receives","microwave","radiation","for","the","purpose","of","locating","and","tracking","distant","objects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89722).
lisp_trans(=>(tSumoRadar(RADAR),hasPurpose(RADAR,exists([DISCOVER],and(actDiscovering(DISCOVER),instrument(DISCOVER,RADAR))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':89886).
lisp_trans(=>(tSumoRadar(RADAR),capability(tSumoRadiatingElectromagnetic,agent,RADAR)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90057).
lisp_trans(rtBinaryPredicate(discovers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90142).
lisp_trans(argIsa(discovers,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90179).
lisp_trans(argIsa(discovers,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90206).
lisp_trans(documentation(discovers,vEnglishLanguage,s("(","discovers","?","AGENT","?","OBJECT",")","means","that","the","#$Agent","?","AGENT","discovered","the","#$Object","?","OBJECT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90234).
lisp_trans(termFormat(vEnglishLanguage,discovers,"discovers"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90369).
lisp_trans(=>(discovers(AGENT,OBJECT),exists([DISCOVERING],and(actDiscovering(DISCOVERING),agent(DISCOVERING,AGENT),patient(DISCOVERING,OBJECT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90420).
lisp_trans(genls(tSumoSonar,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90608).
lisp_trans(documentation(tSumoSonar,vEnglishLanguage,s("Something","that","emits","and","receives","sound","for","the","purpose","of","locating","and","tracking","distant","objects",".","Note","that","this","covers","both","manmade","devices","and","#$BodyParts","such","as","the","sonar","of","bats","and","dolphins",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90643).
lisp_trans(=>(tSumoSonar(SONAR),hasPurpose(SONAR,exists([DISCOVER],and(actDiscovering(DISCOVER),instrument(DISCOVER,SONAR))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':90883).
lisp_trans(=>(tSumoSonar(SONAR),capability(tSumoRadiatingSound,agent,SONAR)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91054).
lisp_trans(genls(actEchoing,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91129).
lisp_trans(documentation(actEchoing,vEnglishLanguage,s("Instances","of","#$RadiatingSound","where","the","instrument","is","a","surface","which","bounces","sound","waves","back","to","their","origin",",","where","they","can","be","heard","again",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91163).
lisp_trans(genls(actElectricalSignalling,actSignalling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91351).
lisp_trans(documentation(actElectricalSignalling,vEnglishLanguage,'ElectricalSignalling is the  subclass of #$Signalling processes that involve control of an electrical  current.  Cf. #$ElectronicSignalling.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91394).
lisp_trans(=>(actElectricalSignalling(S),exists([D],and(tSumoElectricDevice(D),instrument(S,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':91592).
lisp_trans(genls(actElectronicSignalling,actElectricalSignalling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92005).
lisp_trans(documentation(actElectronicSignalling,vEnglishLanguage,'ElectronicSignalling is the  subclass of #$ElectricalSignalling that involve a signal generated through electronic means.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92058).
lisp_trans(genls(tObjectSecurityDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92373).
lisp_trans(documentation(tObjectSecurityDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","protect","people","or","property","from","kidnappers","and","/","or","thieves",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92406).
lisp_trans(genls(tObjectLock,tObjectSecurityDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92547).
lisp_trans(documentation(tObjectLock,vEnglishLanguage,s("A","#$Device",",","which",",","through","a","#$Key","or","a","combination","prevents","access","to","a","#$Container","or","#$StationaryArtifact",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92578).
lisp_trans(genls(tSumoKey,tObjectSecurityDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92729).
lisp_trans(documentation(tSumoKey,vEnglishLanguage,s("A","#$Device","which","opens","and","closes","a","#$Lock",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92759).
lisp_trans(=>(tSumoKey(X),hasPurpose(X,exists([LOCK],and(tObjectLock(LOCK),capability(uKappaFn(CLOSE,and(actClosing(CLOSE),patient(CLOSE,LOCK),holdsDuring(uImmediateFutureFn(CLOSE),sumoAttribute(LOCK,tSumoLocked)))),instrument,X),capability(uKappaFn(OPEN,and(actClosing(OPEN),patient(OPEN,LOCK),holdsDuring(uImmediateFutureFn(OPEN),not(sumoAttribute(LOCK,tSumoLocked))))),instrument,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':92842).
lisp_trans(vtRelationalAttribute(tSumoLocked),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':93757).
lisp_trans(documentation(tSumoLocked,vEnglishLanguage,s("An","#$Attribute","of","#$Objects",".","A","#$Locked","#$Object","is","in","some","way","restricted","in","movement",",","there","is","some","movement",",","that","the","the","#$Object","can","not","performed",",","when","it","'s","locked",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':93795).
lisp_trans(=>(sumoAttribute(X,tSumoLocked),exists([LOCK,CLOSE,MOVE],and(tObjectLock(LOCK),connected(LOCK,X),actClosing(CLOSE),patient(CLOSE,LOCK),actMotion(MOVE),earlier(uWhenFn(CLOSE),uWhenFn(sumoAttribute(X,tSumoLocked))),holdsDuring(uWhenFn(sumoAttribute(X,tSumoLocked)),not(modalAttribute(patient(MOVE,X),tSumoPossibility)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94007).
lisp_trans(=>(sumoAttribute(X,tSumoLocked),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94459).
lisp_trans(genls(tSumoSafeContainer,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94525).
lisp_trans(genls(tSumoSafeContainer,tObjectSecurityDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94560).
lisp_trans(documentation(tSumoSafeContainer,vEnglishLanguage,s("A","#$Container","with","a","#$Lock","which","is","intended","to","secure","items","from","theft",".","Note","that","this","covers","safes",",","lockers",",","and","locked","storage","compartments",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94600).
lisp_trans(=>(tSumoSafeContainer(S),exists([L],and(tObjectLock(L),part(L,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94797).
lisp_trans(genls(tSumoAnimalController,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94903).
lisp_trans(documentation(tSumoAnimalController,vEnglishLanguage,s("Any","#$Device","which","is","used","to","control","the","movements","of","an","#$Animal","or","#$Human",",","e",".","g",".","leashes",",","reins",",","harnesses",",","muzzles",",","bridles",",","shackles",",","handcuffs",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':94938).
lisp_trans(=>(tSumoAnimalController(AC),hasPurpose(AC,exists([G,A],and(actGuiding(G),instrument(G,AC),tClazzAnimal(A),patient(G,A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95146).
lisp_trans(genls(tObjectSelfPoweredDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95363).
lisp_trans(documentation(tObjectSelfPoweredDevice,vEnglishLanguage,'SelfPoweredDevice is  the subclass of #$Devices whose action is powered by some kind of on-board  component or power source (not the user, which would be a  #$UserPoweredVehicle).'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95399).
lisp_trans(=>(tObjectSelfPoweredDevice(DEVICE),exists([SOURCE],and(tSumoDevice(SOURCE),powerComponent(SOURCE,DEVICE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95635).
lisp_trans(genls(tObjectAnimalPoweredDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95782).
lisp_trans(documentation(tObjectAnimalPoweredDevice,vEnglishLanguage,'AnimalPoweredDevice is the subclass  of #$Devices that function with power supplied by animals.  Examples:  oxcarts, horse-drawn plows, mule-driven mills.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':95820).
lisp_trans(=>(and(tObjectAnimalPoweredDevice(D),instrument(P,D)),exists([A],and(tClazzAnimal(A),instrument(P,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':96031).
lisp_trans(documentation(tSumoFlat,vEnglishLanguage,s("This","#$ShapeAttribute","describes","a","three","dimensional","#$Object","for","which","two","dimensions","are","markedly","larger","than","the","third",",","and","the","two","larger","dimensions","also","are","not","of","markedly","different","lengths",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':96416).
lisp_trans(vtShapeAttribute(tSumoFlat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':96652).
lisp_trans(=>(sumoAttribute(F,tSumoFlat),and(side(S1,F),side(S2,F),meetsSpatially(S1,S2),not(equal(S1,S2)),height(F,H),greaterThan(S1,uMultiplicationFn(2,H)),greaterThan(S2,uMultiplicationFn(2,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':96683).
lisp_trans(documentation(tSumoLongAndThin,vEnglishLanguage,s("This","#$ShapeAttribute","describes","a","three","dimensional","#$Object","that","is","markedly","longer","in","one","dimension","than","in","the","other","two",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97087).
lisp_trans(vtShapeAttribute(tSumoLongAndThin),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97259).
lisp_trans(=>(sumoAttribute(F,tSumoLongAndThin),and(side(S1,F),side(S2,F),meetsSpatially(S1,S2),not(equal(S1,S2)),length(F,H),lessThan(S1,uMultiplicationFn(3,H)),lessThan(S2,uMultiplicationFn(3,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97298).
lisp_trans(vtShapeAttribute(tSumoLevelShape),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97537).
lisp_trans(documentation(tSumoLevelShape,vEnglishLanguage,s("The","#$ShapeAttribute","of","#$Objects","where","no","part","of","the","top","of","the","#$Object","is","higher","than","any","other","part","of","the","top",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97574).
lisp_trans(=>(sumoAttribute(O,tSumoLevelShape),not(exists([P1,P2,T,H1,H2],and(top(T,O),part(P1,T),part(P2,T),height(P1,H1),height(P2,H2),greaterThan(H1,H2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97739).
lisp_trans(vtShapeAttribute(tSumoSymmetricShape),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':97972).
lisp_trans(documentation(tSumoSymmetricShape,vEnglishLanguage,s("A","#$ShapeAttribute","that","applies","to","a","#$SelfConnectedObject","that","can","be","divided","into","two","copies","of","each","other",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98013).
lisp_trans(=>(sumoAttribute(T,tSumoSymmetricShape),exists([C1,C2],and(copy(C1,C2),equal(T,uMereologicalSumFn(C1,C2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98174).
lisp_trans(genls(tSumoBaton,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98318).
lisp_trans(documentation(tSumoBaton,vEnglishLanguage,s("A","thin","stick","which","is","used","for","#$MusicalConducting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98342).
lisp_trans(=>(tSumoBaton(B),hasPurpose(B,exists([M,G],and(actMusicalPerformance(M),actGuiding(G),subProcess(G,M),instrument(G,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98448).
lisp_trans(=>(tSumoBaton(B),sumoAttribute(B,tSumoLongAndThin)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':98653).
lisp_trans(genls(tSumoSecurityAlarm,tObjectSecurityDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99500).
lisp_trans(genls(tSumoSecurityAlarm,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99540).
lisp_trans(documentation(tSumoSecurityAlarm,vEnglishLanguage,s("A","#$SecurityDevice","that","detects","intrusions","to","a","#$StationaryArtifact","and","issues","a","warning","of","some","sort",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99580).
lisp_trans(sumo_partition(vtQuantity,vtFiniteQuantity,vtInfiniteQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99734).
lisp_trans(genls(vtFiniteQuantity,vtQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99788).
lisp_trans(documentation(vtFiniteQuantity,vEnglishLanguage,s("Any","#$Quantity","that","is","limited","or","bounded","in","magnitude",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99823).
lisp_trans(genls(vtInfiniteQuantity,vtQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99930).
lisp_trans(documentation(vtInfiniteQuantity,vEnglishLanguage,s("Any","#$Quantity","that","is","not","limited","or","bounded","in","magnitude",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':99967).
lisp_trans(genls(tObjectClock,tObjectMeasuringDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100080).
lisp_trans(documentation(tObjectClock,vEnglishLanguage,s("Any","#$Device","that","measures","and","represents","#$TimeDuration","or","#$TimePosition",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100113).
lisp_trans(=>(and(actMeasuring(M),result(M,Q),instrument(M,C),tObjectClock(C)),timeTimeMeasure(Q)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100231).
lisp_trans(genls(tSumoWatchClock,tObjectClock),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100367).
lisp_trans(documentation(tSumoWatchClock,vEnglishLanguage,s("A","#$Clock","that","can","be","worn","on","the","#$Wrist",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100395).
lisp_trans(=>(and(wears(P,C),located(C,W),tObjectClock(C),tPartTypeWrist(W)),tSumoWatchClock(C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100484).
lisp_trans(genls(tObjectThermometer,tObjectMeasuringDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100611).
lisp_trans(documentation(tObjectThermometer,vEnglishLanguage,s("Any","#$Device","that","measures","and","represents","#$TemperatureMeasure",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100650).
lisp_trans(=>(and(actMeasuring(MEASURE),result(MEASURE,QUANTITY),instrument(MEASURE,THERMOMETER),tObjectThermometer(THERMOMETER)),vtTemperatureMeasure(QUANTITY)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100762).
lisp_trans(genls(tSumoPressureMeasuringDevice,tObjectMeasuringDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':100973).
lisp_trans(documentation(tSumoPressureMeasuringDevice,vEnglishLanguage,s("Any","#$Device","that","measures","and","represents","#$PressureMeasure",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101024).
lisp_trans(=>(and(actMeasuring(M),result(M,Q),instrument(M,T),tObjectThermometer(T)),vtTemperatureMeasure(Q)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101145).
lisp_trans(documentation(measurementReading,vEnglishLanguage,s("(","measurementReading","?","DEVICE","?","QUANTITY",")","means","that","?","QUANTITY","is","a","reading","of","the","#$MeasuringDevice","?","DEVICE",",","e",".","g",".","if","?","THERMOMETER","is","a","#$Thermometer",",","(","measurementReading","?","THERMOMETER","(","#$MeasureFn","42","#$CelsiusDegree",")",")","would","mean","that","?","THERMOMETER","registers","42","degrees","#$Celsius",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101304).
lisp_trans(rtBinaryPredicate(measurementReading),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101637).
lisp_trans(argIsa(measurementReading,1,tObjectMeasuringDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101683).
lisp_trans(argIsa(measurementReading,2,vtConstantQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101729).
lisp_trans(genls(tObjectCommunicationDevice,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101777).
lisp_trans(documentation(tObjectCommunicationDevice,vEnglishLanguage,s("A","#$CommunicationDevice","is","a","#$Device","which","serves","at","the","#$instrument","in","a","#$Communication","#$Process","by","allowing","the","communicated","message","to","be","conveyed","between","the","participants",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':101829).
lisp_trans(relatedInternalConcept(actCommunication,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102063).
lisp_trans(=>(tObjectCommunicationDevice(DEVICE),capability(actCommunication,instrument,DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102123).
lisp_trans(genls(tObjectTelephone,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102219).
lisp_trans(genls(tObjectTelephone,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102255).
lisp_trans(documentation(tObjectTelephone,vEnglishLanguage,s("A","#$Telephone","is","a","#$CommunicationDevice","that","enables","#$LinguisticCommunication","between","nodes","in","a","#$TelephoneSystem","by","converting","sound","into","electrical","signals","that","are","then","transmitted",".","When","the","signals","are","received",",","they","are","converted","back","into","sound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102296).
lisp_trans(genls(actTelephoning,actCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102638).
lisp_trans(documentation(actTelephoning,vEnglishLanguage,s("A","#$Telephoning","is","a","#$Communication","in","which","the","#$instrument","is","a","#$Telephone",",","and","which","typically","includes","an","#$instance","of","#$Speaking","as","a","#$subProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102689).
lisp_trans(=>(actTelephoning(TEL),exists([DEVICE],and(tObjectTelephone(DEVICE),instrument(TEL,DEVICE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':102893).
lisp_trans(=>(actTelephoning(TEL),exists([SPEAK],and(actSpeaking(SPEAK),subProcess(SPEAK,TEL),=>(agent(TEL,AGENT),agent(SPEAK,AGENT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103049).
lisp_trans(genls(tSumoFax,actArtifactMediatedCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103248).
lisp_trans(documentation(tSumoFax,vEnglishLanguage,s("The","communication","of","a","printed","page","between","remote","locations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103293).
lisp_trans(=>(tSumoFax(Fax),exists([FaxMachine],and(tObjectFaxMachine(FaxMachine),instrument(Fax,FaxMachine)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103395).
lisp_trans(genls(tObjectFaxMachine,tSumoTelephonyDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103593).
lisp_trans(genls(tObjectFaxMachine,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103645).
lisp_trans(genls(tObjectFaxMachine,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103682).
lisp_trans(documentation(tObjectFaxMachine,vEnglishLanguage,s("A","#$FaxMachine","is","a","#$TelephonyDevice","that","scans","a","paper","page","and","transmits","a","coded","image","of","the","page","over","a","#$TelephoneSystem","to","a","receiving","#$FaxMachine",",","which","decodes","the","coded","and","image","and","prints","a","replica","of","the","original",".","A","typical","#$FaxMachine","is","made","up","of","a","scanner",",","a","printer",",","a","modem",",","and","a","control","panel","with","some","sort","of","status","display",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':103724).
lisp_trans(rtBinaryPredicate(emailAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':105878).
lisp_trans(genlPreds(emailAddress,refers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':105918).
lisp_trans(argIsa(emailAddress,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':105952).
lisp_trans(argIsa(emailAddress,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':105991).
lisp_trans(documentation(emailAddress,vEnglishLanguage,s("(","#$emailAddress","?","Address","?","Agent",")","means","that","?","Address","denotes","a","#$VirtualPlace","at","which","?","Agent","can","be","contacted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106035).
lisp_trans(genls(tObjectLightFixture,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106195).
lisp_trans(documentation(tObjectLightFixture,vEnglishLanguage,s("Any","#$Device","whose","purpose","is","to","be","a","source","of","visible","light",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106226).
lisp_trans(=>(tObjectLightFixture(F),capability(tSumoRadiatingLight,instrument,F)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106338).
lisp_trans(genls(tObjectCandle,tObjectLightFixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106417).
lisp_trans(documentation(tObjectCandle,vEnglishLanguage,s("An","#$LightFixture","that","consists","of","#$Wax","and","a","wick",",","which","is","lit","with","a","flame",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106448).
lisp_trans(=>(tObjectCandle(CANDLE),material(tWax,CANDLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106571).
lisp_trans(=>(tObjectCandle(C),hasPurpose(C,exists([F],and(tSumoFire(F),resource(F,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106630).
lisp_trans(genls(actLightning,actWeatherProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106759).
lisp_trans(genls(actLightning,actRadiating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106795).
lisp_trans(documentation(actLightning,vEnglishLanguage,s("A","#$WeatherProcess","which","involves","a","significant","release","of","electricity","from","a","#$Cloud",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106826).
lisp_trans(=>(actLightning(L),exists([C],and(tSumoCloud(C),eventLocated(L,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':106959).
lisp_trans(genls(eventThunder,actWeatherProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107080).
lisp_trans(genls(eventThunder,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107114).
lisp_trans(documentation(eventThunder,vEnglishLanguage,s("Any","instance","of","#$RadiatingSound","which","is","caused","by","an","instance","of","Lightning",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107148).
lisp_trans(=>(eventThunder(T),exists([L],and(actLightning(L),causes(L,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107270).
lisp_trans(genls(tSumoVehicleLight,tObjectLightFixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107377).
lisp_trans(documentation(tSumoVehicleLight,vEnglishLanguage,s("Any","#$LightFixture","which","is","attached","to","the","surface","of","a","#$Vehicle","and","whose","purpose","is","to","illuminate","that","area","around","the","#$Vehicle","so","that","potential","obstacles","can","be","detected","or","alerted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107414).
lisp_trans(=>(tSumoVehicleLight(L),exists([V],and(tSumoVehicle(V),part(L,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107653).
lisp_trans(genls(tSumoHeadlight,tSumoVehicleLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107761).
lisp_trans(documentation(tSumoHeadlight,vEnglishLanguage,s("Any","#$VehicleLight","which","is","attached","to","the","front","of","a","#$Vehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107795).
lisp_trans(=>(tSumoHeadlight(L),exists([V],and(tSumoVehicle(V),part(L,uFrontFn(V))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':107907).
lisp_trans(genls(tSumoTaillight,tSumoVehicleLight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108022).
lisp_trans(documentation(tSumoTaillight,vEnglishLanguage,s("Any","#$VehicleLight","which","is","attached","to","the","back","of","a","#$Vehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108056).
lisp_trans(=>(tSumoTaillight(L),exists([V],and(tSumoVehicle(V),part(L,uBackFn(V))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108167).
lisp_trans(genls(tSumoPaintedPicture,tSumoArtWork),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108281).
lisp_trans(documentation(tSumoPaintedPicture,vEnglishLanguage,s("Any","#$ArtWork","which","is","produced","by","#$Painting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108315).
lisp_trans(=>(tSumoPaintedPicture(PP),exists([PAINT,PAINTING],and(tObjectPaint(PAINT),actPainting(PAINTING),resource(PAINTING,PAINT),result(PAINTING,PP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108412).
lisp_trans(genls(tSumoWatercolorPicture,tSumoPaintedPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108619).
lisp_trans(documentation(tSumoWatercolorPicture,vEnglishLanguage,s("Any","#$PaintedPicture","which","is","created","with","water","-","based","paints",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108663).
lisp_trans(=>(tSumoWatercolorPicture(W),exists([WP,P],and(tSumoWatercolorPaint(WP),actPainting(P),resource(P,WP),result(P,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108780).
lisp_trans(genls(tSumoWallpaper,tSumoArtWork),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108961).
lisp_trans(documentation(tSumoWallpaper,vEnglishLanguage,s("Any","decorative","paper","that","is","used","to","cover","the","#$Walls","of","#$Rooms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':108990).
lisp_trans(=>(and(tSumoWallpaper(W),part(P,W)),tObjectPaper(P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109103).
lisp_trans(=>(tSumoWallpaper(P),hasPurpose(P,exists([W,R,C],and(iWall(W),part(W,R),tSumoRoom(R),actCovering(C),patient(C,W),instrument(C,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109184).
lisp_trans(genls(tObjectSculpture,tSumoArtWork),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109428).
lisp_trans(documentation(tObjectSculpture,vEnglishLanguage,s("Any","#$ArtWork","which","is","not","constructed","on","the","two","-","dimensional","surface","of","a","canvas",",","piece","of","paper",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109457).
lisp_trans(genls(tSumoPortrait,tSumoPaintedPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109607).
lisp_trans(documentation(tSumoPortrait,vEnglishLanguage,s("A","#$PaintedPicture","that","represents","someone","'s","#$Face",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109642).
lisp_trans(=>(tSumoPortrait(P),exists([F],and(tSumoFace(F),represents(P,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109739).
lisp_trans(genls(tSketch,tSumoArtWork),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109846).
lisp_trans(documentation(tSketch,vEnglishLanguage,s("Any","#$ArtWork","which","is","produced","by","a","pencil","or","piece","of","charcoal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109872).
lisp_trans(genls(tSumoCollage,tSumoArtWork),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':109981).
lisp_trans(documentation(tSumoCollage,vEnglishLanguage,s("Any","abstract","#$ArtWork","that","is","produced","by","arranging","bits","of","paper","or","photographs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110008).
lisp_trans(genls(eventFolding,tSumoShapeChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110135).
lisp_trans(documentation(eventFolding,vEnglishLanguage,s("Bending","something","in","such","a","way","that","one","part","of","it","covers","another","part",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110166).
lisp_trans(=>(and(eventFolding(F),patient(F,O)),exists([C,P1,P2],and(actCovering(C),subProcess(C,F),part(P1,O),part(P2,O),instrument(C,P1),patient(C,P2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110282).
lisp_trans(genls(actPainting,actCovering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110519).
lisp_trans(genls(actPainting,actColoring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110548).
lisp_trans(documentation(actPainting,vEnglishLanguage,s("The","application","of","#$Paint","to","a","#$surface",".","Note","that","this","class","covers","both","#$ArtPainting","(","the","creation","of","#$PaintedPictures",")",",","as","well","as","painting","one","'s","kitchen",",","for","example",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110577).
lisp_trans(=>(and(actPainting(PAINT),patient(PAINT,SURFACE),resource(PAINT,STUFF)),exists([OBJ],and(surface(SURFACE,OBJ),tObjectPaint(STUFF)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':110799).
lisp_trans(genls(tObjectPaint,tSolution),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111007).
lisp_trans(documentation(tObjectPaint,vEnglishLanguage,s("Any","#$Solution","which","is","capable","of","#$Coloring","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111033).
lisp_trans(=>(tObjectPaint(PAINT),capability(actColoring,instrument,PAINT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111131).
lisp_trans(genls(tSumoWatercolorPaint,tObjectPaint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111207).
lisp_trans(documentation(tSumoWatercolorPaint,vEnglishLanguage,s("Any","#$Paint","which","is","a","water","-","based","#$Solution",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111240).
lisp_trans(=>(tSumoWatercolorPaint(P),exists([W],and(tWater(W),part(W,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111338).
lisp_trans(genls(tSumoOilPaint,tObjectPaint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111447).
lisp_trans(disjointWith(tSumoOilPaint,tSumoWatercolorPaint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111473).
lisp_trans(documentation(tSumoOilPaint,vEnglishLanguage,s("Any","#$Paint","which","is","an","oil","-","based","#$Solution",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111509).
lisp_trans(=>(tSumoOilPaint(P),exists([O],and(tOil(O),part(O,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111599).
lisp_trans(genls(tSumoOilPicture,tSumoPaintedPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111699).
lisp_trans(disjointWith(tSumoOilPicture,tSumoWatercolorPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111736).
lisp_trans(documentation(tSumoOilPicture,vEnglishLanguage,s("Any","#$OilPicture","which","is","created","with","oil","-","based","paints",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111776).
lisp_trans(=>(tSumoOilPicture(P),exists([O,PAINTING],and(tSumoOilPaint(O),actPainting(PAINTING),resource(PAINTING,O),result(PAINTING,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':111880).
lisp_trans(genls(actArtPainting,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112072).
lisp_trans(genls(actArtPainting,actPainting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112114).
lisp_trans(documentation(actArtPainting,vEnglishLanguage,s("Any","#$ContentDevelopment","that","results","in","a","#$PaintedPicture",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112146).
lisp_trans(=>(actArtPainting(PAINT),exists([PICTURE],and(tSumoPaintedPicture(PICTURE),result(PAINT,PICTURE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112255).
lisp_trans(genls(tSumoPaintingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112407).
lisp_trans(documentation(tSumoPaintingDevice,vEnglishLanguage,s("A","#$Device","used","as","an","#$instrument","for","#$Painting",".","Paintbrushes",",","rollers","or","sprayers","can","belong","into","this","class",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112440).
lisp_trans(=>(tSumoPaintingDevice(PD),exists([PAINT],and(actPainting(PAINT),capability(PAINT,instrument,PD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112603).
lisp_trans(=>(tSumoPaintingDevice(PD),hasPurpose(PD,exists([STUFF,COVER,SURF,OBJ],and(tSumoSubstance(STUFF),actCovering(COVER),tSumoObject(OBJ),surface(SURF,OBJ),agent(COVER,PD),instrument(COVER,STUFF),patient(COVER,SURF))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':112744).
lisp_trans(genls(actSculpting,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113077).
lisp_trans(genls(actSculpting,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113117).
lisp_trans(documentation(actSculpting,vEnglishLanguage,s("The","process","of","creating","three","-","dimensional","artwork","by","shaping","or","combining","hard","materials",",","typically","stone","such","as","marble","or","metal",",","glass",",","or","wood",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113147).
lisp_trans(genls(actGraphicDesigning,actDesigning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113339).
lisp_trans(documentation(actGraphicDesigning,vEnglishLanguage,s("Graphic","designing","is","the","process","of","assembling","together","images",",","typography","or","motion","graphics","to","create","a","piece","of","design",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113377).
lisp_trans(documentation(potentialOfHydrogen,vEnglishLanguage,s("(","potentialOfHydrogen","?","SOLUTION","?","NUMBER",")","means","that","the","Solution","?","SOLUTION","has","a","pH","value","of","?","NUMBER",".","The","ph","varies","between","0","and","14",",","and","it","is","a","measure","of","the","acidity","or","alkalinity","of","?","SOLUTION",".","More","precisely",",","and","it","is","the","logarithm","of","the","reciprocal","of","the","quantity","of","#$AtomGrams","of","#$Hydrogen","ions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113552).
lisp_trans(rtBinaryPredicate(potentialOfHydrogen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113918).
lisp_trans(argIsa(potentialOfHydrogen,1,tSolution),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':113965).
lisp_trans(argIsa(potentialOfHydrogen,2,ftRealNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114005).
lisp_trans(=>(potentialOfHydrogen(S,N),and(greaterThanOrEqualTo(N,0),lessThanOrEqualTo(N,14))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114048).
lisp_trans(genls(actTracing,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114154).
lisp_trans(genls(actTracing,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114192).
lisp_trans(documentation(actTracing,vEnglishLanguage,s("Any","#$ContentDevelopment","that","results","in","a","#$Blueprint",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114225).
lisp_trans(=>(actTracing(T),exists([P],and(tObjectBlueprint(P),result(T,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114324).
lisp_trans(genls(tSumoComposingMusic,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114437).
lisp_trans(documentation(tSumoComposingMusic,vEnglishLanguage,'ComposingMusic is a type of #$ContentDevelopment that results in a #$MusicalComposition'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114482).
lisp_trans(termFormat(vEnglishLanguage,tSumoComposingMusic,s("composing","music")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114621).
lisp_trans(=>(tSumoComposingMusic(C),exists([M],and(cwMusicalComposition(M),result(C,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114684).
lisp_trans(genls(actDrawing,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114807).
lisp_trans(genls(actDrawing,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114845).
lisp_trans(documentation(actDrawing,vEnglishLanguage,s("Any","#$ContentDevelopment","that","results","in","a","#$Sketch",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114878).
lisp_trans(=>(actDrawing(DRAW),exists([SKETCH],and(tSketch(SKETCH),result(DRAW,SKETCH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':114974).
lisp_trans(genls(actFocusing,tSumoQuantityChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115109).
lisp_trans(documentation(actFocusing,vEnglishLanguage,s("Altering","the","relative","distance","of","a","#$Lens","so","that","a","visual","image","is","sharper",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115144).
lisp_trans(=>(actFocusing(F),exists([L],and(tLens(L),patient(F,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115266).
lisp_trans(genls(tSumoDisplayArtifact,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115370).
lisp_trans(documentation(tSumoDisplayArtifact,vEnglishLanguage,s("Something","for","posting","content","so","that","it","can","be","disseminated","to","the","public",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115406).
lisp_trans(=>(tSumoDisplayArtifact(DA),hasPurpose(DA,exists([P,D,I],and(actPutting(P),actDisseminating(D),tSumoContentBearingObject(I),patient(P,I),patient(D,I),destination(P,DA))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115533).
lisp_trans(genls(tSumoVehicleWheel,tPartTypeWheel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115814).
lisp_trans(documentation(tSumoVehicleWheel,vEnglishLanguage,'VehicleWheel is a class of cylindrical  #$Devices used to move a #$RoadVehicle along a road, running either   directly on the wheel rims or on tires attached to the wheel rims.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':115844).
lisp_trans(genls(tPartTypeWheel,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116071).
lisp_trans(documentation(tPartTypeWheel,vEnglishLanguage,s("A","circular","#$Artifact","which","is","a","component","of","#$LandVehicles","and","of","some","#$Devices",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116097).
lisp_trans(=>(tSumoLandVehicle(VEHICLE),exists([WHEEL],and(tPartTypeWheel(WHEEL),part(WHEEL,VEHICLE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116223).
lisp_trans(genls(tSumoVehicleController,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116362).
lisp_trans(documentation(tSumoVehicleController,vEnglishLanguage,s("Any","#$Device","which","is","used","to","start",",","stop","or","control","the","movements","of","a","#$Vehicle",".","This","class","covers","steering","wheels",",","brakes",",","acceleration","pedals",",","airplane","sticks",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116398).
lisp_trans(=>(tSumoVehicleController(C),exists([V],and(tSumoVehicle(V),part(C,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116623).
lisp_trans(=>(tSumoVehicleController(C),hasPurpose(C,exists([D],and(actDriving(D),instrument(D,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116736).
lisp_trans(genls(tPartTypeSteeringWheel,tSumoVehicleController),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116882).
lisp_trans(documentation(tPartTypeSteeringWheel,vEnglishLanguage,s("A","#$VehicleController","which","enables","one","to","steer","a","#$Vehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':116925).
lisp_trans(=>(tPartTypeSteeringWheel(W),capability(tSumoDirectionChange,instrument,W)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117037).
lisp_trans(genls(tPartTypeVehicleBrake,tSumoVehicleController),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117118).
lisp_trans(documentation(tPartTypeVehicleBrake,vEnglishLanguage,s("A","#$VehicleController","which","is","capable","of","stopping","the","motion","of","a","#$Vehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117160).
lisp_trans(=>(and(tPartTypeVehicleBrake(B),tSumoVehicle(V),part(B,V)),hasPurpose(B,exists([S],and(isa(S,uStopFn(actMotion)),patient(S,V),instrument(S,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117287).
lisp_trans(genls(tSumoVehicleThrottle,tSumoVehicleController),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117514).
lisp_trans(documentation(tSumoVehicleThrottle,vEnglishLanguage,s("A","#$VehicleController","which","controls","the","amount","of","#$Fuel","which","is","supplied","to","the","#$Engine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117559).
lisp_trans(genls(tSumoVehicleTire,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117704).
lisp_trans(documentation(tSumoVehicleTire,vEnglishLanguage,s("A","covering",",","usually","made","of","rubber",",","for","a","#$Wheel",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117736).
lisp_trans(=>(tSumoVehicleTire(T),exists([W],and(tSumoVehicleWheel(W),part(T,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117834).
lisp_trans(genls(tSumoVehicleWindow,tSumoWindow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117946).
lisp_trans(documentation(tSumoVehicleWindow,vEnglishLanguage,s("Any","#$Window","which","is","part","of","a","#$Vehicle",",","e",".","g",".","the","#$Windshield","and","#$RearWindow","of","an","#$Automobile",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':117978).
lisp_trans(=>(tSumoVehicleWindow(W),exists([V],and(tSumoVehicle(V),part(W,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118130).
lisp_trans(genls(tPartTypeWindshield,tSumoVehicleWindow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118239).
lisp_trans(disjointWith(tPartTypeWindshield,tSumoRearWindow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118275).
lisp_trans(documentation(tPartTypeWindshield,vEnglishLanguage,s("Any","#$VehicleWindow","which","located","at","the","front","of","a","#$RoadVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118308).
lisp_trans(=>(tPartTypeWindshield(W),exists([A],and(tObjectRoadVehicle(A),part(W,uFrontFn(A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118422).
lisp_trans(genls(tSumoLandVehicle,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118542).
lisp_trans(documentation(tSumoLandVehicle,vEnglishLanguage,'LandVehicle is the class of #$TransportationDevices that travel on  land.  The two main types of #$LandVehicle are #$RoadVehicle and  #$RailVehicle. Note that this includes vehicles which travel on any solid surface, including a frozen body of water or snow.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118573).
lisp_trans(=>(tSumoLandVehicle(X),hasPurpose(X,exists([EV,SURF],and(surface(SURF,tSumoGeographicArea),actTransportation(EV),holdsDuring(uWhenFn(EV),meetsSpatially(X,SURF)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':118881).
lisp_trans(genls(tSumoWaterVehicle,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119140).
lisp_trans(documentation(tSumoWaterVehicle,vEnglishLanguage,'WaterVehicle is the class of all  #$TransportationDevices used to travel on or in water.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119172).
lisp_trans(=>(tSumoWaterVehicle(X),hasPurpose(X,exists([EV,SURF],and(tWater(SURF),actTransportation(EV),holdsDuring(uWhenFn(EV),meetsSpatially(X,SURF)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119311).
lisp_trans(=>(and(tSumoWaterVehicle(CRAFT),actTransportation(EVENT),instrument(EVENT,CRAFT)),exists([WATER],and(tSumoWaterArea(WATER),eventLocated(EVENT,WATER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119551).
lisp_trans(genls(tObjectRoadVehicle,tSumoLandVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119790).
lisp_trans(documentation(tObjectRoadVehicle,vEnglishLanguage,s("The","class","of","#$LandVehicles","that","are","not","#$RollingStock",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119825).
lisp_trans(genls(tSumoFleet,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119930).
lisp_trans(documentation(tSumoFleet,vEnglishLanguage,s("A","#$Collection","of","#$Vehicle")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':119958).
lisp_trans(termFormat(vEnglishLanguage,tSumoFleet,"Fleet"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120026).
lisp_trans(=>(tSumoFleet(FLEET),memberType(FLEET,tSumoVehicle)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120070).
lisp_trans(rtBinaryPredicate(fleetSize),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120132).
lisp_trans(argIsa(fleetSize,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120169).
lisp_trans(argIsa(fleetSize,2,ftInt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120196).
lisp_trans(documentation(fleetSize,vEnglishLanguage,s("(","fleetSize","?","AGENT","?","NUM",")","means","the","#$Agent","?","AGENT","has","a","fleet","size","of","an","#$Integer","?","NUM",".","The","#$Fleet","can","consists","of","any","type","of","#$Vehicle")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120225).
lisp_trans(termFormat(vEnglishLanguage,fleetSize,s("Fleet","Size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120409).
lisp_trans(=>(and(tSumoFleet(FLEET),fleetSize(AGENT,NUM),possesses(AGENT,FLEET)),memberCount(FLEET,NUM)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120462).
lisp_trans(genls(tObjectAxle,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120594).
lisp_trans(documentation(tObjectAxle,vEnglishLanguage,s("Axle","is","a","class","of","#$Devices","each","of","which","can","be","paired","with","two","#$VehicleWheels","to","rotate","and","move","a","#$RoadVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120617).
lisp_trans(=>(and(tSumoVehicleWheel(W),tObjectRoadVehicle(V),part(W,V)),exists([A],and(tObjectAxle(A),component(A,V),connected(W,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':120775).
lisp_trans(documentation(tObjectPaper,vEnglishLanguage,s("Paper","is","a","flat","sheet","of","fibers",",","usually","produced","by","spreading","a","wet","solution","of","wood","particles","on","a","flat","surface","and","drying","through","heat","and","pressure",".","The","fibers","can","also","be","cotton","or","a","synthetic",",","although","typically","the","bulk","of","the","substance","is","wood","fibers",".","This","includes","all","manner","of","paper","products","that","may","have","varying","thicknesses",",","colors","or","texture",".","This","is","distinguished","from","flat","wood","products","such","as","plywood","and","particle","board","which","have","a","structural","function","in","building","construction",".","Sheathing","materials","such","as","the","paper","affixed","to","sheetrock","however",",","is","paper",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':121039).
lisp_trans(genls(tObjectPaper,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':121656).
lisp_trans(=>(tObjectPaper(X),exists([MAKE,CELL,PRESS],and(actMaking(MAKE),tCellulose(CELL),actCompressing(PRESS),resource(MAKE,CELL),result(MAKE,X),subProcess(MAKE,PRESS),patient(PRESS,CELL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':121683).
lisp_trans(genls(tSumoCurrencyBill,tObjectCurrency),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122126).
lisp_trans(sumo_partition(tObjectCurrency,tSumoCurrencyBill,tSumoCurrencyCoin),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122159).
lisp_trans(documentation(tSumoCurrencyBill,vEnglishLanguage,s("Any","instance","of","#$Currency","that","is","made","of","paper",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122206).
lisp_trans(=>(tSumoCurrencyBill(BILL),exists([PAPER],and(tObjectPaper(PAPER),part(PAPER,BILL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122305).
lisp_trans(genls(tSumoCurrencyCoin,tObjectCurrency),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122430).
lisp_trans(documentation(tSumoCurrencyCoin,vEnglishLanguage,s("Any","instance","of","#$Currency","that","is","made","of","#$Metal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122463).
lisp_trans(=>(tSumoCurrencyCoin(COIN),exists([METAL],and(genls(METAL,tMetal),material(METAL,COIN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122564).
lisp_trans(genls(tObjectWire,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122693).
lisp_trans(documentation(tObjectWire,vEnglishLanguage,s("A","long",",","thin","strand","of","#$Metal","that","is","used","in","a","wide","range","of","applications",",","including","the","wiring","of","electrical","systems",",","creating","bundles","and","the","construction","of","cages",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122718).
lisp_trans(=>(tObjectWire(WIRE),material(tMetal,WIRE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122929).
lisp_trans(genls(actWireSpring,tObjectWire),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':122986).
lisp_trans(genls(actWireSpring,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123013).
lisp_trans(documentation(actWireSpring,vEnglishLanguage,s("An","#$EngineeringComponent","consisting","of","a","coil","of","#$Wire","that","returns","to","its","original","shape","when","pulled","apart","or","pressed","together",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123056).
lisp_trans(genls(tSumoWireLine,tObjectWire),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123234).
lisp_trans(genls(tSumoWireLine,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123259).
lisp_trans(documentation(tSumoWireLine,vEnglishLanguage,s("A","#$Wire","that","is","designed","for","conducting","electricity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123300).
lisp_trans(=>(tSumoWireLine(WL),hasPurpose(WL,exists([R],and(actRadiating(R),path(R,WL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123398).
lisp_trans(genls(tSumoTelephoneLine,tSumoWireLine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123534).
lisp_trans(documentation(tSumoTelephoneLine,vEnglishLanguage,s("A","#$WireLine","that","carries","telephone","signals","and","allows","users","of","#$Telephones","or","#$Telegraphs","to","communicate","with","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123568).
lisp_trans(=>(tSumoTelephoneLine(TL),exists([T1,T2],and(or(tObjectTelephone(T1),tObjectTelegraph(T1)),or(tObjectTelephone(T2),tObjectTelegraph(T2)),not(equal(T1,T2)),connects(TL,T1,T2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':123744).
lisp_trans(genls(ftString,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124026).
lisp_trans(documentation(ftString,vEnglishLanguage,s("A","long",",","thin","strand","of","Fabric","that","is","used","for","#$Tying","things","together",",","etc",".","Note","that","this","class","covers","a","cord","of","any","width",",","including","rope",",","twine",",","and","thread",",","for","example",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124053).
lisp_trans(=>(ftString(S),material(tSumoFabric,S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124272).
lisp_trans(genls(tSumoPlug,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124324).
lisp_trans(documentation(tSumoPlug,vEnglishLanguage,s("An","#$Artifact","which","is","designed","to","fit","snugly","within","a","#$Hole",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124349).
lisp_trans(=>(tSumoPlug(PLUG),exists([HOLE],completelyFills(PLUG,HOLE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124453).
lisp_trans(genls(tPottery,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124540).
lisp_trans(documentation(tPottery,vEnglishLanguage,s("Household","#$Artifacts","that","are","made","out","of","baked","#$Clay",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124568).
lisp_trans(=>(tPottery(POTTERY),exists([CLAY],and(tSumoClay(CLAY),part(CLAY,POTTERY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124668).
lisp_trans(genls(tObjectPillow,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124799).
lisp_trans(documentation(tObjectPillow,vEnglishLanguage,s("A","soft",",","stuffed","#$Artifact","to","support","the","#$Head","or","the","body","as","a","whole","while","one","is","sleeping","or","relaxing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124826).
lisp_trans(genls(tObjectMirror,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':124976).
lisp_trans(documentation(tObjectMirror,vEnglishLanguage,s("An","#$Artifact","with","a","surface","that","is","capable","of","displaying","an","image","by","reflecting","light",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125003).
lisp_trans(=>(tObjectMirror(M),capability(tSumoReflectingLight,instrument,M)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125135).
lisp_trans(genls(tSumoFurniture,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125209).
lisp_trans(documentation(tSumoFurniture,vEnglishLanguage,s("Any","free","-","standing","and","movable","#$Artifacts","which","which","are","used","in","day","-","to","-","day","living","and","designed","to","rest","on","the","#$Floor","of","a","#$Room",".","This","excludes","items","such","as","a","rock","which","may","serve","as","a","chair","but","was","not","created","with","the","intention","of","supporting","that","use",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125240).
lisp_trans(=>(tSumoFurniture(F),hasPurpose(F,exists([FL],and(tSumoFloor(FL),meetsSpatially(F,FL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125549).
lisp_trans(=>(tSumoFurniture(F),capability(eventTranslocation,moves,F)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125684).
lisp_trans(disjointWith(tSumoFurniture,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125788).
lisp_trans(disjointWith(tSumoFurniture,tSumoMachine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125830).
lisp_trans(disjointWith(tSumoFurniture,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125859).
lisp_trans(disjointWith(tSumoFurniture,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125901).
lisp_trans(genls(tSumoSeat,tSumoFurniture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125930).
lisp_trans(documentation(tSumoSeat,vEnglishLanguage,s("Any","instance","of","#$Furniture","which","is","designed","to","accommodate","#$Humans","who","are","#$Sitting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':125956).
lisp_trans(=>(tSumoSeat(SEAT),hasPurpose(SEAT,exists([PERSON],and(tSumoHuman(PERSON),located(PERSON,SEAT),sumoAttribute(PERSON,actSitting))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126086).
lisp_trans(genls(tSumoChair,tSumoSeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126274).
lisp_trans(documentation(tSumoChair,vEnglishLanguage,s("A","#$Seat","that","is","designed","to","accommodate","a","single","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126296).
lisp_trans(=>(tSumoChair(CHAIR),not(exists([PERSON1,PERSON2],and(tSumoHuman(PERSON1),tSumoHuman(PERSON2),sumoAttribute(PERSON1,actSitting),sumoAttribute(PERSON2,actSitting),located(PERSON1,CHAIR),located(PERSON2,CHAIR),not(equal(PERSON1,PERSON2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126397).
lisp_trans(genls(tSumoSofa,tSumoSeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126738).
lisp_trans(documentation(tSumoSofa,vEnglishLanguage,s("A","padded","#$Seat","that","is","designed","to","accommodate","more","than","one","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126759).
lisp_trans(=>(tSumoSofa(S),hasPurpose(S,exists([P1,P2,T],and(not(equal(P1,P2)),tSumoHuman(P1),tSumoHuman(P2),holdsDuring(T,and(sumoAttribute(P1,actSitting),sumoAttribute(P2,actSitting),eventLocated(P1,S),eventLocated(P2,S))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':126871).
lisp_trans(genls(tSumoBed,tSumoFurniture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127167).
lisp_trans(documentation(tSumoBed,vEnglishLanguage,s("A","piece","of","#$Furniture","which","is","primarily","for","sleeping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127192).
lisp_trans(=>(tSumoBed(BED),hasPurpose(BED,exists([PERSON],and(sumoAttribute(PERSON,mobAsleep),located(PERSON,BED))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127287).
lisp_trans(genls(tSumoKingBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127434).
lisp_trans(documentation(tSumoKingBed,vEnglishLanguage,s("A","#$KingBed","is","a","type","of","#$Bed","that","is","1.9","m","by","2.0","m","in","size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127457).
lisp_trans(termFormat(vEnglishLanguage,tSumoKingBed,s("king","-","sized","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127559).
lisp_trans(=>(tSumoKingBed(X),and(width(X,uMeasureFn(1.9,vMeterFn)),length(X,uMeasureFn(2.0,vMeterFn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127614).
lisp_trans(=>(tSumoKingBed(X),modalAttribute(exists([P1,P2,P3,TIME],and(not(equal(P1,P2)),not(equal(P2,P3)),not(equal(P1,P3)),sumoAttribute(P1,mobAsleep),sumoAttribute(P2,mobAsleep),sumoAttribute(P3,mobAsleep),tSumoHuman(P1),tSumoHuman(P2),tSumoHuman(P3),holdsDuring(TIME,and(located(P1,X),located(P2,X),located(P3,X))))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':127727).
lisp_trans(genls(tSumoQueenBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128238).
lisp_trans(documentation(tSumoQueenBed,vEnglishLanguage,s("A","#$QueenBed","is","a","type","of","#$Bed","that","is","1.5","m","by","2.0","m","in","size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128262).
lisp_trans(termFormat(vEnglishLanguage,tSumoQueenBed,s("queen","-","sized","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128366).
lisp_trans(=>(tSumoQueenBed(X),and(width(X,uMeasureFn(1.5,vMeterFn)),length(X,uMeasureFn(2.0,vMeterFn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128423).
lisp_trans(=>(tSumoQueenBed(X),modalAttribute(exists([P1,P2],and(not(equal(P1,P2)),not(equal(P2,P3)),sumoAttribute(P1,mobAsleep),sumoAttribute(P2,mobAsleep),tSumoHuman(P1),tSumoHuman(P2),holdsDuring(TIME,and(located(P1,X),located(P2,X))))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128537).
lisp_trans(genls(tSumoDoubleBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128924).
lisp_trans(documentation(tSumoDoubleBed,vEnglishLanguage,s("A","#$DoubleBed","is","a","type","of","#$Bed","that","is","1.35","m","by","2.0","m","in","size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':128949).
lisp_trans(termFormat(vEnglishLanguage,tSumoDoubleBed,s("full","-","sized","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129056).
lisp_trans(=>(tSumoDoubleBed(X),and(width(X,uMeasureFn(1.35,vMeterFn)),length(X,uMeasureFn(2.0,vMeterFn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129113).
lisp_trans(=>(tSumoDoubleBed(X),modalAttribute(exists([P1,P2],and(not(equal(P1,P2)),not(equal(P2,P3)),sumoAttribute(P1,mobAsleep),sumoAttribute(P2,mobAsleep),tSumoHuman(P1),tSumoHuman(P2),holdsDuring(TIME,and(located(P1,X),located(P2,X))))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129229).
lisp_trans(genls(tSumoSingleBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129620).
lisp_trans(documentation(tSumoSingleBed,vEnglishLanguage,s("A","#$SingleBed","is","a","type","of","#$Bed","that","is","1","m","by","2.0","m","in","size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129645).
lisp_trans(termFormat(vEnglishLanguage,tSumoSingleBed,s("twin","-","sized","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129749).
lisp_trans(=>(tSumoSingleBed(X),and(width(X,uMeasureFn(1.0,vMeterFn)),length(X,uMeasureFn(2.0,vMeterFn)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129806).
lisp_trans(genls(tSumoBunkBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129921).
lisp_trans(documentation(tSumoBunkBed,vEnglishLanguage,s("A","#$BunkBed","is","a","type","of","#$Bed","has","one","bed","directly","above","another")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':129944).
lisp_trans(termFormat(vEnglishLanguage,tSumoBunkBed,s("bunk","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130053).
lisp_trans(=>(tSumoBunkBed(X),exists([BED1,BED2],and(tSumoSingleBed(BED1),tSumoSingleBed(BED2),part(BED1,X),part(BED2,X),orientation(BED1,BED2,tSumoAbove)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130102).
lisp_trans(genls(tSumoMurphyBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130315).
lisp_trans(documentation(tSumoMurphyBed,vEnglishLanguage,s("A","#$MurphyBed","is","a","type","of","#$Bed","that","can","be","stored","vertically","inside","a","wall",",","closet","or","cabinet")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130340).
lisp_trans(termFormat(vEnglishLanguage,tSumoMurphyBed,s("pull","-","down","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130480).
lisp_trans(=>(tSumoMurphyBed(X),exists([STORAGE],and(tCompartment(STORAGE),meetsSpatially(STORAGE,X),hasPurpose(STORAGE,exists([K],and(actKeeping(K),patient(K,X),destination(K,STORAGE),holdsDuring(uWhenFn(K),sumoAttribute(X,tSumoVertical)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130536).
lisp_trans(genls(tSumoRollawayBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130930).
lisp_trans(documentation(tSumoRollawayBed,vEnglishLanguage,s("A","#$RollawayBed","is","a","type","of","#$Bed","that","is","mounted","on","rollers","so","that","it","can","be","easily","moved")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':130957).
lisp_trans(termFormat(vEnglishLanguage,tSumoRollawayBed,s("rollaway","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131096).
lisp_trans(=>(tSumoRollawayBed(X),exists([WHEEL],and(tPartTypeWheel(WHEEL),part(WHEEL,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131153).
lisp_trans(genls(tObjectSofaBed,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131270).
lisp_trans(documentation(tObjectSofaBed,vEnglishLanguage,s("A","#$SofaBed","is","a","#$Bed","that","can","be","kept","inside","a","compartment","in","a","#$Sofa")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131293).
lisp_trans(termFormat(vEnglishLanguage,tObjectSofaBed,s("sofa","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131408).
lisp_trans(=>(tObjectSofaBed(X),exists([SOFA,STORAGE],and(tCompartment(STORAGE),part(STORAGE,SOFA),tSumoSofa(SOFA),hasPurpose(STORAGE,exists([K],and(actKeeping(K),patient(K,X),destination(K,STORAGE))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131457).
lisp_trans(genls(tObjectCrib,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131785).
lisp_trans(documentation(tObjectCrib,vEnglishLanguage,s("A","#$Crib","is","a","#$Bed","for","babies")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131805).
lisp_trans(termFormat(vEnglishLanguage,tObjectCrib,"crib"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131875).
lisp_trans(=>(tObjectCrib(X),hasPurpose(X,exists([BABY],and(tSumoHumanBaby(BABY),sumoAttribute(BABY,mobAsleep),located(BABY,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':131917).
lisp_trans(genls(tObjectHammock,tSumoBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132090).
lisp_trans(documentation(tObjectHammock,vEnglishLanguage,'Hammock is a type of #$Bed made of rope or  canvas and is suspended between two stationary objects'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132113).
lisp_trans(termFormat(vEnglishLanguage,tObjectHammock,"hammock"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132256).
lisp_trans(=>(tObjectHammock(X),and(material(tSumoFabric,X),exists([POLE1,POLE2,GROUND],and(orientation(POLE1,POLE2,tSumoNear),connected(POLE1,X),connected(POLE2,X),tSumoLandArea(GROUND),located(X,GROUND),orientation(X,GROUND,tSumoAbove))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132304).
lisp_trans(=>(tObjectHammock(X),hasPurpose(X,exists([PROC],and(tSumoLyingDown(PROC),eventLocated(PROC,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132633).
lisp_trans(genls(tObjectMattress,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132791).
lisp_trans(documentation(tObjectMattress,vEnglishLanguage,s("A","#$Mattress","is","a","#$component","of","a","#$Bed","that","is","a","cushion","to","make","it","more","comfortable")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132820).
lisp_trans(termFormat(vEnglishLanguage,tObjectMattress,"mattress"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':132951).
lisp_trans(=>(tObjectMattress(X),exists([BED],and(tSumoBed(BED),component(X,BED)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133001).
lisp_trans(=>(tObjectMattress(X),hasPurpose(X,exists([PERSON],and(sumoAttribute(PERSON,mobAsleep),orientation(PERSON,X,tSumoOn))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133112).
lisp_trans(genls(tObjectBedFrame,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133273).
lisp_trans(documentation(tObjectBedFrame,vEnglishLanguage,s("A","#$BedFrame","is","a","%","&","component","of","a","#$Bed","that","supports","the","mattress")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133302).
lisp_trans(termFormat(vEnglishLanguage,tObjectBedFrame,s("bed","frame")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133413).
lisp_trans(=>(and(tSumoBed(X),component(BEDFRAME,X),tObjectBedFrame(BEDFRAME),component(MATTRESS,X),tObjectMattress(MATTRESS)),orientation(MATTRESS,BEDFRAME,tSumoOn)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133464).
lisp_trans(genls(tSumoFourPosterBed,tObjectBedFrame),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133665).
lisp_trans(documentation(tSumoFourPosterBed,vEnglishLanguage,'FourPosterBed is a type of #$BedFrame with a post at each corner to support curtains or a canopy'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133699).
lisp_trans(termFormat(vEnglishLanguage,tSumoFourPosterBed,s("four","-","poster","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133846).
lisp_trans(=>(tSumoFourPosterBed(X),exists([SHAPE],and(sumoAttribute(X,SHAPE),tQuadrilateral(SHAPE),all([CORNER],=>(and(pointOfIntersection(SIDE1,SIDE2,CORNER),sideOfFigure(SIDE1,SHAPE),sideOfFigure(SIDE2,SHAPE),not(equal(SIDE1,SIDE2))),exists([POST,FLOOR],and(meetsSpatially(CORNER,POST),tObjectArtifact(POST),tSumoFloor(FLOOR),orientation(BED,FLOOR,tSumoOn),orientation(POST,FLOOR,tSumoVertical)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':133908).
lisp_trans(genls(vtBedAttribute,vtRelationalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134557).
lisp_trans(documentation(vtBedAttribute,vEnglishLanguage,'BedAttribute is the class of attributes attached to the type of cushion a #$Bed has'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134601).
lisp_trans(termFormat(vEnglishLanguage,vtBedAttribute,s("bed","attribute")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134734).
lisp_trans(=>(and(sumoAttribute(X,ATTR),vtBedAttribute(ATTR)),tSumoBed(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134793).
lisp_trans(vtBedAttribute(tObjectWaterBed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134888).
lisp_trans(documentation(tObjectWaterBed,vEnglishLanguage,'WaterBed describes how the cushion of a #$Bed is filled with water'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':134921).
lisp_trans(termFormat(vEnglishLanguage,tObjectWaterBed,s("water","bed")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135033).
lisp_trans(=>(sumoAttribute(X,tObjectWaterBed),exists([MATTRESS,WATER],and(component(MATTRESS,X),contains(MATTRESS,WATER),tWater(WATER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135084).
lisp_trans(genls(tSumoBedLinen,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135251).
lisp_trans(documentation(tSumoBedLinen,vEnglishLanguage,'BedLinen is an #$Artifact made of #$Fabric that is used to #$Covering a #$Bed'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135280).
lisp_trans(termFormat(vEnglishLanguage,tSumoBedLinen,s("bed","linen")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135403).
lisp_trans(=>(tSumoBedLinen(X),material(tSumoFabric,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135454).
lisp_trans(=>(tSumoBedLinen(X),hasPurpose(X,exists([COVER,BED],and(actCovering(COVER),patient(COVER,BED),tSumoBed(BED),instrument(COVER,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135508).
lisp_trans(genls(tSumoTable,tSumoFurniture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135736).
lisp_trans(documentation(tSumoTable,vEnglishLanguage,s("A","piece","of","#$Furniture","with","four","legs","and","a","flat","top",".","It","is","used","either","for","eating",",","paperwork","or","meetings",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135763).
lisp_trans(genls(tSumoDesk,tSumoTable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135913).
lisp_trans(documentation(tSumoDesk,vEnglishLanguage,s("A","#$Table","for","a","single","person","which","is","intended","to","be","used","for","paperwork",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':135935).
lisp_trans(genls(tSumoChestOrCabinet,tSumoFurniture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136050).
lisp_trans(genls(tSumoChestOrCabinet,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136086).
lisp_trans(documentation(tSumoChestOrCabinet,vEnglishLanguage,s("Any","piece","of","#$Furniture","which","is","also","a","Container",",","e",".","g",".","a","chest","of","drawers",",","a","memory","chest",",","an","armoire",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136122).
lisp_trans(genls(tObjectCoffin,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136283).
lisp_trans(documentation(tObjectCoffin,vEnglishLanguage,s("A","#$Container","for","a","#$HumanCorpse",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136311).
lisp_trans(=>(tObjectCoffin(C),hasPurpose(C,exists([HC],and(tSumoHumanCorpse(HC),located(HC,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136387).
lisp_trans(genls(tCompartment,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136526).
lisp_trans(documentation(tCompartment,vEnglishLanguage,s("A","#$Container","which","is","part","of","another","#$Container",",","e",".","g",".","a","drawer",",","a","zippered","pouch","in","a","piece","of","luggage",",","a","compartment","in","a","TV","dinner",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136559).
lisp_trans(=>(tCompartment(C),exists([O],and(tContainer(O),not(equal(C,O)),part(C,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136749).
lisp_trans(genls(tSumoMailbox,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136884).
lisp_trans(documentation(tSumoMailbox,vEnglishLanguage,s("A","#$Container","whose","purpose","is","to","receive","items","that","are","mailed","to","the","address","associated","with","the","#$Mailbox",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':136913).
lisp_trans(=>(tSumoMailbox(B),hasPurpose(B,exists([M,I],and(actMailing(M),patient(M,I),destination(M,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137067).
lisp_trans(genls(tSumoScrew,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137231).
lisp_trans(documentation(tSumoScrew,vEnglishLanguage,s("An","#$AttachingDevice","which","contains","a","spiral","of","grooves","to","hold","it","in","place","and","which","is","fastened","with","a","#$Screwdriver",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137264).
lisp_trans(genls(tObjectScrewdriver,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137426).
lisp_trans(documentation(tObjectScrewdriver,vEnglishLanguage,s("A","#$Device","that","is","used","to","rotate","a","#$Screw",",","which","by","the","action","of","its","helical","threads","is","driven","into","a","medium","that","is","softer","than","the","material","of","the","screw","itself",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137456).
lisp_trans(=>(tObjectScrewdriver(D),hasPurpose(D,exists([R,S],and(actRotating(R),instrument(R,D),patient(R,S),tSumoScrew(S))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137670).
lisp_trans(genls(tObjectHammer,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137865).
lisp_trans(documentation(tObjectHammer,vEnglishLanguage,s("A","#$Device","that","is","used","to","pound","#$Nails","into","a","surface",",","where","they","become","firmly","attached",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':137890).
lisp_trans(=>(tObjectHammer(H),hasPurpose(H,exists([I,N],and(actImpelling(I),instrument(I,H),patient(I,N),tObjectNail(N))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138025).
lisp_trans(genls(tObjectNail,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138215).
lisp_trans(documentation(tObjectNail,vEnglishLanguage,s("An","#$AttachingDevice","which","is","a","thin","piece","of","metal",",","with","or","without","a","head",",","that","is","fastened","with","a","#$Hammer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138247).
lisp_trans(genls(tObjectTape,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138399).
lisp_trans(documentation(tObjectTape,vEnglishLanguage,s("A","thin","strip","of","#$Fabric","or","#$Paper","that","is","used","to","attach","two","things",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138431).
lisp_trans(=>(tObjectTape(TAPE),exists([PART],and(part(PART,TAPE),or(tObjectPaper(PART),tSumoFabric(PART))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138543).
lisp_trans(genls(tObjectAnchor,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138731).
lisp_trans(documentation(tObjectAnchor,vEnglishLanguage,s("An","#$AttachingDevice","which","is","large","hook","or","set","of","hooks","that","are","used","to","secure","a","#$WaterVehicle","on","the","open","water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138765).
lisp_trans(=>(and(tObjectAnchor(A),actAttaching(ATTACH),instrument(ATTACH,A),patient(ATTACH,S)),tSumoWaterVehicle(S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':138924).
lisp_trans(genls(tSumoBoatDeck,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139088).
lisp_trans(documentation(tSumoBoatDeck,vEnglishLanguage,s("One","of","the","levels","of","a","#$WaterVehicle",",","e",".","g",".","the","upper","deck","and","lower","deck","of","small","boats","with","a","cabin",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139117).
lisp_trans(=>(tSumoBoatDeck(D),exists([B],and(tSumoWaterVehicle(B),part(D,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139265).
lisp_trans(genls(tSumoButton,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139381).
lisp_trans(documentation(tSumoButton,vEnglishLanguage,s("An","#$AttachingDevice","that","is","used","on","#$Clothing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139415).
lisp_trans(=>(tSumoButton(B),hasPurpose(B,exists([C],and(actClothing(C),part(B,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139505).
lisp_trans(genls(tSumoClamp,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139634).
lisp_trans(documentation(tSumoClamp,vEnglishLanguage,s("An","#$AttachingDevice","which","is","designed","to","attach","two","things","together","by","means","of","a","movable","part","which","can","be","tightened","or","loosened",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139667).
lisp_trans(genls(tSumoWasher,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139842).
lisp_trans(documentation(tSumoWasher,vEnglishLanguage,s("A","thin","plate","(","typically","disk","-","shaped",")","with","a","#$Hole","(","typically","in","the","middle",")","that","is","normally","used","to","distribute","the","load","of","a","threaded","#$AttachingDevice",",","but","can","have","also","other","functions")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':139867).
lisp_trans(=>(tSumoWasher(W),hasPurpose(W,exists([O1,O2],and(tSumoCorpuscularObject(O1),tSumoAttachingDevice(O2),meetsSpatially(O1,W),contains(W,O2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140097).
lisp_trans(=>(and(tSumoWasher(W),tSumoCorpuscularObject(O1),tSumoAttachingDevice(O2),meetsSpatially(O1,W),contains(W,O2)),exists([PURPOSE],hasPurpose(W,PURPOSE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140372).
lisp_trans(=>(tSumoWasher(W),sumoAttribute(W,tSumoRingTorus)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140584).
lisp_trans(genls(tSumoHolder,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140642).
lisp_trans(documentation(tSumoHolder,vEnglishLanguage,s("A","large","class","of","#$Devices","whose","purpose","is","to","hold","something","else",",","i",".","e",".","be","the","#$instrument","of","a","#$Keeping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140667).
lisp_trans(=>(tSumoHolder(DEVICE),capability(actKeeping,instrument,DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140819).
lisp_trans(genls(tObjectSaddle,tSumoHolder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140897).
lisp_trans(documentation(tObjectSaddle,vEnglishLanguage,s("A","#$Device","which","allows","a","#$Human","to","ride","on","a","#$Horse",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':140922).
lisp_trans(=>(tObjectSaddle(SADDLE),capability(uKappaFn(RIDE,exists([HUMAN,HORSE],and(actCarrying(RIDE),patient(RIDE,HUMAN),tSumoHuman(HUMAN),agent(RIDE,HORSE),tClazzHorse(HORSE)))),instrument,SADDLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141021).
lisp_trans(genls(actHorseRiding,actCarrying),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141357).
lisp_trans(documentation(actHorseRiding,vEnglishLanguage,s("Any","instance","of","#$Carrying","where","the","#$Animal","is","a","#$Horse",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141389).
lisp_trans(=>(actHorseRiding(R),exists([H],and(tClazzHorse(H),instrument(R,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141497).
lisp_trans(rtBinaryPredicate(carries),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141609).
lisp_trans(argIsa(carries,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141748).
lisp_trans(argIsa(carries,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141773).
lisp_trans(documentation(carries,vEnglishLanguage,s("(","carries","?","AGENT","?","OBJECT",")","means","that","an","#$Agent","?","AGENT","transers","an","#$OBJECT","?","OBJECT","from","one","point","to","another")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':141959).
lisp_trans(termFormat(vEnglishLanguage,carries,"carries"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142111).
lisp_trans(=>(carries(AGENT,OBJECT),exists([CARRYING],and(instrument(CARRYING,AGENT),patient(CARRYING,OBJECT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142158).
lisp_trans(genls(tObjectTray,tSumoHolder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142307).
lisp_trans(documentation(tObjectTray,vEnglishLanguage,s("A","#$Holder","that","is","designed","for","#$Food",",","dishes",",","and","flatware",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142330).
lisp_trans(genls(tSumoDish,tSumoHolder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142433).
lisp_trans(documentation(tSumoDish,vEnglishLanguage,s("A","#$Holder","for","#$Food","while","the","#$Food","is","being","eaten",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142456).
lisp_trans(=>(tSumoDish(D),hasPurpose(D,exists([F,E],and(actEating(E),patient(E,F),patient(E,D),isa(F,uFoodForFn(tClazzAnimal)),located(F,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142550).
lisp_trans(genls(tContainer,tSumoHolder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142771).
lisp_trans(documentation(tContainer,vEnglishLanguage,s("Any","#$Holder","whose","purpose","is","to","contain","something","else",".","Note","that","#$Container","is","more","specific","in","meaning","than","#$Holder",",","because","a","#$Container","must","have","a","#$Hole","that","is","at","least","partially","filled","by","the","thing","contained",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':142799).
lisp_trans(=>(tContainer(CONTAINER),hasPurpose(CONTAINER,exists([OBJ],contains(CONTAINER,OBJ)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143069).
lisp_trans(genls(tObjectBag,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143180).
lisp_trans(documentation(tObjectBag,vEnglishLanguage,s("A","#$Pliable","#$Container","with","the","purpose","of","#$Transfer","of","#$Object",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143205).
lisp_trans(=>(tObjectBag(BAG),sumoAttribute(BAG,tSumoPliable)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143644).
lisp_trans(=>(tObjectBag(BAG),hasPurpose(BAG,exists([T,OBJ],and(actTransfer(T),tSumoObject(OBJ),contains(BAG,OBJ),instrument(T,BAG),patient(T,OBJ))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143699).
lisp_trans(genls(tSumoBox,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143928).
lisp_trans(documentation(tSumoBox,vEnglishLanguage,s("Any","six","-","sided","#$Container","whose","sides","are","rectangular","in","shape",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':143953).
lisp_trans(=>(tSumoBox(BOX),equal(vCardinalityFn(uKappaFn(SIDE,or(top(SIDE,BOX),bottom(SIDE,BOX),side(SIDE,BOX)))),6)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144057).
lisp_trans(genls(tSumoTrapOrCage,tSumoHolder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144243).
lisp_trans(documentation(tSumoTrapOrCage,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","trap","or","cage","#$Animals",",","i",".","e",".","to","be","in","instrument","in","an","act","of","#$Confining",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144272).
lisp_trans(=>(tSumoTrapOrCage(T),hasPurpose(T,exists([C],and(actConfining(C),instrument(C,T))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144425).
lisp_trans(genls(tObjectEnvelope,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144566).
lisp_trans(documentation(tObjectEnvelope,vEnglishLanguage,s("A","sealable","#$Container","for","one","or","more","pieces","of","paper","which","is","designed","to","protect","the","papers","while","they","are","transferred","to","someone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144596).
lisp_trans(genls(tSumoTravelContainer,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144776).
lisp_trans(documentation(tSumoTravelContainer,vEnglishLanguage,s("Any","#$Container","which","is","intended","to","be","used","for","carrying","clothing",",","toiletries",",","and","other","personal","effects","that","would","be","needed","on","a","overnight","trip",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':144813).
lisp_trans(genls(tSumoFluidContainer,tContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145018).
lisp_trans(documentation(tSumoFluidContainer,vEnglishLanguage,s("A","#$Container","which","is","used","to","store","#$Fluids",",","i",".","e",".","#$Liquids","and","#$Gases",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145054).
lisp_trans(=>(and(tSumoFluidContainer(TANK),contains(TANK,STUFF)),sumoAttribute(STUFF,tSumoFluid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145181).
lisp_trans(genls(tObjectBottle,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145292).
lisp_trans(documentation(tObjectBottle,vEnglishLanguage,s("A","#$Container","whose","top","is","narrower","than","its","bottom",",","which","has","no","handle",",","and","which","is","intended","to","store","#$Liquids",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145325).
lisp_trans(=>(and(tObjectBottle(BOTTLE),contains(BOTTLE,STUFF)),sumoAttribute(STUFF,tSumoLiquid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145484).
lisp_trans(=>(and(tObjectBottle(BOTTLE),bottom(BOTTOM,BOTTLE),top(TOP,BOTTLE),width(BOTTOM,WIDTH1),width(TOP,WIDTH2)),lessThan(WIDTH2,WIDTH1)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145592).
lisp_trans(genls(tSumoDrinkingCup,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145782).
lisp_trans(documentation(tSumoDrinkingCup,vEnglishLanguage,s("An","open","#$FluidContainer","that","is","intended","to","serve","a","#$Beverage","to","a","single","person",".","Note","that","this","class","includes","both","cups","with","handles","and","drinking","glasses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':145820).
lisp_trans(=>(and(tSumoDrinkingCup(CUP),contains(CUP,STUFF)),tSumoBeverage(STUFF)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146029).
lisp_trans(genls(tPlaceLikeSwimmingPool,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146143).
lisp_trans(genls(tPlaceLikeSwimmingPool,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146182).
lisp_trans(documentation(tPlaceLikeSwimmingPool,vEnglishLanguage,s("A","#$FluidContainer","that","is","filled","with","#$Water","and","that","is","used","for","#$Swimming",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146225).
lisp_trans(=>(tPlaceLikeSwimmingPool(P),hasPurpose(P,exists([S],and(actSwimming(S),eventLocated(S,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146354).
lisp_trans(=>(and(tPlaceLikeSwimmingPool(P),contains(P,F),tSumoFluid(F)),tWater(F)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146498).
lisp_trans(genls(tSumoBoardOrBlock,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146610).
lisp_trans(documentation(tSumoBoardOrBlock,vEnglishLanguage,s("A","piece","of","material","with","flat",",","rectangular","sides",".","Note","that","boards","and","blocks","are","lumped","into","a","single","concept",",","because","the","difference","between","these","notions","cannot","be","precisely","defined",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146643).
lisp_trans(=>(tSumoBoardOrBlock(BOARD),capability(actConstructing,resource,BOARD)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146880).
lisp_trans(genls(tObjectBrick,tSumoBoardOrBlock),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146965).
lisp_trans(documentation(tObjectBrick,vEnglishLanguage,s("A","block","of","fired","#$Clay","that","is","used","in","#$Constructing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':146995).
lisp_trans(=>(tObjectBrick(B),material(tSumoClay,B)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147091).
lisp_trans(=>(tObjectBrick(B),hasPurpose(B,exists([C],and(actConstructing(C),resource(C,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147140).
lisp_trans(genls(tSumoVeneer,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147280).
lisp_trans(documentation(tSumoVeneer,vEnglishLanguage,s("A","thin","layer","covering","an","#$Object","(","like","#$Furniture",")","or","a","#$Wall","for","decorative","or","productive","purposes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147307).
lisp_trans(=>(tSumoVeneer(V),sumoAttribute(V,tSumoFlat)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147452).
lisp_trans(=>(tSumoVeneer(V),hasPurpose(V,exists([OBJ],covers(V,OBJ)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147502).
lisp_trans(rtBinaryPredicate(tangent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147592).
lisp_trans(argIsa(tangent,1,tSumoOneDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147627).
lisp_trans(argIsa(tangent,2,tSumoTwoDimensionalObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147667).
lisp_trans(documentation(tangent,vEnglishLanguage,s("(","#$tangent","?","LINE","?","CIRCLE",")","means","that","the","straight","line","?","LINE","is","tangent","to","the","figure","?","CIRCLE",",","i",".","e",".","?","LINE","touches","?","CIRCLE","without","intersecting","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147707).
lisp_trans(=>(tangent(LINE,CIRCLE),exists([POINT1],and(pointOfFigure(POINT1,LINE),pointOfFigure(POINT1,CIRCLE),all([POINT2],=>(and(pointOfFigure(POINT2,LINE),pointOfFigure(POINT2,CIRCLE)),equal(POINT1,POINT2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':147899).
lisp_trans(genls(tSumoTwoDimensionalObject,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148249).
lisp_trans(documentation(tSumoTwoDimensionalObject,vEnglishLanguage,s("A","real","-","world","physical","object","with","a","very","flat","aspect",".","This","includes","drawings","on","paper",",","cave","paintings","and","other","surface","alterations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148288).
lisp_trans(rtBinaryPredicate(sliceOfFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148564).
lisp_trans(documentation(sliceOfFigure,vEnglishLanguage,s("(","sliceOfFigure","?","SLICE","?","FIGURE",")","indicates","that","?","SLICE","is","a","2","-","d","section","of","the","3","-","d","figure","?","FIGURE",".","Or",",","more","formally",",","?","SLICE","is","2","-","d","figure","formed","by","the","intersection","of","a","plane","with","the","3","-","d","figure","?","FIGURE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148605).
lisp_trans(argIsa(sliceOfFigure,1,tSumoTwoDimensionalObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148859).
lisp_trans(argIsa(sliceOfFigure,2,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148905).
lisp_trans(tSumoThreeDimensionalFigure(tSumoRoundShape),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148949).
lisp_trans(documentation(tSumoRoundShape,vEnglishLanguage,s("Any","#$ThreeDimensionalFigure","that","has","a","single","tangent","at","every","point","on","its","surface",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':148994).
lisp_trans(=>(sumoAttribute(O,tSumoRoundShape),all([P],and(pointOfFigure(P,O),tSumoTwoDimensionalObject(TO),meetsSpatially(P,O),meetsSpatially(P,TO),exists([T],tangent(T,TO))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149165).
lisp_trans(genls(tCone,tSumoThreeDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149406).
lisp_trans(documentation(tCone,vEnglishLanguage,s("The","class","of","#$ThreeDimensionalFigures","which","are","produced","by","rotating","a","#$RightTriangle","around","its","#$RightAngle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149445).
lisp_trans(genls(tCylinder,tSumoThreeDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149599).
lisp_trans(documentation(tCylinder,vEnglishLanguage,s("The","class","of","#$ThreeDimensionalFigures","such","that","all","#$GeometricPoints","that","make","up","the","#$Cylinder","are","equidistant","from","a","#$OneDimensionalFigure",",","known","as","the","axis","of","the","#$Cylinder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149642).
lisp_trans(genls(tSumoObliqueAngle,tSumoTwoDimensionalAngle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149871).
lisp_trans(documentation(tSumoObliqueAngle,vEnglishLanguage,s("Any","#$TwoDimensionalAngle","that","has","an","#$angularMeasure","that","is","greater","than","90","#$AngularDegrees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':149915).
lisp_trans(=>(and(tSumoObliqueAngle(A),angularMeasure(A,uMeasureFn(N,vtAngularDegree))),greaterThan(N,90)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150061).
lisp_trans(genls(tSumoRightAngle,tSumoTwoDimensionalAngle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150182).
lisp_trans(documentation(tSumoRightAngle,vEnglishLanguage,s("Any","#$TwoDimensionalAngle","that","has","the","#$angularMeasure","of","90","#$AngularDegrees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150224).
lisp_trans(=>(tSumoRightAngle(A),angularMeasure(A,uMeasureFn(90,vtAngularDegree))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150351).
lisp_trans(genls(tSumoAcuteAngle,tSumoTwoDimensionalAngle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150437).
lisp_trans(documentation(tSumoAcuteAngle,vEnglishLanguage,s("Any","#$TwoDimensionalAngle","that","has","an","#$angularMeasure","that","is","less","than","90","#$AngularDegrees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150479).
lisp_trans(sumo_partition(tSumoTwoDimensionalAngle,tSumoRightAngle,tSumoObliqueAngle,tSumoAcuteAngle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150619).
lisp_trans(=>(and(tSumoAcuteAngle(A),angularMeasure(A,uMeasureFn(N,vtAngularDegree))),lessThan(N,90)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150686).
lisp_trans(genls(tPolygon,tSumoClosedTwoDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150807).
lisp_trans(documentation(tPolygon,vEnglishLanguage,s("A","#$ClosedTwoDimensionalFigure","that","is","composed","exclusively","of","straight","lines",",","i",".","e",".","#$OneDimensionalFigures",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':150853).
lisp_trans(=>(tPolygon(POLYGON),=>(geometricPart(PART,POLYGON),or(sideOfFigure(PART,POLYGON),exists([SIDE],and(sideOfFigure(SIDE,POLYGON),geometricPart(PART,SIDE)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151006).
lisp_trans(genls(tTriangle,tPolygon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151270).
lisp_trans(documentation(tTriangle,vEnglishLanguage,s("Any","three","-","sided","#$Polygon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151298).
lisp_trans(=>(tTriangle(TRIANGLE),equal(vCardinalityFn(uKappaFn(SIDE,sideOfFigure(SIDE,TRIANGLE))),3)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151369).
lisp_trans(genls(tRightTriangle,tTriangle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151484).
lisp_trans(documentation(tRightTriangle,vEnglishLanguage,s("Any","#$Triangle","that","contains","a","#$RightAngle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151518).
lisp_trans(=>(tRightTriangle(T),exists([A],and(tSumoRightAngle(A),angleOfFigure(A,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151612).
lisp_trans(genls(tQuadrilateral,tPolygon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151749).
lisp_trans(documentation(tQuadrilateral,vEnglishLanguage,s("Any","four","-","sided","#$Polygon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151782).
lisp_trans(=>(tQuadrilateral(QUAD),equal(vCardinalityFn(uKappaFn(SIDE,sideOfFigure(SIDE,QUAD))),4)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151857).
lisp_trans(genls(tRectangle,tQuadrilateral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':151969).
lisp_trans(documentation(tRectangle,vEnglishLanguage,s("Any","#$Quadrilateral","whose","angles","are","all","#$RightAngles",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152004).
lisp_trans(=>(tRectangle(RECTANGLE),=>(angleOfFigure(ANGLE,RECTANGLE),tSumoRightAngle(ANGLE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152106).
lisp_trans(genls(tSquare,tRectangle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152230).
lisp_trans(documentation(tSquare,vEnglishLanguage,s("Any","#$Rectangle","whose","sides","are","all","equal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152258).
lisp_trans(=>(tSquare(SQUARE),exists([LENGTH],all([SIDE],=>(sideOfFigure(SIDE,SQUARE),lineMeasure(SIDE,LENGTH))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152343).
lisp_trans(documentation(vDiameterFn,vEnglishLanguage,s("(","DiameterFn","?","CIRCLE",")","denotes","the","length","of","the","diameter","of","the","#$Circle","?","CIRCLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152518).
lisp_trans(rtUnaryFunction(vDiameterFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152645).
lisp_trans(rtTotalValuedRelation(vDiameterFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152681).
lisp_trans(argIsa(vDiameterFn,1,tCircle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152723).
lisp_trans(resultIsa(vDiameterFn,vtLengthMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152752).
lisp_trans(=>(equal(vDiameterFn(C),L),exists([R],and(equal(vRadiusFn(C),R),equal(uMultiplicationFn(R,2),L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152798).
lisp_trans(documentation(vRadiusFn,vEnglishLanguage,s("(","RadiusFn","?","CIRCLE",")","denotes","the","length","of","the","radius","of","the","#$Circle","?","CIRCLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':152931).
lisp_trans(rtUnaryFunction(vRadiusFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153052).
lisp_trans(rtTotalValuedRelation(vRadiusFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153086).
lisp_trans(argIsa(vRadiusFn,1,tCircle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153126).
lisp_trans(resultIsa(vRadiusFn,vtLengthMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153153).
lisp_trans(=>(and(equal(uCenterOfCircleFn(C),P),pointOfFigure(P2,C),geometricDistance(P2,P,R)),equal(vRadiusFn(C),R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153185).
lisp_trans(genls(tSumoCircleSector,tSumoClosedTwoDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153328).
lisp_trans(documentation(tSumoCircleSector,vEnglishLanguage,s("A","slice","of","a","#$Circle",",","i",".","e",".","any","#$ClosedTwoDimensionalFigure","which","consists","of","two","Radii","and","the","arc","of","the","#$Circle","that","they","bound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153379).
lisp_trans(genlPreds(sideOfFigure,geometricPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153563).
lisp_trans(argIsa(sideOfFigure,1,tSumoOneDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153604).
lisp_trans(argIsa(sideOfFigure,2,tGeometricFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153649).
lisp_trans(documentation(sideOfFigure,vEnglishLanguage,s("(","#$sideOfFigure","?","SIDE","?","FIGURE",")","means","that","the","#$OneDimensionalFigure","?","POINT","is","a","side","of","the","#$GeometricFigure","?","FIGURE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153689).
lisp_trans(genls(tSphere,tSumoThreeDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153858).
lisp_trans(documentation(tSphere,vEnglishLanguage,s("The","class","of","#$ThreeDimensionalFigures","such","that","all","#$GeometricPoints","that","make","up","the","#$Sphere","are","equidistant","from","a","single","#$GeometricPoint",",","known","as","the","center","of","the","#$Sphere",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':153899).
lisp_trans(=>(and(sumoAttribute(OBJ,SPHERE),tSphere(SPHERE)),exists([CENTER,DIST],all([PT],=>(pointOfFigure(PT,OBJ),geometricDistance(PT,CENTER,DIST))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154125).
lisp_trans(genls(tBubble,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154334).
lisp_trans(documentation(tBubble,vEnglishLanguage,s("A","globe","which","has","a","#$Liquid","surface","and","which","contains","a","#$Gas",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154370).
lisp_trans(=>(tBubble(B),exists([S],and(surface(S,B),sumoAttribute(S,tSumoLiquid)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154477).
lisp_trans(=>(and(tBubble(B),interiorPart(P,B)),sumoAttribute(P,tSumoGas)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154582).
lisp_trans(=>(and(tBubble(B),not(exists([X,S],and(sumoAttribute(X,S),not(equal(X,tSumoGas)),meetsSpatially(X,B))))),sumoAttribute(B,tSumoRoundShape)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154667).
lisp_trans(genls(tPlaceLikeNest,tSumoCorpuscularObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154873).
lisp_trans(documentation(tPlaceLikeNest,vEnglishLanguage,s("Any","structure","which","is","created","by","nonhuman","#$Animals","for","the","purpose","of","giving","birth","to","their","offspring",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':154907).
lisp_trans(=>(tPlaceLikeNest(NEST),hasPurpose(NEST,exists([BIRTH],and(tSumoBirth(BIRTH),eventLocated(BIRTH,NEST))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155053).
lisp_trans(genls(actOutdoorClothing,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155260).
lisp_trans(documentation(actOutdoorClothing,vEnglishLanguage,'Clothing that is intended to be worn  outdoors.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155296).
lisp_trans(=>(and(actOutdoorClothing(CLOTHING),holdsDuring(TIME,wears(PERSON,CLOTHING))),not(exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),holdsDuring(TIME,located(PERSON,BUILDING)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155399).
lisp_trans(genls(tObjectApron,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155650).
lisp_trans(documentation(tObjectApron,vEnglishLanguage,s("An","item","of","#$Clothing","that","protects","the","front","and","middle","part","of","the","body","while","one","is","#$Cooking","or","doing","other","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155676).
lisp_trans(=>(tObjectApron(A),hasPurpose(A,exists([P,C],and(actCooking(C),agent(C,P),holdsDuring(uWhenFn(C),wears(P,A)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':155835).
lisp_trans(genls(tSumoBelt,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156035).
lisp_trans(documentation(tSumoBelt,vEnglishLanguage,s("A","piece","of","#$Clothing","that","is","worn","around","the","waist","to","restrain","another","piece","of","clothing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156060).
lisp_trans(=>(and(wears(P,B),tSumoBelt(B)),exists([C],and(actClothing(C),wears(P,C),meetsSpatially(B,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156191).
lisp_trans(genls(actTieClothing,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156350).
lisp_trans(documentation(actTieClothing,vEnglishLanguage,'Clothing that is intended to be worn around the  #$Neck and knotted at the front.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156382).
lisp_trans(=>(and(wears(P,T),actTieClothing(T)),exists([N],and(tSumoNeck(N),part(N,P),contains(T,N)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156513).
lisp_trans(genls(tSumoCloak,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156668).
lisp_trans(documentation(tSumoCloak,vEnglishLanguage,s("A","piece","of","#$Clothing","that","covers","the","whole","body","except","the","face","(","and","possibly","entire","head",")",",","hands",",","and","feet",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156694).
lisp_trans(genls(tSumoCollar,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156846).
lisp_trans(documentation(tSumoCollar,vEnglishLanguage,s("A","piece","of","#$Clothing","that","fits","around","the","#$Neck",".","A","#$Collar","is","always","part","of","a","#$Coat","or","a","#$Shirt",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':156873).
lisp_trans(=>(tSumoCollar(C),exists([OC],and(part(C,OC),or(tObjectCoat(OC),tObjectShirt(OC))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157019).
lisp_trans(=>(and(wears(P,C),tSumoCollar(C)),exists([N],and(tSumoNeck(N),part(N,P),meetsSpatially(C,N)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157163).
lisp_trans(genls(tObjectGlove,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157319).
lisp_trans(documentation(tObjectGlove,vEnglishLanguage,s("Clothing","that","is","intended","to","be","worn","on","the","#$Hand",".","Note","that","this","class","covers","both","gloves","which","have","individual","compartments","for","each","of","the","#$Fingers","and","mittens",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157345).
lisp_trans(=>(and(wears(P,G),tObjectGlove(G)),exists([H],and(tPartTypeHand(H),part(H,P),meetsSpatially(G,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157554).
lisp_trans(genls(tObjectHat,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157709).
lisp_trans(documentation(tObjectHat,vEnglishLanguage,s("A","type","of","#$Clothing","that","is","worn","on","the","#$Head",".","Note","that","this","class","covers","caps",",","bonnets",",","berets",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157733).
lisp_trans(=>(and(wears(PERSON,HAT),tObjectHat(HAT)),exists([HEAD],and(tSumoHead(HEAD),part(HEAD,PERSON),meetsSpatially(HAT,HEAD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':157879).
lisp_trans(genls(tObjectCoat,actOutdoorClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158077).
lisp_trans(documentation(tObjectCoat,vEnglishLanguage,'Clothing that has sleeves and covers from the neck  down.  #$Coats are intended to be worn outdoors.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158109).
lisp_trans(genls(tSumoTrousers,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158252).
lisp_trans(documentation(tSumoTrousers,vEnglishLanguage,s("A","piece","of","#$Clothing","that","covers","each","#$Leg","of","a","person","separately",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158281).
lisp_trans(=>(and(wears(H,T),tSumoTrousers(T)),exists([L],and(tPartTypeLeg(L),part(L,H),contains(T,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158395).
lisp_trans(genls(tObjectShoe,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158546).
lisp_trans(documentation(tObjectShoe,vEnglishLanguage,'Clothing that is intended to be worn on the #$Foot.   It consists of an upper, a sole, and a heel.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158571).
lisp_trans(=>(and(wears(PERSON,SHOE),tObjectShoe(SHOE)),exists([FOOT],and(tSumoFoot(FOOT),part(FOOT,PERSON),meetsSpatially(SHOE,FOOT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158712).
lisp_trans(documentation(tPartTypeShoeSole,vEnglishLanguage,s("The","bottom","part","of","a","#$Shoe","that","is","intended","to","be","the","point","of","contact","with","the","ground","while","the","shoe","is","being","worn",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':158914).
lisp_trans(genls(tPartTypeShoeSole,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159075).
lisp_trans(=>(tPartTypeShoeSole(SS),exists([S],and(tObjectShoe(S),bottom(SS,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159104).
lisp_trans(documentation(tObjectSandal,vEnglishLanguage,s("Any","kind","of","open","shoe","lacking","a","markedly","thicker","heel",".","The","toe","may","be","enclosed",",","but","there","must","be","some","opening","in","the","upper","other","than","the","#$Hole","through","which","the","foot","is","inserted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159210).
lisp_trans(genls(tObjectSandal,tObjectShoe),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159434).
lisp_trans(=>(tObjectSandal(S),exists([H1,H2],and(tSumoHole(H1),tSumoHole(H2),not(equal(H1,H2)),hasPurpose(H1,exists([D,F,A,I],and(actDressing(D),tSumoFoot(F),agent(D,A),part(F,A),subProcess(I,D),actInserting(I),patient(I,F),destination(I,H1))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159457).
lisp_trans(=>(tObjectSandal(S),exists([SOLE],and(tPartTypeShoeSole(SOLE),part(SOLE,S),sumoAttribute(SOLE,tSumoFlat)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':159913).
lisp_trans(genls(tObjectSock,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160055).
lisp_trans(documentation(tObjectSock,vEnglishLanguage,s("A","piece","of","#$Clothing","that","is","made","of","a","soft","#$Fabric","like","#$Cotton","and","that","is","intended","to","be","worn","on","the","#$Foot",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160080).
lisp_trans(=>(and(wears(P,S),tObjectSock(S)),exists([F],and(tSumoFoot(F),part(F,P),contains(S,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160235).
lisp_trans(genls(tObjectShirt,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160383).
lisp_trans(documentation(tObjectShirt,vEnglishLanguage,s("An","item","of","#$Clothing","which","covers","the","upper","body","of","a","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160409).
lisp_trans(=>(and(tObjectShirt(SHIRT),wears(PERSON,SHIRT)),tSumoHuman(PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160515).
lisp_trans(genls(tSumoSleeve,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160617).
lisp_trans(documentation(tSumoSleeve,vEnglishLanguage,s("A","piece","of","#$Clothing","that","covers","the","Arm",".","A","#$Sleeve","is","always","part","of","a","#$Coat","or","a","#$Shirt",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160644).
lisp_trans(=>(and(wears(P,S),tSumoSleeve(S)),exists([A],and(tPartTypeArm(A),part(A,P),contains(S,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160782).
lisp_trans(=>(tSumoSleeve(S),exists([C],and(part(S,C),or(tObjectShirt(C),tObjectCoat(C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':160931).
lisp_trans(genls(tObjectDress,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161071).
lisp_trans(documentation(tObjectDress,vEnglishLanguage,s("An","item","of","#$Clothing","which","covers","the","lower","body","of","a","#$Woman",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161097).
lisp_trans(=>(and(tObjectDress(DRESS),wears(PERSON,DRESS)),tSumoWoman(PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161203).
lisp_trans(genls(tSumoClothingSuit,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161305).
lisp_trans(documentation(tSumoClothingSuit,vEnglishLanguage,s("A","#$Collection","of","instances","of","#$Clothing","that","are","designed","to","be","worn","together",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161340).
lisp_trans(=>(and(tSumoClothingSuit(SUIT),member(ITEM1,SUIT),holdsDuring(TIME,wears(PERSON,ITEM1))),all([ITEM2],=>(member(ITEM2,SUIT),holdsDuring(TIME,wears(PERSON,ITEM2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161470).
lisp_trans(genls(tObjectRug,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161713).
lisp_trans(documentation(tObjectRug,vEnglishLanguage,s("A","piece","of","#$Fabric","whose","purpose","is","to","cover","a","#$Floor",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161735).
lisp_trans(=>(tObjectRug(R),hasPurpose(R,exists([C],and(actCovering(C),instrument(C,R),patient(C,F),tSumoFloor(F))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':161831).
lisp_trans(documentation(tObjectTowel,vEnglishLanguage,s("A","piece","of","#$Fabric","which","is","used","for","#$Drying",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162016).
lisp_trans(genls(tObjectTowel,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162104).
lisp_trans(=>(tObjectTowel(X),capability(eventDrying,instrument,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162129).
lisp_trans(=>(tObjectTowel(T),hasPurpose(T,exists([D],and(eventDrying(D),instrument(D,T))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162193).
lisp_trans(genls(tObjectLeather,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162326).
lisp_trans(documentation(tObjectLeather,vEnglishLanguage,s("A","#$Fabric","that","is","the","result","of","tanning","an","#$Animal","#$Skin",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162352).
lisp_trans(=>(tObjectLeather(LEATHER),exists([MAKE,SKIN],and(actMaking(MAKE),resource(MAKE,SKIN),tPartTypeSkin(SKIN),result(MAKE,LEATHER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162457).
lisp_trans(genls(tSumoSilk,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162667).
lisp_trans(documentation(tSumoSilk,vEnglishLanguage,s("Fabric","that","is","woven","from","the","strands","produced","by","certain","#$Larval","#$Insects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162690).
lisp_trans(=>(tSumoSilk(S),exists([M,T,I],and(actMaking(M),result(M,S),resource(M,T),part(T,I),tClazzInsect(I),sumoAttribute(I,tSumoLarval)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':162809).
lisp_trans(genls(tSumoWool,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163013).
lisp_trans(documentation(tSumoWool,vEnglishLanguage,'Fabric that is made from the #$Hair of #$Sheep.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163036).
lisp_trans(=>(tSumoWool(W),exists([M,H,S],and(actMaking(M),result(M,W),resource(M,H),part(H,S),tSumoHair(H),tClazzSheep(S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163126).
lisp_trans(genls(tSumoPocket,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163326).
lisp_trans(documentation(tSumoPocket,vEnglishLanguage,s("A","pouch","of","#$Fabric","in","an","instance","of","#$Clothing","where","something","can","be","kept",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163351).
lisp_trans(=>(tSumoPocket(POCKET),exists([CLOTHING],and(actClothing(CLOTHING),part(POCKET,CLOTHING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163472).
lisp_trans(=>(tSumoPocket(POCKET),capability(actKeeping,instrument,POCKET)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163616).
lisp_trans(genls(tObjectBlanket,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163694).
lisp_trans(documentation(tObjectBlanket,vEnglishLanguage,s("A","piece","of","#$Fabric","whose","purpose","is","to","keep","a","person","who","is","in","bed","warm",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163720).
lisp_trans(=>(tObjectBlanket(BLANKET),hasPurpose(BLANKET,exists([HEAT,PERSON,BED],and(actHeating(HEAT),patient(HEAT,PERSON),tSumoHuman(PERSON),located(PERSON,BED),tSumoBed(BED))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':163838).
lisp_trans(genls(tSumoCotton,tSumoPlantAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164111).
lisp_trans(documentation(tSumoCotton,vEnglishLanguage,s("Fibers","from","the","cotton","plant","that","are","used","in","#$Making","#$CottonFabric",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164154).
lisp_trans(genls(tSumoCottonFabric,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164268).
lisp_trans(documentation(tSumoCottonFabric,vEnglishLanguage,s("Any","#$Fabric","that","is","made","entirely","out","of","#$Cotton",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164299).
lisp_trans(=>(tSumoCottonFabric(F),exists([M,C],and(actMaking(M),resource(M,C),tSumoCotton(C),result(M,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164398).
lisp_trans(=>(tSumoCottonFabric(F),material(tSumoCotton,F)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164560).
lisp_trans(documentation(tObjectVeil,vEnglishLanguage,s("A","piece","of","#$Clothing","intended","to","cover","or","obscure","the","face","or","hair","of","a","#$Woman",".","This","is","commonly","worn","for","religious","reasons","when","in","public","in","#$Muslim","countries",",","but","is","also","customary","at","#$Weddings","and","#$Funerals","among","some","non","-","Muslim","women",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164618).
lisp_trans(genls(tObjectVeil,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164902).
lisp_trans(=>(tObjectVeil(V),hasPurpose(V,exists([F,H],or(and(tSumoFace(F),meetsSpatially(V,F)),and(tSumoHair(H),meetsSpatially(V,H)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':164927).
lisp_trans(genls(actConcealing,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165157).
lisp_trans(documentation(actConcealing,vEnglishLanguage,s("Locating","something","in","such","a","way","that","it","cannot","be","seen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165187).
lisp_trans(=>(and(actConcealing(C),patient(C,OBJ)),hasPurpose(C,not(exists([S],and(actSeeing(S),patient(S,OBJ)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165290).
lisp_trans(genls(actDressing,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165478).
lisp_trans(documentation(actDressing,vEnglishLanguage,s("The","#$Process","of","putting","on","#$Clothing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165506).
lisp_trans(=>(and(actDressing(DRESS),agent(DRESS,AGENT),patient(DRESS,CLOTHING)),and(actClothing(CLOTHING),holdsDuring(uBeginFn(uWhenFn(DRESS)),not(wears(AGENT,CLOTHING))),holdsDuring(iTimeOf_EndFn(uWhenFn(DRESS)),wears(AGENT,CLOTHING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165590).
lisp_trans(genls(actChangingClothing,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165959).
lisp_trans(documentation(actChangingClothing,vEnglishLanguage,s("Any","instance","of","a","process","of","#$RemovingClothing","and","#$Dressing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':165996).
lisp_trans(=>(actChangingClothing(CC),exists([R,D],and(actRemovingClothing(R),actDressing(D),subProcess(R,CC),subProcess(D,CC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166112).
lisp_trans(genls(actRemovingClothing,actUncovering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166299).
lisp_trans(documentation(actRemovingClothing,vEnglishLanguage,s("Removing","#$Clothing","from","a","#$Human","or","#$Animal","in","such","a","way","that","the","#$Human","or","#$Animal","no","longer","wears","the","#$Clothing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166338).
lisp_trans(=>(and(actRemovingClothing(REMOVE),agent(REMOVE,AGENT),patient(REMOVE,CLOTHING)),and(holdsDuring(uBeginFn(uWhenFn(REMOVE)),wears(AGENT,CLOTHING)),holdsDuring(iTimeOf_EndFn(uWhenFn(REMOVE)),not(wears(AGENT,CLOTHING))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166514).
lisp_trans(genls(actCleaning,actMaintaining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166868).
lisp_trans(documentation(actCleaning,vEnglishLanguage,'Cleaning refers to the #$Process of removing dirt and arranging things'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':166906).
lisp_trans(=>(actCleaning(X),exists([OBJ],and(patient(X,OBJ),holdsDuring(iTimeOf_EndFn(uWhenFn(X)),sumoAttribute(OBJ,vClean))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167023).
lisp_trans(genls(actSweeping,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167185).
lisp_trans(documentation(actSweeping,vEnglishLanguage,s("Removing","small","particles","from","the","floor","by","means","of","a","#$Broom",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167214).
lisp_trans(=>(and(actSweeping(S),instrument(S,B)),tObjectBroom(B)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167322).
lisp_trans(genls(actWashing,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167408).
lisp_trans(genls(actWashing,actCleaning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167436).
lisp_trans(documentation(actWashing,vEnglishLanguage,'Removing small particles from something by means of  a #$Detergent and #$Water.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167464).
lisp_trans(=>(actWashing(P),exists([D,W],and(tSumoDetergent(D),instrument(P,D),tWater(W),instrument(P,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167589).
lisp_trans(genls(tObjectCleaningDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167754).
lisp_trans(documentation(tObjectCleaningDevice,vEnglishLanguage,s("Any","#$Device","whose","purpose","is","#$Cleaning","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167787).
lisp_trans(=>(tObjectCleaningDevice(D),hasPurpose(D,exists([C],and(actCleaning(C),instrument(C,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':167889).
lisp_trans(genls(actTying,actAttaching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168062).
lisp_trans(documentation(actTying,vEnglishLanguage,s("The","#$Process","of","tying","two","things",",","or","two","strands","of","the","same","thing",",","together",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168090).
lisp_trans(genls(actUntying,actDetaching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168212).
lisp_trans(disjointWith(actUntying,actTying),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168242).
lisp_trans(documentation(actUntying,vEnglishLanguage,s("The","#$Process","of","untying","two","things",",","or","two","strands","of","the","same","thing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168267).
lisp_trans(genls(actSewing,actAttaching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168383).
lisp_trans(documentation(actSewing,vEnglishLanguage,s("Attaching","two","pieces","of","#$Fabric","or","one","part","of","a","piece","of","#$Fabric","to","another","part","by","means","of","needle","and","thread",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168411).
lisp_trans(=>(actSewing(S),exists([F],and(tSumoFabric(F),patient(S,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168569).
lisp_trans(genls(actSoldering,actAttaching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168673).
lisp_trans(documentation(actSoldering,vEnglishLanguage,s("Attaching","two","things","by","means","of","a","#$MetallicAlloy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168704).
lisp_trans(=>(and(actSoldering(S),patient(S,OBJ1),patient(S,OBJ2),not(equal(OBJ1,OBJ2))),exists([A],and(tSumoMetallicAlloy(A),connects(A,OBJ1,OBJ2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':168801).
lisp_trans(genls(tObjectSolderingIron,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169011).
lisp_trans(documentation(tObjectSolderingIron,vEnglishLanguage,s("An","#$ElectricDevice","for","melting","#$Solder","and","thereby","#$Attaching","metallic","objects","to","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169051).
lisp_trans(=>(actSoldering(S),exists([SI],and(tObjectSolderingIron(SI),instrument(S,SI)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169198).
lisp_trans(=>(tObjectSolderingIron(SI),exists([X],and(part(X,SI),material(tMetal,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169318).
lisp_trans(=>(actSoldering(S),exists([M],and(eventMelting(M),subProcess(M,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169426).
lisp_trans(rtBinaryPredicate(patientMedical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169771).
lisp_trans(argIsa(patientMedical,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169813).
lisp_trans(argIsa(patientMedical,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169845).
lisp_trans(documentation(patientMedical,vEnglishLanguage,s("The","relation","of","receiving","medical","care","from","a","recognized","medical","practitioner",".","(","#$patientMedical","?","PATIENT","?","DOCTOR",")","means","that","?","PATIENT","is","the","patient","of","?","DOCTOR",".","Note","that","argument","type","restriction","on","the","second","argument","is","#$CognitiveAgent","to","allow","for","cases","where","someone","is","the","patient","of","an","#$Organization",",","viz",".","a","#$CareOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':169886).
lisp_trans(=>(patientMedical(PATIENT,DOCTOR),exists([PROCESS],and(patient(PROCESS,PATIENT),agent(PROCESS,DOCTOR),or(actDiagnosticProcess(PROCESS),actTherapeuticProcess(PROCESS))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170281).
lisp_trans(genls(tObjectBandage,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170545).
lisp_trans(documentation(tObjectBandage,vEnglishLanguage,s("A","piece","of","#$Fabric","that","is","used","in","#$Covering","an","open","wound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170571).
lisp_trans(=>(tObjectBandage(B),hasPurpose(B,exists([TP,C],and(actTherapeuticProcess(TP),actCovering(C),subProcess(C,TP),instrument(C,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170676).
lisp_trans(genls(actMassaging,actTherapeuticProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170887).
lisp_trans(genls(actMassaging,actTouching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170927).
lisp_trans(documentation(actMassaging,vEnglishLanguage,s("A","subclass","of","#$TherapeuticProcess","which","involves","kneading","#$Muscles","in","such","a","way","that","tension","is","relieved",",","blood","circulation","is","increased",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':170957).
lisp_trans(genls(actRelievingPain,actTherapeuticProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171150).
lisp_trans(documentation(actRelievingPain,vEnglishLanguage,s("Any","#$TherapeuticProcess","that","removes","#$Pain","from","the","patient","of","the","process",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171194).
lisp_trans(=>(and(actRelievingPain(R),patient(R,P)),and(holdsDuring(uBeginFn(uWhenFn(R)),sumoAttribute(P,tSumoPain)),holdsDuring(iTimeOf_EndFn(uWhenFn(R)),not(sumoAttribute(P,tSumoPain))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171322).
lisp_trans(genls(tSumoNonspecificDisease,tSumoDiseaseOrSyndrome),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171557).
lisp_trans(documentation(tSumoNonspecificDisease,vEnglishLanguage,s("The","class","of","#$DiseaseOrSyndromes","that","are","not","caused","by","a","single","type","of","#$Microorganism",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171605).
lisp_trans(=>(tSumoNonspecificDisease(DISEASE),not(exists([AGENT],and(tMicroorganism(AGENT),all([VICTIM],=>(sumoAttribute(VICTIM,DISEASE),located(AGENT,VICTIM))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':171751).
lisp_trans(genls(tSumoBacterialDisease,tSumoInfectiousDisease),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172008).
lisp_trans(documentation(tSumoBacterialDisease,vEnglishLanguage,s("A","disease","that","is","caused","by","instances","of","#$Bacterium",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172054).
lisp_trans(genls(tSumoInfectiousDisease,tSumoDiseaseOrSyndrome),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172161).
lisp_trans(documentation(tSumoInfectiousDisease,vEnglishLanguage,s("Any","#$DiseaseOrSyndrome","that","is","caused","by","a","#$Microorganism",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172208).
lisp_trans(=>(and(tSumoInfectiousDisease(I),sumoAttribute(A,I)),exists([P],and(actPathologicProcess(P),agent(P,O),tMicroorganism(O),experiencer(P,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172323).
lisp_trans(genls(tSumoTakingIll,actPathologicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172539).
lisp_trans(documentation(tSumoTakingIll,vEnglishLanguage,s("Any","#$Process","where","the","experiencer","contracts","a","#$DiseaseOrSyndrome",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172578).
lisp_trans(=>(and(tSumoTakingIll(T),experiencer(T,A)),exists([D],and(tSumoDiseaseOrSyndrome(D),holdsDuring(uBeginFn(uWhenFn(T)),not(sumoAttribute(A,D))),holdsDuring(iTimeOf_EndFn(uWhenFn(T)),sumoAttribute(A,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172693).
lisp_trans(genls(tSumoViralDisease,tSumoInfectiousDisease),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':172969).
lisp_trans(documentation(tSumoViralDisease,vEnglishLanguage,s("A","disease","that","is","caused","by","instances","of","#$Virus",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173011).
lisp_trans(tSumoDiseaseOrSyndrome(stateDiarrhea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173110).
lisp_trans(documentation(stateDiarrhea,vEnglishLanguage,s("A","#$DiseaseOrSyndrome","of","frequent",",","watery","bowel","movements",".","Severe","cases","can","be","fatal","for","the","young","or","weak",".","It","is","a","common","cause","of","death","for","the","very","young","in","poor","developing","countries",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173148).
lisp_trans(tSumoDiseaseOrSyndrome(stateEmphysema),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173382).
lisp_trans(documentation(stateEmphysema,vEnglishLanguage,s("A","#$DiseaseOrSyndrome","that","affects","the","#$Lungs","and","which","results","in","a","decrease","of","breathing","ability",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173421).
lisp_trans(=>(sumoAttribute(H,stateEmphysema),exists([L,P],and(tPartTypeLung(L),part(L,H),actPathologicProcess(P),eventLocated(P,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173568).
lisp_trans(tSumoDiseaseOrSyndrome(stateFever),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173739).
lisp_trans(documentation(stateFever,vEnglishLanguage,s("Having","a","body","temperature","which","is","(","significantly",")","greater","than","98.6","degrees","Fahrenheit",".","This","syndrome","is","often","associated","with","dehydration","and","chills",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173774).
lisp_trans(=>(and(tSumoHuman(H),sumoAttribute(H,stateFever)),exists([N],and(measure(H,uMeasureFn(N,vtFahrenheitDegree)),greaterThan(N,98.6)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':173970).
lisp_trans(tSumoDiseaseOrSyndrome(stateGoiter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174147).
lisp_trans(documentation(stateGoiter,vEnglishLanguage,s("A","#$DiseaseOrSyndrome","which","is","due","to","an","#$Iodine","deficiency","and","which","results","in","an","enlarged","#$ThyroidGland",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174183).
lisp_trans(=>(sumoAttribute(H,stateGoiter),exists([G,P],and(tSumoThyroidGland(G),part(G,H),actPathologicProcess(P),eventLocated(P,G)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174336).
lisp_trans(tSumoBacterialDisease(stateTuberculosis),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174512).
lisp_trans(documentation(stateTuberculosis,vEnglishLanguage,s("A","#$BacterialDisease","caused","by","the","#$Tubercle","#$Bacillus","that","results","in","lesions","on","various","body","parts",",","especially","the","#$Lungs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174553).
lisp_trans(genls(tSumoRecoveringFromIllness,actOrganismProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174730).
lisp_trans(documentation(tSumoRecoveringFromIllness,vEnglishLanguage,s("Any","#$Process","where","the","experiencer","recovers","from","a","#$DiseaseOrSyndrome",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174779).
lisp_trans(=>(and(tSumoRecoveringFromIllness(R),experiencer(R,A)),exists([D],and(tSumoDiseaseOrSyndrome(D),holdsDuring(uBeginFn(uWhenFn(T)),sumoAttribute(A,D)),holdsDuring(iTimeOf_EndFn(uWhenFn(T)),not(sumoAttribute(A,D)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':174910).
lisp_trans(genls(tSumoProtozoa,tMicroorganism),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175198).
lisp_trans(documentation(tSumoProtozoa,vEnglishLanguage,s("Unicellular","#$Organisms","that","are","capable","of","movement","and","that","are","found","in","almost","every","part","of","the","world",".","This","class","includes","amoebas",",","sporozoans",",","and","paramecia",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175232).
lisp_trans(documentation(parasite,vEnglishLanguage,s("(","parasite","?","ORGANISM1","?","ORGANISM2",")","means","that","there","is","a","parasitic","relationship","between","?","ORGANISM1","and","?","ORGANISM2",",","i",".","e",".","?","ORGANISM1","inhabits","and","obtains","nourishment","from","?","ORGANISM2","in","such","a","way","that","?","ORGANISM2","is","injured",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175442).
lisp_trans(rtBinaryPredicate(parasite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175708).
lisp_trans(argIsa(parasite,1,tSumoOrganism),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175744).
lisp_trans(argIsa(parasite,2,tSumoOrganism),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175773).
lisp_trans(=>(parasite(O1,O2),inhabits(O1,O2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175803).
lisp_trans(=>(parasite(O1,O2),exists([I],and(actInjuring(I),agent(I,O1),patient(I,O2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175851).
lisp_trans(tSumoDiseaseOrSyndrome(stateCancer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':175977).
lisp_trans(documentation(stateCancer,vEnglishLanguage,s("A","#$DiseaseOrSyndrome","characterized","by","pathologic","and","uncontrolled","cell","division","that","results","in","a","#$Tumor",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176013).
lisp_trans(=>(sumoAttribute(PERSON,stateCancer),exists([TUMOR],and(tPartTypeTumor(TUMOR),part(TUMOR,PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176164).
lisp_trans(genls(tSumoNeurosis,actPsychologicalDysfunction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176297).
lisp_trans(documentation(tSumoNeurosis,vEnglishLanguage,s("Any","#$PsychologicalDysfunction","which","is","not","due","to","an","organic","impairment","of","the","#$NervousSystem",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176342).
lisp_trans(genls(tSumoPsychosis,actPsychologicalDysfunction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176484).
lisp_trans(documentation(tSumoPsychosis,vEnglishLanguage,s("Any","#$PsychologicalDysfunction","which","is","the","result","of","an","organic","impairment","of","the","#$NervousSystem",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176530).
lisp_trans(genls(tSumoAtrophy,actPathologicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176677).
lisp_trans(genls(tSumoAtrophy,actDecreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176714).
lisp_trans(documentation(tSumoAtrophy,vEnglishLanguage,s("Any","decrease","in","the","size","of","a","#$BodyPart","which","is","due","to","disease","or","lack","of","use",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176744).
lisp_trans(=>(tSumoAtrophy(A),exists([B],and(experiencer(A,B),tSumoBodyPart(B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176868).
lisp_trans(genls(actBloating,actIncreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':176979).
lisp_trans(genls(actBloating,actPathologicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177010).
lisp_trans(documentation(actBloating,vEnglishLanguage,s("Any","#$Process","where","the","stomach","or","instestines","of","a","#$Human","or","#$Animal","become","distended","from","excessive","gas",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177048).
lisp_trans(=>(actBloating(B),exists([P,S,I,G],and(experiencer(B,P),tSumoGas(G),or(and(part(I,P),tPartTypeIntestine(I),contains(I,G)),and(part(S,P),tPartTypeStomach(S),contains(S,G)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177201).
lisp_trans(genls(tSumoConjugatedSubstance,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177559).
lisp_trans(documentation(tSumoConjugatedSubstance,vEnglishLanguage,s("A","#$CompoundSubstance","that","results","from","the","#$ChemicalSynthesis","of","two","or","more","#$CompoundSubstances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177608).
lisp_trans(<=>(tSumoConjugatedSubstance(CS),exists([C1,C2,P],and(tSumoCompoundSubstance(C1),tSumoCompoundSubstance(C2),not(equal(C1,C2)),actChemicalSynthesis(P),resource(P,C1),resource(P,C2),result(P,CS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':177764).
lisp_trans(rtBinaryPredicate(conjugate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178063).
lisp_trans(rtIrreflexiveRelation(conjugate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178100).
lisp_trans(rtSymmetricRelation(conjugate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178141).
lisp_trans(rtTransitiveRelation(conjugate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178180).
lisp_trans(rtPartialValuedRelation(conjugate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178220).
lisp_trans(argIsa(conjugate,1,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178263).
lisp_trans(argIsa(conjugate,2,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178302).
lisp_trans(documentation(conjugate,vEnglishLanguage,s("(","#$conjugate","?","COMPOUND1","?","COMPOUND2",")","means","that","?","COMPOUND1","and","?","COMPOUND2","are","identical","#$CompoundSubstances","except","that","one","has","one","more","#$Proton","than","the","other",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178341).
lisp_trans(=>(conjugate(COMPOUND1,COMPOUND2),exists([NUMBER1,NUMBER2],and(protonNumber(COMPOUND1,NUMBER1),protonNumber(COMPOUND2,NUMBER2),or(equal(NUMBER1,uAdditionFn(NUMBER2,1)),equal(NUMBER2,uAdditionFn(NUMBER1,1)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178550).
lisp_trans(genls(actBiting,actGrabbing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178846).
lisp_trans(documentation(actBiting,vEnglishLanguage,s("Any","instance","of","#$Grabbing","where","the","#$instrument","is","the","#$Mouth","of","the","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178873).
lisp_trans(=>(and(actBiting(BITE),agent(BITE,ANIMAL)),exists([MOUTH],and(tPartTypeMouth(MOUTH),part(MOUTH,ANIMAL),instrument(BITE,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':178997).
lisp_trans(genls(actStrangling,actGrabbing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179202).
lisp_trans(documentation(actStrangling,vEnglishLanguage,s("Any","instance","of","#$Grabbing","where","the","patient","is","someone","else","'s","throat","and","the","intention","is","to","make","it","impossible","for","the","other","person","to","breathe",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179233).
lisp_trans(=>(actStrangling(S),exists([T],and(patient(S,T),tPartTypeThroat(T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179427).
lisp_trans(=>(and(actStrangling(S),agent(S,A),patient(S,V),tSumoHuman(V)),hasPurpose(S,not(exists([B],and(actBreathing(B),agent(B,V)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179535).
lisp_trans(genls(actSpitting,actImpelling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179762).
lisp_trans(documentation(actSpitting,vEnglishLanguage,s("Any","instance","of","#$Impelling","where","the","#$origin","is","the","#$Mouth","of","the","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179792).
lisp_trans(=>(and(actSpitting(SPIT),agent(SPIT,ANIMAL)),exists([MOUTH],and(tPartTypeMouth(MOUTH),part(MOUTH,ANIMAL),origin(SPIT,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':179915).
lisp_trans(genls(actPunching,actImpelling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180118).
lisp_trans(documentation(actPunching,vEnglishLanguage,s("Any","instance","of","#$Impelling","where","the","instrument","is","a","#$Fist","of","the","agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180148).
lisp_trans(=>(and(actPunching(P),agent(P,A)),exists([H],and(tPartTypeHand(H),sumoAttribute(H,tPartTypeFist),part(H,A),instrument(P,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180268).
lisp_trans(genls(actKicking,actImpelling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180448).
lisp_trans(documentation(actKicking,vEnglishLanguage,s("Any","instance","of","#$Impelling","where","the","#$instrument","is","a","#$Foot","of","the","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180477).
lisp_trans(=>(and(actKicking(KICK),agent(KICK,ANIMAL)),exists([FOOT],and(tSumoFoot(FOOT),part(FOOT,ANIMAL),instrument(KICK,FOOT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180600).
lisp_trans(genls(actMailing,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180784).
lisp_trans(documentation(actMailing,vEnglishLanguage,s("Any","instance","of","#$Transfer","where","a","postal","system","is","used","to","move","the","#$patient",",","either","a","letter","or","a","package",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180812).
lisp_trans(genls(actMessaging,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180966).
lisp_trans(documentation(actMessaging,vEnglishLanguage,s("Any","instance","of","#$Transfer","where","a","#$Message","is","the","patient",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':180996).
lisp_trans(=>(actMessaging(MESSAGING),exists([M],and(iboMessage(M),patient(MESSAGING,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181103).
lisp_trans(rtBinaryPredicate(neighbor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181227).
lisp_trans(rtSymmetricRelation(neighbor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181263).
lisp_trans(rtIrreflexiveRelation(neighbor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181301).
lisp_trans(argIsa(neighbor,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181341).
lisp_trans(argIsa(neighbor,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181367).
lisp_trans(documentation(neighbor,vEnglishLanguage,s("(","#$neighbor","?","PERSON1","?","PERSON2",")","means","that","?","PERSON1","is","a","neighbor","of","?","PERSON2",",","i",".","e",".","?","PERSON1","and","?","PERSON2","have","their","#$homes","#$Near","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181393).
lisp_trans(=>(neighbor(PERSON1,PERSON2),exists([HOME1,HOME2],and(home(PERSON1,HOME1),home(PERSON2,HOME2),not(equal(HOME1,HOME2)),orientation(HOME1,HOME2,tSumoNear)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181583).
lisp_trans(rtBinaryPredicate(capacity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181804).
lisp_trans(argIsa(capacity,1,tSumoSelfConnectedObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181840).
lisp_trans(argIsa(capacity,2,vtConstantQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181880).
lisp_trans(relatedInternalConcept(capacity,humanCapacity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181917).
lisp_trans(documentation(capacity,vEnglishLanguage,s("(","#$capacity","?","OBJ","?","QUANTITY",")","means","that","?","OBJ","can","contain","something","that","has","the","#$measure","of","?","QUANTITY",".","This","predicate","denotes","maximal","capacity",",","i",".","e",".","?","OBJ","can","hold","no","more","than","?","QUANTITY",".","Note",",","however",",","that","this","does","not","mean","that","#$capacity","is","a","#$SingleValuedRelation",",","since","an","object","may","have","various","maximal","capacities","across","different","dimensions",",","e",".","g",".","a","particular","box","may","have","a","#$capacity","of","3","pounds","and","a","#$capacity","of","1","liter",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':181965).
lisp_trans(=>(and(measure(OBJ1,MEAS),contains(OBJ2,OBJ1)),capacity(OBJ2,MEAS)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182453).
lisp_trans(rtBinaryPredicate(humanCapacity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182552).
lisp_trans(rtSingleValuedRelation(humanCapacity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182593).
lisp_trans(argIsa(humanCapacity,1,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182639).
lisp_trans(argIsa(humanCapacity,2,ftPositiveInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182683).
lisp_trans(documentation(humanCapacity,vEnglishLanguage,s("(","#$humanCapacity","?","CONSTRUCT","?","NUMBER",")","means","that","the","#$StationaryArtifact","?","CONSTRUCT",",","e",".","g",".","a","#$Building","or","a","#$Room",",","can","hold","a","maximum","of","?","NUMBER","#$Humans","without","crowding",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182724).
lisp_trans(rtUnaryFunction(uLastFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182948).
lisp_trans(argIsa(uLastFn,1,ftList),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':182980).
lisp_trans(resultIsa(uLastFn,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183003).
lisp_trans(documentation(uLastFn,vEnglishLanguage,s("(","#$LastFn","?","LIST",")","returns","the","last","item","in","the","#$List","?","LIST",".","For","example",",","(","#$LastFn","(","#$ListFn","#$Monday","#$Tuesday","#$Wednesday",")",")","would","return","the","value","of","#$Wednesday",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183025).
lisp_trans(<=>(equal(uLastFn(LIST),ITEM),exists([NUMBER],and(equal(uListLengthFn(LIST),NUMBER),equal(vSumoListOrderFn(LIST,NUMBER),ITEM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183235).
lisp_trans(rtUnaryFunction(uFirstFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183405).
lisp_trans(argIsa(uFirstFn,1,ftList),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183438).
lisp_trans(resultIsa(uFirstFn,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183462).
lisp_trans(documentation(uFirstFn,vEnglishLanguage,s("(","#$FirstFn","?","LIST",")","returns","the","first","item","in","the","#$List","?","LIST",".","For","example",",","(","#$FirstFn","(","#$ListFn","#$Monday","#$Tuesday","#$Wednesday",")",")","would","return","the","value","of","#$Monday",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183485).
lisp_trans(=>(and(ftList(LIST),not(equal(LIST,ftNullList))),equal(uFirstFn(LIST),vSumoListOrderFn(LIST,1))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183696).
lisp_trans(rtQuaternaryFunction(uStreetAddressFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183828).
lisp_trans(argIsa(uStreetAddressFn,1,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183874).
lisp_trans(argIsa(uStreetAddressFn,2,tPlaceLikeRoadway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183920).
lisp_trans(argIsa(uStreetAddressFn,3,tGroupedCity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183955).
lisp_trans(argIsa(uStreetAddressFn,4,actNation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':183987).
lisp_trans(resultIsa(uStreetAddressFn,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184021).
lisp_trans(documentation(uStreetAddressFn,vEnglishLanguage,s("(","#$StreetAddressFn","?","BUILDING","?","ROAD","?","CITY","?","COUNTRY",")","returns","the","#$Agent",",","e",".","g",".","a","family",",","an","organization",",","a","person",",","etc",".","that","resides","or","conducts","business","at","the","corresponding","#$postContactSite",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184051).
lisp_trans(=>(equal(uStreetAddressFn(PLACE,ROAD,CITY,COUNTRY),AGENT),postContactSite(PLACE,AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184297).
lisp_trans(=>(equal(uStreetAddressFn(PLACE,ROAD,CITY,COUNTRY),AGENT),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),part(PLACE,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184402).
lisp_trans(genls(tPartTypeArtStudio,tPartTypeWorkshop),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184581).
lisp_trans(documentation(tPartTypeArtStudio,vEnglishLanguage,s("A","#$Workshop",",","which","is","devoted","to","the","creation","of","#$ArtWorks",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184611).
lisp_trans(=>(tPartTypeArtStudio(STUDIO),hasPurpose(STUDIO,exists([MAKE,WORK],and(actMaking(MAKE),result(MAKE,WORK),tSumoArtWork(WORK))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184719).
lisp_trans(genls(tSumoMine,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184903).
lisp_trans(documentation(tSumoMine,vEnglishLanguage,s("An","construction","in","the","earth","from","which","#$Minerals","are","removed",",","either","in","pure","form","or","as","part","of","ores",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':184938).
lisp_trans(=>(tSumoMine(MINE),hasPurpose(MINE,exists([REMOVE,MINERAL],and(actRemoving(REMOVE),patient(REMOVE,MINERAL),tMineral(MINERAL),origin(REMOVE,MINE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185083).
lisp_trans(genls(tSumoMobileResidence,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185317).
lisp_trans(disjointWith(tSumoMobileResidence,tSumoResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185353).
lisp_trans(documentation(tSumoMobileResidence,vEnglishLanguage,s("Anything","which","serves","to","house","people","but","which","changes","its","location","from","time","to","time",",","e",".","g",".","a","motorhome",",","a","mobile","home",",","a","camp",",","etc",".","Note","that","#$MobileResidence","is","disjoint","from","#$Residence",",","because","the","latter","is","a","subclass","of","#$StationaryArtifact",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185390).
lisp_trans(genls(tPlaceLikePrison,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185695).
lisp_trans(documentation(tPlaceLikePrison,vEnglishLanguage,s("An","installation","which","is","owned","and","maintained","by","a","#$Government","for","the","purpose","of","#$Confining","people",".","This","class","covers","jails",",","federal","prisons",",","concentration","camps",",","gulags",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185732).
lisp_trans(=>(tPlaceLikePrison(P),hasPurpose(P,exists([C,H,G],and(actConfining(C),eventLocated(C,P),patient(C,H),tSumoHuman(H),agent(C,G),tSumoGovernment(G))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':185956).
lisp_trans(documentation(detainee,vEnglishLanguage,s("(","detainee","?","EVENT","?","OBJECT",")","means","that","in","the","Confining","?","EVENT",",","the","Object","?","OBJECT","is","restrained","by","force",",","threat",",","or","other","form","of","intimidation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186208).
lisp_trans(rtCaseRole(detainee),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186397).
lisp_trans(argIsa(detainee,1,actConfining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186426).
lisp_trans(argIsa(detainee,2,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186456).
lisp_trans(genlPreds(detainee,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186483).
lisp_trans(rtBinaryPredicate(targetInAttack),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186515).
lisp_trans(rtCaseRole(targetInAttack),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186557).
lisp_trans(argIsa(targetInAttack,1,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186592).
lisp_trans(argIsa(targetInAttack,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186626).
lisp_trans(genlPreds(targetInAttack,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186659).
lisp_trans(documentation(targetInAttack,vEnglishLanguage,s("This","relation","identifies","the","#$patient","in","the","event","that","is","the","object","of","the","attack",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186696).
lisp_trans(genls(tSumoVotingPoll,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186833).
lisp_trans(documentation(tSumoVotingPoll,vEnglishLanguage,s("A","structure","where","Voting","for","an","#$Election","takes","place",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186874).
lisp_trans(=>(tSumoVotingPoll(P),exists([V],and(actVoting(V),eventLocated(V,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':186977).
lisp_trans(genls(tSumoCamp,tSumoMobileResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187090).
lisp_trans(documentation(tSumoCamp,vEnglishLanguage,s("A","#$MobileResidence","consisting","of","tents","and","other","temporary","living","quarters","that","is","constructed","on","an","undeveloped","#$LandArea",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187122).
lisp_trans(=>(tSumoCamp(CAMP),exists([TENT],and(tPlaceLikeTent(TENT),part(TENT,CAMP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187289).
lisp_trans(genls(tPlaceLikeTent,tSumoMobileResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187411).
lisp_trans(documentation(tPlaceLikeTent,vEnglishLanguage,s("A","#$MobileResidence","that","is","made","of","#$Fabric","and","poles","and","can","be","easily","assembled","and","disassembled",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187443).
lisp_trans(=>(tPlaceLikeTent(TENT),exists([FABRIC],and(tSumoFabric(FABRIC),part(FABRIC,TENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187585).
lisp_trans(genls(tPlaceLikeMonument,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187723).
lisp_trans(documentation(tPlaceLikeMonument,vEnglishLanguage,s("A","#$StationaryArtifact","whose","purpose","is","to","commemorate","a","person",",","animal","or","event",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187762).
lisp_trans(=>(tPlaceLikeMonument(M),hasPurpose(M,exists([R],and(eventRemembering(R),instrument(R,M))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':187889).
lisp_trans(genls(tPlaceLikeTomb,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188030).
lisp_trans(documentation(tPlaceLikeTomb,vEnglishLanguage,s("A","#$StationaryArtifact","which","is","meant","to","contain","someone","who","is","#$Dead",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188065).
lisp_trans(=>(tPlaceLikeTomb(T),hasPurpose(T,exists([P],and(sumoAttribute(P,tDead),contains(T,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188178).
lisp_trans(genls(tPartTypeWorkshop,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188307).
lisp_trans(documentation(tPartTypeWorkshop,vEnglishLanguage,s("A","#$Room",",","suite","of","#$Rooms","or","#$Building","which","is","devoted","to","hand","-","crafting","#$Artifacts",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188346).
lisp_trans(=>(tPartTypeWorkshop(S),hasPurpose(S,exists([M],and(actMaking(M),result(M,W),tObjectArtifact(W))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':188479).
lisp_trans(genls(tPlaceLikeApartmentUnit,tSumoSingleFamilyResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189175).
lisp_trans(documentation(tPlaceLikeApartmentUnit,vEnglishLanguage,s("A","#$SingleFamilyResidence","that","is","not","owned","by","any","member","of","the","#$SocialUnit","that","lives","there",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189222).
lisp_trans(=>(and(tPlaceLikeApartmentUnit(UNIT),home(PERSON,UNIT)),not(possesses(PERSON,UNIT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189368).
lisp_trans(=>(tPlaceLikeApartmentUnit(UNIT),exists([BUILDING],and(tPlaceLikeApartmentBuilding(BUILDING),part(UNIT,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189482).
lisp_trans(documentation(landlord,vEnglishLanguage,s("(","landlord","?","PERSON","?","UNIT",")","means","that","?","PERSON","is","a","landlord","of","the","#$Residence","?","UNIT",",","i",".","e",".","he","or","she","owns","?","UNIT","and","is","renting","the","unit","to","someone","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189638).
lisp_trans(rtBinaryPredicate(landlord),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189834).
lisp_trans(argIsa(landlord,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189870).
lisp_trans(argIsa(landlord,2,tSumoPermanentResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189896).
lisp_trans(=>(landlord(L,U),exists([R,P],and(possesses(L,U),tenant(P,U),agent(R,P),actRenting(R),patient(R,U)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':189936).
lisp_trans(documentation(tenant,vEnglishLanguage,s("(","tenant","?","PERSON","?","UNIT",")","means","that","?","PERSON","is","a","tenant","of","the","#$Residence","?","UNIT",",","i",".","e",".","he","or","she","is","renting","the","unit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190110).
lisp_trans(rtBinaryPredicate(tenant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190268).
lisp_trans(argIsa(tenant,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190302).
lisp_trans(argIsa(tenant,2,tSumoResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190326).
lisp_trans(=>(tenant(P,U),exists([L,R],and(actRenting(R),landlord(L,U),agent(R,P),possesses(L,U),patient(R,U)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190355).
lisp_trans(genls(tSumoCondominiumUnit,tSumoSingleFamilyResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190524).
lisp_trans(documentation(tSumoCondominiumUnit,vEnglishLanguage,s("A","#$SingleFamilyResidence","that","may","be","owned","by","a","member","of","the","#$SocialUnit","that","lives","there",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190573).
lisp_trans(=>(and(tSumoSingleFamilyResidence(UNIT),home(PERSON,UNIT),possesses(PERSON,UNIT),not(tPlaceLikeBuilding(UNIT))),tSumoCondominiumUnit(UNIT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190719).
lisp_trans(=>(tSumoCondominiumUnit(UNIT),exists([BUILDING],and(actCondominiumBuilding(BUILDING),part(UNIT,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':190912).
lisp_trans(genls(tPlaceLikeApartmentBuilding,tPlaceLikeResidentialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191072).
lisp_trans(disjointWith(tPlaceLikeApartmentBuilding,tSumoSingleFamilyResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191121).
lisp_trans(documentation(tPlaceLikeApartmentBuilding,vEnglishLanguage,s("A","#$ResidentialBuilding","containing","#$ApartmentUnits",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191172).
lisp_trans(=>(tPlaceLikeApartmentBuilding(BUILDING),exists([UNIT1,UNIT2],and(tPlaceLikeApartmentUnit(UNIT1),tPlaceLikeApartmentUnit(UNIT2),part(UNIT1,BUILDING),part(UNIT2,BUILDING),not(equal(UNIT1,UNIT2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191279).
lisp_trans(genls(actCondominiumBuilding,tPlaceLikeResidentialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191552).
lisp_trans(disjointWith(actCondominiumBuilding,tSumoSingleFamilyResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191603).
lisp_trans(documentation(actCondominiumBuilding,vEnglishLanguage,s("A","#$ResidentialBuilding","containing","#$CondominiumUnits",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191656).
lisp_trans(=>(actCondominiumBuilding(BUILDING),exists([UNIT1,UNIT2],and(tSumoCondominiumUnit(UNIT1),tSumoCondominiumUnit(UNIT2),part(UNIT1,BUILDING),part(UNIT2,BUILDING),not(equal(UNIT1,UNIT2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':191767).
lisp_trans(genls(tPlaceLikeDormitory,tPlaceLikeResidentialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192046).
lisp_trans(genls(tPlaceLikeDormitory,tSumoTemporaryResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192087).
lisp_trans(disjointWith(tPlaceLikeDormitory,tSumoSingleFamilyResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192127).
lisp_trans(documentation(tPlaceLikeDormitory,vEnglishLanguage,s("A","#$TemporaryResidence","which","is","owned","by","a","#$School","and","which","is","used","to","house","students","while","they","take","classes","at","the","#$School",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192170).
lisp_trans(=>(tPlaceLikeDormitory(D),exists([S],and(tSumoSchool(S),possesses(S,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192344).
lisp_trans(genls(tSumoAnimalResidence,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192453).
lisp_trans(documentation(tSumoAnimalResidence,vEnglishLanguage,s("An","#$Artifact","which","is","intended","to","house","#$Animals","and","not","#$Humans",".","Note","that","an","#$AnimalResidence","may","or","may","not","be","a","#$StationaryArtifact",",","e",".","g",".","a","horse","stall","is","stationary","while","a","doghouse","generally","is","not",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192489).
lisp_trans(=>(tSumoAnimalResidence(RESIDENCE),hasPurpose(RESIDENCE,exists([ANIMAL],and(tClazzAnimal(ANIMAL),not(tSumoHuman(ANIMAL)),inhabits(ANIMAL,RESIDENCE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':192754).
lisp_trans(genls(tSumoSportsFacility,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193065).
lisp_trans(documentation(tSumoSportsFacility,vEnglishLanguage,s("A","specially","designated","and","maintained","facility","where","#$Sports","are","played",".","Note","that","this","covers","sports","fields",",","stadiums",",","and","gymnasiums",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193110).
lisp_trans(=>(tSumoSportsFacility(G),hasPurpose(G,exists([S],and(tSport(S),eventLocated(S,G))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193300).
lisp_trans(genls(tGroupedSportsLeague,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193444).
lisp_trans(documentation(tGroupedSportsLeague,vEnglishLanguage,s("An","#$Organization","whose","members","are","#$SportsTeams","and","whose","purpose","is","to","set","up","games","between","its","members",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193481).
lisp_trans(=>(and(tGroupedSportsLeague(L),member(M,L)),tGroupedSportsTeam(M)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193638).
lisp_trans(genls(tSumoPlaceOfCommerce,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193729).
lisp_trans(sumo_partition(tSumoPlaceOfCommerce,actCommercialBuilding,tSumoCommercialUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193775).
lisp_trans(documentation(tSumoPlaceOfCommerce,vEnglishLanguage,s("A","#$Building","or","part","of","a","#$Building","which","is","intended","for","organizational","activities",",","e",".","g",".","retail","or","wholesale","selling",",","manufacturing",",","office","work",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':193837).
lisp_trans(=>(tSumoPlaceOfCommerce(OFFICE),or(actCommercialBuilding(OFFICE),exists([BUILDING],and(actCommercialBuilding(BUILDING),part(OFFICE,BUILDING))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194043).
lisp_trans(genls(actCommercialBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194270).
lisp_trans(genls(actCommercialBuilding,tSumoPlaceOfCommerce),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194309).
lisp_trans(documentation(actCommercialBuilding,vEnglishLanguage,s("A","#$Building","which","is","intended","for","organizational","activities",",","e",".","g",".","retail","or","wholesale","selling",",","manufacturing",",","office","work",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194355).
lisp_trans(genls(tPlaceLikeWarehouse,actCommercialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194540).
lisp_trans(documentation(tPlaceLikeWarehouse,vEnglishLanguage,s("A","very","large","#$CommercialBuilding","whose","purpose","is","to","store","commodities",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194580).
lisp_trans(=>(tPlaceLikeWarehouse(B),hasPurpose(B,exists([K,P],and(actKeeping(K),patient(K,P),tProduct(P),eventLocated(K,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194699).
lisp_trans(genls(tSumoCommercialUnit,tSumoPlaceOfCommerce),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194895).
lisp_trans(documentation(tSumoCommercialUnit,vEnglishLanguage,s("A","#$Room","or","suite","of","#$Rooms","intended","for","clerical","and","/","or","professional","work","of","a","single","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':194937).
lisp_trans(=>(and(tSumoCommercialUnit(UNIT),tGroupedOrganization(ORG),located(ORG,UNIT)),not(exists([OTHER],and(tGroupedOrganization(OTHER),located(OTHER,UNIT),not(equal(OTHER,ORG)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':195092).
lisp_trans(genls(tSumoStore,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':195353).
lisp_trans(documentation(tSumoStore,vEnglishLanguage,s("A","#$Building","that","has","the","purpose","of","housing","#$FinancialTransactions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':195379).
lisp_trans(=>(tSumoStore(X),hasPurpose(X,exists([EV],and(actFinancialTransaction(EV),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':195490).
lisp_trans(genls(actFarmBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196059).
lisp_trans(disjointWith(actFarmBuilding,tPlaceLikeResidentialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196092).
lisp_trans(documentation(actFarmBuilding,vEnglishLanguage,s("A","#$Building","on","a","#$Farm","that","is","used","for","keeping","#$DomesticAnimals",",","#$Fodder","or","harvested","crops",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196136).
lisp_trans(=>(actFarmBuilding(B),exists([F],and(tSumoFarm(F),located(B,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196282).
lisp_trans(genls(tSumoAgency,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196470).
lisp_trans(documentation(tSumoAgency,vEnglishLanguage,s("A","#$Business","whose","customers","are","all","other","#$CommercialAgents",",","e",".","g",".","staffing","agencies",",","food","-","service","providers",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196497).
lisp_trans(=>(and(tSumoAgency(A),customer(C,A)),mobCommercialAgent(C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196655).
lisp_trans(genls(tSumoEntertainmentCompany,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196833).
lisp_trans(documentation(tSumoEntertainmentCompany,vEnglishLanguage,s("Any","#$Business","whose","services","include","#$Performances",".","This","class","covers","nightclubs",",","commercial","live","theaters",",","and","comedy","clubs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':196874).
lisp_trans(=>(tSumoEntertainmentCompany(C),exists([P],and(tSumoCommercialService(P),agent(P,C),tSumoPerformance(P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':197060).
lisp_trans(genls(tGroupedFinancialCompany,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':197293).
lisp_trans(documentation(tGroupedFinancialCompany,vEnglishLanguage,s("The","class","#$FinancialCompany","includes",",","as","subclasses",",","#$FinancialBank",",","#$CreditUnion","and","#$SavingsAndLoan",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':197330).
lisp_trans(genls(tSumoSavingsAndLoan,tGroupedFinancialCompany),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':197827).
lisp_trans(documentation(tSumoSavingsAndLoan,vEnglishLanguage,s("A","federally","or","state","chartered","#$FinancialCompany","that","takes","#$Deposits","from","individuals",",","funds","#$Mortgages",",","and","pays","#$Dividends",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':197870).
lisp_trans(rtBinaryPredicate(insured),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198152).
lisp_trans(rtAsymmetricRelation(insured),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198187).
lisp_trans(argIsa(insured,1,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198255).
lisp_trans(argIsa(insured,2,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198286).
lisp_trans(documentation(insured,vEnglishLanguage,s("(","insured","?","Contract","?","Org",")","means","that","?","Contract","is","insured","by","the","?","Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198318).
lisp_trans(=>(insured(PROP,ORG),sumoProperty(PROP,cwContract)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198456).
lisp_trans(genls(tGroupedInsuranceCompany,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198581).
lisp_trans(documentation(tGroupedInsuranceCompany,vEnglishLanguage,s("A","#$Business","that","insures","#$Agents","for","the","payment","of","a","premium","or","premiums",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198618).
lisp_trans(=>(tGroupedInsuranceCompany(I),exists([C],insured(C,I))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198748).
lisp_trans(genls(tGroupedTransportationCompany,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198895).
lisp_trans(documentation(tGroupedTransportationCompany,vEnglishLanguage,s("A","#$Business","whose","services","include","#$Transportation",",","e",".","g",".","a","#$RailroadCompany",",","an","airline",",","a","cruise","ship","line",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':198937).
lisp_trans(=>(tGroupedTransportationCompany(C),exists([S],and(tSumoCommercialService(S),agent(S,C),actTransportation(S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199113).
lisp_trans(genls(tSumoFinancialService,tSumoCommercialService),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199283).
lisp_trans(documentation(tSumoFinancialService,vEnglishLanguage,'Services performed by a #$FinancialCompany.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199329).
lisp_trans(=>(tSumoFinancialService(S),exists([O],and(tGroupedFinancialCompany(O),agent(S,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199426).
lisp_trans(documentation(loss,vEnglishLanguage,s("The","amount","by","which","the","cost","of","an","investment","or","business","operation","exceeds","its","return",",","i",".","e",".","the","negative","quantity","left","after","subtracting","for","all","expenses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199548).
lisp_trans(rtAsymmetricRelation(loss),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199745).
lisp_trans(argIsa(loss,1,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199780).
lisp_trans(argIsa(loss,2,vtCurrencyMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199817).
lisp_trans(genls(actFinancing,actFunding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199850).
lisp_trans(genls(actFinancing,tSumoFinancialService),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199879).
lisp_trans(documentation(actFinancing,vEnglishLanguage,s("Any","#$Funding","which","is","provided","by","a","#$FinancialCompany","with","the","aim","of","making","a","profit","on","the","money","invested",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':199917).
lisp_trans(genls(tGroupedPartnership,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200142).
lisp_trans(documentation(tGroupedPartnership,vEnglishLanguage,s("A","#$Business","that","is","owned","by","more","than","one","person",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200174).
lisp_trans(=>(tGroupedPartnership(C),exists([H1,H2],and(tSumoHuman(H1),tSumoHuman(H2),not(equal(H1,H2)),possesses(H1,C),possesses(H2,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200274).
lisp_trans(genls(tSumoScholarship,actFunding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200471).
lisp_trans(documentation(tSumoScholarship,vEnglishLanguage,s("Any","#$Funding","which","is","made","on","the","basis","of","merit","and","whose","purpose","is","to","allow","the","destination","to","realize","an","#$EducationalProgram",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200502).
lisp_trans(=>(and(tSumoScholarship(F),destination(F,H)),hasPurpose(F,exists([EP,P],and(tSumoEducationalProgram(EP),realization(P,EP),experiencer(P,H))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200683).
lisp_trans(genls(tSumoWelfare,actFunding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200903).
lisp_trans(documentation(tSumoWelfare,vEnglishLanguage,s("Any","#$Funding","which","is","provided","by","a","#$ServiceOrganization","to","people","in","need",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':200930).
lisp_trans(=>(tSumoWelfare(W),exists([O],and(tGroupedServiceOrganization(O),agent(W,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201052).
lisp_trans(genls(tSumoPublisher,tSumoManufacturer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201338).
lisp_trans(documentation(tSumoPublisher,vEnglishLanguage,s("Any","#$Business","whose","services","include","the","#$Publication","of","#$Texts",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201372).
lisp_trans(=>(tSumoPublisher(C),exists([S],and(tSumoCommercialService(S),agent(S,C),actPublication(S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201486).
lisp_trans(genls(tSumoFamilyBusiness,tGroupedPartnership),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201634).
lisp_trans(documentation(tSumoFamilyBusiness,vEnglishLanguage,s("A","#$Partnership","that","is","owned","by","a","single","family",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201672).
lisp_trans(=>(and(tSumoFamilyBusiness(C),possesses(P1,C),possesses(P2,C)),familyRelation(P1,P2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201772).
lisp_trans(genls(tSumoRestaurant,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201962).
lisp_trans(documentation(tSumoRestaurant,vEnglishLanguage,s("Any","#$Business","whose","services","include","selling","Food","to","customers","which","is","intended","to","be","eaten","on","the","premises",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':201993).
lisp_trans(=>(tSumoRestaurant(C),exists([S,F,B],and(tSumoCommercialService(S),agent(S,C),actSelling(S),actRestaurantBuilding(B),eventLocated(S,B),patient(S,F),isa(F,uFoodForFn(tSumoHuman))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202251).
lisp_trans(=>(actRestaurantBuilding(PLACE),capability(actCooking,eventLocated,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202536).
lisp_trans(=>(tSumoRestaurant(R),exists([D],and(possesses(R,D),tSumoDiningArea(D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202624).
lisp_trans(genls(tSumoProprietorship,tGroupedBusiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202810).
lisp_trans(documentation(tSumoProprietorship,vEnglishLanguage,s("A","#$Business","that","is","owned","by","a","single","person",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202845).
lisp_trans(=>(tSumoProprietorship(C),exists([H],and(tSumoHuman(H),possesses(H,C),not(exists([H2],and(not(equal(H,H2)),possesses(H2,C))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':202943).
lisp_trans(genls(tSumoAuditorium,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203150).
lisp_trans(documentation(tSumoAuditorium,vEnglishLanguage,s("Any","#$Building","whose","purpose","is","to","hold","concerts",",","sports","events",",","plays",",","etc",".","before","an","audience",".","This","class","includes","theaters",",","sports","stadiums",",","university","auditoriums",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203181).
lisp_trans(=>(tSumoAuditorium(AUDITORIUM),hasPurpose(AUDITORIUM,exists([DEMO],and(actDemonstrating(DEMO),eventLocated(DEMO,AUDITORIUM))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203403).
lisp_trans(=>(tSumoAuditorium(AUDITORIUM),exists([STAGE],and(tSumoPerformanceStage(STAGE),part(STAGE,AUDITORIUM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203657).
lisp_trans(genls(tSumoAuditoriumSeat,tSumoSeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203812).
lisp_trans(documentation(tSumoAuditoriumSeat,vEnglishLanguage,s("A","#$Seat","within","an","#$Auditorium","from","which","one","can","observe","the","#$PerformanceStage",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203843).
lisp_trans(=>(tSumoAuditoriumSeat(SEAT),exists([AUDITORIUM],and(tSumoAuditorium(AUDITORIUM),part(SEAT,AUDITORIUM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':203977).
lisp_trans(=>(and(tSumoAuditoriumSeat(SEAT),part(SEAT,AUDITORIUM),part(STAGE,AUDITORIUM),tSumoAuditorium(AUDITORIUM),tSumoPerformanceStage(STAGE),located(PERSON,SEAT),tSumoHuman(PERSON),genls(SEE,actSeeing),all([INST],=>(isa(INST,SEE),patient(INST,STAGE)))),capability(SEE,agent,PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204133).
lisp_trans(genlPreds(enjoys,inScopeOfInterest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204561).
lisp_trans(argIsa(enjoys,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204600).
lisp_trans(argGenl(enjoys,2,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204633).
lisp_trans(documentation(enjoys,vEnglishLanguage,s("(","#$enjoys","?","AGENT","?","PROCESS",")","means","that","the","#$CognitiveAgent","?","AGENT","tends","to","enjoy","actions","of","type","?","PROCESS",",","i",".","e",".","tends","to","enjoy","being","the","#$agent","or","#$experiencer","of","such","actions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204678).
lisp_trans(=>(enjoys(AGENT,PROCESS),desires(AGENT,exists([INSTANCE],and(isa(INSTANCE,PROCESS),or(agent(INSTANCE,AGENT),experiencer(INSTANCE,AGENT)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':204902).
lisp_trans(rtBinaryPredicate(expects),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':205693).
lisp_trans(argIsa(expects,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':205728).
lisp_trans(argIsa(expects,2,ftFormula),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':205762).
lisp_trans(documentation(expects,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$expects","?","AGENT","?","BELIEF",")",")","means","(","and","(","#$holdDuring","?","T1","(","#$believes","?","AGENT","(","#$holdsDuring","?","T2","?","BELIEF",")",")",")","(","#$earlier","?","T1","?","T2",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':205789).
lisp_trans(=>(holdsDuring(T1,expects(AGENT,FORMULA)),and(holdsDuring(T1,believes(AGENT,holdsDuring(T2,FORMULA))),earlier(T1,T2))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':206541).
lisp_trans(genlPreds(fears,expects),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':206690).
lisp_trans(documentation(fears,vEnglishLanguage,s("(","#$fears","?","AGENT","?","FORMULA",")","means","that","?","AGENT","fears","that","the","proposition","?","FORMULA","will","be","true",",","i",".","e",".","he","/","she","believes","that","it","will","come","to","pass","in","the","future","and","that","it","will","be","undesirable","for","?","AGENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':206718).
lisp_trans(=>(fears(AGENT,FORMULA),not(desires(AGENT,FORMULA))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':206958).
lisp_trans(genlPreds(hopes,expects),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207026).
lisp_trans(documentation(hopes,vEnglishLanguage,s("(","#$hopes","?","AGENT","?","FORMULA",")","means","that","?","AGENT","hopes","that","the","proposition","?","FORMULA","will","be","true",",","i",".","e",".","he","/","she","believes","that","it","will","come","to","pass","in","the","future","and","that","it","will","be","desirable","for","?","AGENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207054).
lisp_trans(=>(hopes(AGENT,FORMULA),desires(AGENT,FORMULA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207294).
lisp_trans(tSumoPropositionalAttitude(doubts),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207356).
lisp_trans(rtBinaryPredicate(doubts),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207396).
lisp_trans(argIsa(doubts,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207430).
lisp_trans(argIsa(doubts,2,ftFormula),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207463).
lisp_trans(documentation(doubts,vEnglishLanguage,s("(","#$doubts","?","AGENT","?","FORMULA",")","means","that","?","AGENT","is","unsure","about","the","truth","of","?","FORMULA",",","in","particular","?","AGENT","does","not","believe","that","?","FORMULA","is","true",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207489).
lisp_trans(=>(doubts(AGENT,FORMULA),not(believes(AGENT,FORMULA))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207678).
lisp_trans(tSumoObjectAttitude(dislikes),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207748).
lisp_trans(genlPreds(dislikes,inScopeOfInterest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207783).
lisp_trans(disjointRelation(dislikes,wants),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207824).
lisp_trans(relatedInternalConcept(dislikes,disapproves),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207858).
lisp_trans(argIsa(dislikes,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207904).
lisp_trans(argIsa(dislikes,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207939).
lisp_trans(documentation(dislikes,vEnglishLanguage,s("(","#$dislikes","?","AGENT","?","OBJECT",")","means","that","?","AGENT","has","a","feeling","of","antipathy","to","?","OBJECT",",","i",".","e",".","?","AGENT","believes","that","?","OBJECT","will","thwart","one","of","his","/","her","goals",".","Note","that","there","is","no","implication","that","what","is","hated","by","an","agent","is","not","already","possessed","by","the","agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':207966).
lisp_trans(=>(dislikes(AGENT,OBJECT),desires(AGENT,not(possesses(AGENT,OBJECT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208271).
lisp_trans(tSumoPropositionalAttitude(disapproves),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208359).
lisp_trans(rtBinaryPredicate(disapproves),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208404).
lisp_trans(genlPreds(disapproves,inScopeOfInterest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208443).
lisp_trans(disjointRelation(disapproves,desires),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208487).
lisp_trans(argIsa(disapproves,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208526).
lisp_trans(argIsa(disapproves,2,ftFormula),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208564).
lisp_trans(documentation(disapproves,vEnglishLanguage,s("(","#$disapproves","?","AGENT","?","FORMULA",")","means","that","?","AGENT","has","a","feeling","of","antipathy","to","the","state","of","affairs","represented","by","?","FORMULA",",","i",".","e",".","?","AGENT","believes","that","the","realization","of","?","FORMULA","will","thwart","one","of","his","/","her","goals",".","Note","that","there","is","no","implication","that","what","is","disapproved","of","by","an","agent","is","not","already","true",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208595).
lisp_trans(genlPreds(lacks,needs),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208956).
lisp_trans(documentation(lacks,vEnglishLanguage,s("(","#$lacks","?","AGENT","?","OBJECT",")","means","that","?","AGENT","#$needs","?","OBJECT","and","it","is","not","currently","the","case","that","?","AGENT","#$possesses","?","OBJECT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':208982).
lisp_trans(=>(holdsDuring(TIME,lacks(AGENT,OBJECT)),holdsDuring(TIME,not(possesses(AGENT,OBJECT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209149).
lisp_trans(rtUnaryFunction(uDescendantsFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209575).
lisp_trans(argIsa(uDescendantsFn,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209614).
lisp_trans(resultIsa(uDescendantsFn,tSumoFamilyGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209645).
lisp_trans(documentation(uDescendantsFn,vEnglishLanguage,s("(","#$DescendantsFn","?","PERSON",")","denotes","all","and","only","the","descendants","of","?","PERSON",",","i",".","e",".","the","#$Group","consisting","of","?","OFFSPRING","who","satisfy","the","following","formula",":","(","#$ancestor","?","OFFSPRING","?","PERSON",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209679).
lisp_trans(=>(and(tSumoHuman(PERSON),equal(uDescendantsFn(PERSON),DESCENDANTS)),all([MEMBER],<=>(member(MEMBER,DESCENDANTS),ancestor(MEMBER,PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':209916).
lisp_trans(genls(tSumoGroupOfAnimals,tGroupedGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210122).
lisp_trans(documentation(tSumoGroupOfAnimals,vEnglishLanguage,s("Any","#$Group","which","contains","exclusively","non","-","human","#$members",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210154).
lisp_trans(=>(tSumoGroupOfAnimals(GROUP),all([MEMBER],=>(member(MEMBER,GROUP),and(tClazzAnimal(MEMBER),not(tSumoHuman(MEMBER)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210265).
lisp_trans(genls(tSumoBrood,tSumoGroupOfAnimals),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210469).
lisp_trans(documentation(tSumoBrood,vEnglishLanguage,s("A","#$GroupOfAnimals","that","are","all","born","at","the","same","time","and","to","the","same","parents",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210501).
lisp_trans(=>(tSumoBrood(BROOD),all([MEMBER1,MEMBER2],=>(and(member(MEMBER1,BROOD),member(MEMBER2,BROOD)),sibling(MEMBER1,MEMBER2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210622).
lisp_trans(=>(tSumoBrood(BROOD),exists([TIME],all([MEMBER],=>(member(MEMBER,BROOD),exists([BIRTH],and(tSumoBirth(BIRTH),experiencer(BIRTH,MEMBER),equal(TIME,uWhenFn(BIRTH)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':210824).
lisp_trans(genls(tSumoAnimalTeam,tSumoGroupOfAnimals),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211146).
lisp_trans(documentation(tSumoAnimalTeam,vEnglishLanguage,s("A","#$GroupOfAnimals","which","are","#$Pulling","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211183).
lisp_trans(=>(tSumoAnimalTeam(AT),exists([P],and(actPulling(P),agent(P,AT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211278).
lisp_trans(genls(tGroupedSportsTeam,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211397).
lisp_trans(documentation(tGroupedSportsTeam,vEnglishLanguage,s("A","#$GroupOfPeople","who","habitually","play","a","#$Sport","together",",","either","as","an","occupation","or","as","a","leisure","activity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211433).
lisp_trans(=>(tGroupedSportsTeam(TEAM),exists([SPORT],and(genls(SPORT,tSport),capability(SPORT,agent,TEAM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211588).
lisp_trans(genls(tTeamSport,tSport),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211732).
lisp_trans(documentation(tTeamSport,vEnglishLanguage,s("Any","#$Sport","which","is","played","by","#$SportsTeams",",","e",".","g",".","#$Baseball","and","#$Football",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211759).
lisp_trans(=>(tTeamSport(S),exists([T1,T2],and(contestParticipant(S,T1),contestParticipant(S,T2),tGroupedSportsTeam(T1),tGroupedSportsTeam(T2),not(equal(T1,T2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':211883).
lisp_trans(genls(actRacing,tSport),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212106).
lisp_trans(documentation(actRacing,vEnglishLanguage,s("A","sport","which","involves","a","contest","of","speed","between","the","participants",".","Note","that","this","covers","a","variety","of","things",",","including","auto","racing",",","running","competitions",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212130).
lisp_trans(genlPreds(groupMember,member),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212336).
lisp_trans(argIsa(groupMember,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212369).
lisp_trans(argIsa(groupMember,2,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212398).
lisp_trans(documentation(groupMember,vEnglishLanguage,s("A","#$subrelation","of","#$member",",","#$groupMember","is","used","to","relate","a","#$Human","to","a","#$GroupOfPeople","of","which","he","/","she","is","a","#$member",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212435).
lisp_trans(=>(and(holdsDuring(T1,member(OBJ,GROUP)),tSumoHuman(OBJ),tSumoGroupOfPeople(GROUP)),holdsDuring(T1,groupMember(OBJ,GROUP))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212607).
lisp_trans(documentation(headquartersOfOrganization,vEnglishLanguage,s("(","headquartersOfOrganization","?","ORG","?","AREA",")","means","that","the","#$Organization","?","ORG","is","headquartered","in","?","AREA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212808).
lisp_trans(argIsa(headquartersOfOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':212972).
lisp_trans(argIsa(headquartersOfOrganization,2,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213023).
lisp_trans(genlPreds(headquartersOfOrganization,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213078).
lisp_trans(genls(actCommunicationOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213128).
lisp_trans(documentation(actCommunicationOrganization,vEnglishLanguage,'CommunicationOrganization is  the subclass of #$Organizations that manage #$Communications over physical  infrastructure owned or leased by the organization.  Such organizations  may also produce and disseminate information, entertainment, or other  content.  Also see #$MediaOrganization.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213178).
lisp_trans(=>(actCommunicationOrganization(CO),exists([CS,C],and(actCommunication(C),tSumoCommunicationSystem(CS),instrument(C,CS),agent(C,CO)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213530).
lisp_trans(genls(tGroupedMediaOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213731).
lisp_trans(documentation(tGroupedMediaOrganization,vEnglishLanguage,'MediaOrganization is the subclass  of #$Organization for groups whose primary purpose is the production or  dissemination of media content.  For organizations that physically enable  #$Communication, see #$CommunicationOrganization.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':213773).
lisp_trans(rtAsymmetricRelation(profit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214061).
lisp_trans(argIsa(profit,1,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214098).
lisp_trans(argIsa(profit,2,vtCurrencyMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214137).
lisp_trans(documentation(profit,vEnglishLanguage,s("The","positive","gain","from","an","investment","or","business","operation","after","subtracting","for","all","expenses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214171).
lisp_trans(genls(actNonprofitOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214310).
lisp_trans(disjointWith(actNonprofitOrganization,mobCommercialAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214356).
lisp_trans(documentation(actNonprofitOrganization,vEnglishLanguage,s("Any","#$Organization","whose","purpose","is","something","other","than","making","a","profit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214405).
lisp_trans(=>(actNonprofitOrganization(N),not(hasPurpose(N,exists([P],profit(N,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214537).
lisp_trans(genls(tSumoCommunicationSystem,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214654).
lisp_trans(documentation(tSumoCommunicationSystem,vEnglishLanguage,'CommunicationSystem is a complex  system with various components, enabling communication (in some  medium) between points in a specific area, whether local or worldwide.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214696).
lisp_trans(genls(actCareOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214923).
lisp_trans(sumo_partition(actCareOrganization,actHospitalOrganization,tGroupedMedicalClinic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':214964).
lisp_trans(documentation(actCareOrganization,vEnglishLanguage,s("Any","#$Organization","whose","purpose","is","to","provide","medical","care","for","for","#$Humans","who","reside","there",",","either","permanently","or","temporarily",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215028).
lisp_trans(rtBinaryPredicate(medicalPatient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215214).
lisp_trans(documentation(medicalPatient,vEnglishLanguage,s("A","relation","between","a","#$Human","and","a","#$CareOrganization","that","treats","the","patient",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215256).
lisp_trans(argIsa(medicalPatient,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215385).
lisp_trans(argIsa(medicalPatient,2,actCareOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215417).
lisp_trans(=>(actCareOrganization(ORG),hasPurpose(ORG,exists([PATIENT],medicalPatient(PATIENT,ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215461).
lisp_trans(genls(actHospitalOrganization,actCareOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215575).
lisp_trans(documentation(actHospitalOrganization,vEnglishLanguage,s("A","#$CareOrganization","where","patients","reside","for","a","short","period","of","time","while","they","undergo","treatment","for","a","disease","or","disorder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215624).
lisp_trans(genls(tPlaceLikeHospitalBuilding,tSumoTemporaryResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215807).
lisp_trans(documentation(tPlaceLikeHospitalBuilding,vEnglishLanguage,s("A","#$Building","that","serves","at","the","place","of","business","for","a","#$HospitalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215854).
lisp_trans(genls(tGroupedMedicalClinic,actCareOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':215986).
lisp_trans(documentation(tGroupedMedicalClinic,vEnglishLanguage,s("A","#$CareOrganization","which","provides","medical","care","on","an","out","-","patient","basis","only",",","i",".","e",".","there","are","no","rooms","where","patients","may","take","up","residence","for","a","period","of","time","while","they","receive","care",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216028).
lisp_trans(genls(actMedicalClinicBuilding,uComplementFn(tSumoResidence)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216265).
lisp_trans(genls(actMedicalClinicBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216323).
lisp_trans(genls(tSumoCafeteria,tSumoRestaurant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216366).
lisp_trans(documentation(tSumoCafeteria,vEnglishLanguage,s("Any","#$Restaurant","which","does","not","offer","table","service",".","Food","is","selected","and","purchased","at","a","central","counter",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216398).
lisp_trans(=>(tSumoCafeteria(COMPANY),not(exists([PERSON],occupiesPosition(PERSON,actServicePosition,COMPANY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216551).
lisp_trans(genls(tSumoTavern,tSumoRestaurant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216678).
lisp_trans(documentation(tSumoTavern,vEnglishLanguage,s("A","#$Restaurant","whose","primary","service","is","selling","#$AlcoholicBeverages","to","customers",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216707).
lisp_trans(=>(tSumoTavern(COMPANY),exists([SERVICE,BEVERAGE],and(tSumoCommercialService(SERVICE),agent(SERVICE,COMPANY),actSelling(SERVICE),patient(SERVICE,BEVERAGE),tObjectAlcoholicBeverage(BEVERAGE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':216833).
lisp_trans(genls(actShipping,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217119).
lisp_trans(documentation(actShipping,vEnglishLanguage,s("Shipping","is","the","subclass","of","#$Transportation","events","in","which","goods","are","transported","from","one","place","to","another","by","an","agent","who","is","entrusted","with","the","goods","temporarily","just","in","order","to","move","them",".","Shipping","may","be","done","within","an","organization","or","it","may","be","done","by","an","outside","commercial","agent",".","See","#$CommercialShipping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217154).
lisp_trans(genls(actCommercialShipping,actShipping),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217517).
lisp_trans(genls(actCommercialShipping,tSumoCommercialService),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217556).
lisp_trans(documentation(actCommercialShipping,vEnglishLanguage,'CommercialShipping is the subclass of  #$Transportation events in which a commercial agent provides transportation  of goods for remuneration.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217604).
lisp_trans(genls(actSmuggling,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217803).
lisp_trans(genls(actSmuggling,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217839).
lisp_trans(documentation(actSmuggling,vEnglishLanguage,s("Any","instance","#$Transportation","which","is","also","a","#$CriminalAction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':217875).
lisp_trans(rtIrreflexiveRelation(customer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218546).
lisp_trans(rtBinaryPredicate(customer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218586).
lisp_trans(rtAsymmetricRelation(customer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218622).
lisp_trans(rtPartialValuedRelation(customer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218661).
lisp_trans(argIsa(customer,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218703).
lisp_trans(argIsa(customer,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218738).
lisp_trans(documentation(customer,vEnglishLanguage,s("A","very","general","relation","that","exists","whenever","there","is","a","#$FinancialTransaction","between","the","two","#$Agents","such","that","the","first","is","the","#$destination","of","the","#$FinancialTransaction","and","the","second","is","the","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':218773).
lisp_trans(<=>(customer(AGENT1,AGENT2),exists([SERVICE],and(actFinancialTransaction(SERVICE),agent(SERVICE,AGENT2),destination(SERVICE,AGENT1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219023).
lisp_trans(rtTernaryPredicate(price),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219206).
lisp_trans(argIsa(price,1,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219240).
lisp_trans(argIsa(price,2,vtCurrencyMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219266).
lisp_trans(argIsa(price,3,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219299).
lisp_trans(documentation(price,vEnglishLanguage,s("(","#$price","?","Obj","?","Money","?","Agent",")","means","that","?","Agent","pays","the","amount","of","money","?","Money","for","?","Obj",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219322).
lisp_trans(=>(price(Obj,Money,Agent),exists([Buying],and(actBuying(Buying),agent(Buying,Agent),patient(Buying,Obj),transactionAmount(Buying,Money)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219453).
lisp_trans(genls(tSumoWholesaleStore,actMercantileOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219656).
lisp_trans(documentation(tSumoWholesaleStore,vEnglishLanguage,s("A","#$MercantileOrganization","that","sells","its","goods","exclusively","to","#$CommercialAgents",",","typically","for","resale",",","rather","than","to","end","-","point","consumers",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219719).
lisp_trans(=>(and(tSumoWholesaleStore(STORE),customer(CUSTOMER,STORE)),mobCommercialAgent(CUSTOMER)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':219910).
lisp_trans(genls(tGroupedRetailStore,actMercantileOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':220042).
lisp_trans(disjointWith(tGroupedRetailStore,tSumoWholesaleStore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':220088).
lisp_trans(documentation(tGroupedRetailStore,vEnglishLanguage,s("A","#$RetailStore","is","a","#$MercantileOrganization","that","sells","goods","to","customers","who","are","end","-","point","consumers",",","rather","than","to","#$CommercialAgents","who","are","buying","the","goods","in","order","to","resell","them","at","a","higher","price",".","This","distinguishes","retail","stores","from","wholesale","establishments",",","where","the","purchasers","are","businesses","or","their","representatives",",","as","well","as","mail","order","or","office","buildings","where","transactions","are","facillitated","but","the","consumer","does","not","take","possession","of","the","item","on","the","premises",".","More","succinctly",",","#$RetailStore","is","the","complement","of","#$WholesaleStore",",","which","is","the","class","of","#$MercantileOrganizations","that","sell","goods","to","the","general","public",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':220140).
lisp_trans(=>(tGroupedRetailStore(X),and(capability(actSelling,agent,X),exists([P,EV],and(actSelling(EV),destination(EV,P),tSumoHuman(P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':220860).
lisp_trans(genls(tSumoShoppingMall,actMercantileOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221067).
lisp_trans(documentation(tSumoShoppingMall,vEnglishLanguage,s("A","#$MercantileOrganization","which","is","a","collection","of","various","shops","gathered","together","in","a","single",",","modern","development",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221114).
lisp_trans(=>(and(tSumoShoppingMall(M),member(S,M)),tGroupedRetailStore(S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221280).
lisp_trans(genls(tSumoDrugStore,tGroupedRetailStore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221373).
lisp_trans(documentation(tSumoDrugStore,vEnglishLanguage,s("A","#$RetailStore","that","sells","#$Medicine",",","and","perhaps","other","items","as","well",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221406).
lisp_trans(=>(tSumoDrugStore(D),exists([S],and(actSelling(S),agent(S,D),patient(S,M),tSumoMedicine(M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221523).
lisp_trans(genls(tGroupedGroceryStore,tGroupedRetailStore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221680).
lisp_trans(documentation(tGroupedGroceryStore,vEnglishLanguage,s("A","#$RetailStore","that","sells","Food",",","and","perhaps","other","items","as","well",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221716).
lisp_trans(=>(tGroupedGroceryStore(STORE),exists([SELL,FOOD],and(actSelling(SELL),agent(SELL,STORE),patient(SELL,FOOD),isa(FOOD,uFoodForFn(tClazzAnimal))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':221831).
lisp_trans(genls(actOfferingForSale,actOffering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222049).
lisp_trans(documentation(actOfferingForSale,vEnglishLanguage,'Offering to sell something to someone.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222085).
lisp_trans(=>(and(actOfferingForSale(SALE),agent(SALE,AGENT)),patient(SALE,exists([SELL,OBJ],and(actSelling(SELL),patient(SELL,OBJ),agent(SELL,AGENT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222177).
lisp_trans(genls(tSumoOfferingToPurchase,actOffering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222401).
lisp_trans(documentation(tSumoOfferingToPurchase,vEnglishLanguage,'Offering to buy something from someone.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222440).
lisp_trans(genls(tSumoBargainSale,actOffering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222536).
lisp_trans(documentation(tSumoBargainSale,vEnglishLanguage,'Offering to sell something to someone at a  reduced price.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222568).
lisp_trans(=>(and(tSumoBargainSale(SALE),patient(SALE,OBJ),tSumoObject(OBJ)),exists([PRICE1,PRICE2,AGENT1,AGENT2],and(holdsDuring(uImmediatePastFn(uWhenFn(SALE)),price(OBJ,PRICE1,AGENT1)),holdsDuring(uWhenFn(SALE),price(OBJ,PRICE2,AGENT2)),lessThan(PRICE2,PRICE1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':222676).
lisp_trans(genls(tSumoChristianBible,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223028).
lisp_trans(subsumesContentClass(tSumoChristianBible,iNewTestament),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223059).
lisp_trans(subsumesContentClass(tSumoChristianBible,iOldTestament),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223110).
lisp_trans(documentation(tSumoChristianBible,vEnglishLanguage,s("Any","instance","of","the","collection","of","writings","which","is","regarded","as","scripture","by","those","who","embrace","#$Christianity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223161).
lisp_trans(genls(tSumoChristianGospel,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223323).
lisp_trans(documentation(tSumoChristianGospel,vEnglishLanguage,s("Four","books","in","the","New","Testament","of","the","#$ChristianBible","that","describe","the","life","and","teachings","of","Jesus","Christ","and","that","are","referred","to",",","respectively",",","as","Matthew",",","Mark",",","Luke",",","and","John",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223355).
lisp_trans(genls(iOldTestament,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223591).
lisp_trans(documentation(iOldTestament,vEnglishLanguage,s("The","first","part","of","the","#$ChristianBible",",","describing","the","history","of","the","Hebrew","people",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223620).
lisp_trans(genls(iNewTestament,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223754).
lisp_trans(subsumesContentClass(iNewTestament,tSumoChristianGospel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223783).
lisp_trans(documentation(iNewTestament,vEnglishLanguage,s("The","second","and","final","part","of","the","#$ChristianBible",",","describing","the","life","and","teachings","of","Jesus","Christ","and","the","activities","of","his","apostles",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':223835).
lisp_trans(timeOfTimeInterval(tSumoBeforeCommonEra),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224021).
lisp_trans(documentation(tSumoBeforeCommonEra,vEnglishLanguage,s("The","#$TimeInterval","that","runs","from","#$NegativeInfinity","to","the","time","of","the","birth","of","Christ",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224061).
lisp_trans(equal(uBeginFn(tSumoBeforeCommonEra),tSumoNegativeInfinity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224202).
lisp_trans(not(overlapsTemporally(tSumoCommonEra,tSumoBeforeCommonEra)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224254).
lisp_trans(timeOfTimeInterval(tSumoCommonEra),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224308).
lisp_trans(documentation(tSumoCommonEra,vEnglishLanguage,s("The","#$TimeInterval","that","runs","from","the","supposed","time","of","the","death","of","Christ","to","#$PositiveInfinity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224342).
lisp_trans(equal(iTimeOf_EndFn(tSumoCommonEra),tSumoPositiveInfinity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224486).
lisp_trans(genls(actMissionOrganization,tGroupedReligiousOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224530).
lisp_trans(documentation(actMissionOrganization,vEnglishLanguage,s("The","class","of","#$ReligiousOrganizations","that","send","members","to","foreign","countries","with","the","aim","of","coverting","citizens","of","those","countries","to","the","beliefs","of","the","#$ReligiousOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224583).
lisp_trans(genls(tPlaceLikeReligiousBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224818).
lisp_trans(genls(tPlaceLikeReligiousBuilding,tSumoPlaceOfWorship),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224856).
lisp_trans(documentation(tPlaceLikeReligiousBuilding,vEnglishLanguage,s("A","#$Building","which","is","intended","to","be","used","for","religious","worship",".","This","class","covers","churches",",","temples",",","religious","shrines",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':224900).
lisp_trans(genls(tPartTypeSteeple,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225489).
lisp_trans(documentation(tPartTypeSteeple,vEnglishLanguage,s("A","component","of","a","#$ReligiousBuilding","that","is","tall","and","narrow","and","symbolizes","the","connection","between","humanity","and","a","deity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225527).
lisp_trans(=>(tPartTypeSteeple(STEEPLE),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),part(STEEPLE,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225692).
lisp_trans(genls(actCeremony,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225839).
lisp_trans(genls(actCeremony,actSocialInteraction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225878).
lisp_trans(documentation(actCeremony,vEnglishLanguage,s("An","#$instance","of","#$Ceremony","is","a","relatively","stylized",",","highly","conventional","#$SocialInteraction",",","typically","guided","or","controlled","by","officials","or","professionals",",","to","commemorate","or","mark","some","transformative","event",",","such","as","a","#$Wedding","or","a","#$Baptizing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':225916).
lisp_trans(genls(actWedding,actCeremony),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':226540).
lisp_trans(genls(actWedding,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':226568).
lisp_trans(documentation(actWedding,vEnglishLanguage,s("Any","#$Declaring","that","leads","to","one","person","being","the","#$spouse","of","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':226597).
lisp_trans(=>(actWedding(WED),exists([PERSON1,PERSON2],holdsDuring(uImmediateFutureFn(uWhenFn(WED)),spouse(PERSON1,PERSON2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':226713).
lisp_trans(=>(and(holdsDuring(T1,spouse(P1,P2)),timeOfTimeInterval(T1)),exists([WED],and(actWedding(WED),patient(WED,P1),patient(WED,P2),earlier(uWhenFn(WED),T1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':226868).
lisp_trans(genls(tSumoReligiousService,actReligiousProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227120).
lisp_trans(genls(tSumoReligiousService,actDemonstrating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227165).
lisp_trans(documentation(tSumoReligiousService,vEnglishLanguage,s("A","formal","process","of","public","worship","which","is","typically","carried","out","in","a","church",",","temple","or","other","sanctified","building","and","which","typically","accords","with","a","prescribed","set","of","rules",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227207).
lisp_trans(genls(actBaptizing,actCeremony),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227839).
lisp_trans(genls(actBaptizing,actReligiousProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227872).
lisp_trans(genls(actBaptizing,actJoiningAnOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227910).
lisp_trans(documentation(actBaptizing,vEnglishLanguage,s("A","#$ReligiousProcess","which","marks","the","acceptance","of","the","person","being","baptized","into","the","#$ReligiousOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':227953).
lisp_trans(=>(and(actBaptizing(B),patient(B,H)),tSumoHuman(H)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':228109).
lisp_trans(genls(actPraying,actReligiousProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':228193).
lisp_trans(genls(actPraying,actRequesting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':228229).
lisp_trans(documentation(actPraying,vEnglishLanguage,s("A","formal","or","informal","process","of","private","worship","which","may","or","may","not","be","carried","out","in","a","#$ReligiousBuilding",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':228259).
lisp_trans(genls(tSumoReferenceText,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230338).
lisp_trans(documentation(tSumoReferenceText,vEnglishLanguage,s("A","#$Text","which","is","not","intended","to","be","read","from","beginning","to","end",",","but","which","is","meant","to","be","consulted","to","answer","specific","factual","questions",",","e",".","g",".","about","the","meaning","of","a","word",",","the","location","of","a","country",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230375).
lisp_trans(genls(tSumoIndependentState,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230631).
lisp_trans(genls(tSumoIndependentState,actNation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230676).
lisp_trans(documentation(tSumoIndependentState,vEnglishLanguage,'IndependentState is a subclass of  #$GeopoliticalArea, representing the classification \'Independent State\'  used by the CIA World Fact Book.  Cf.  #$DependencyOrSpecialSovereigntyArea.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230712).
lisp_trans(genls(tSumoDependencyOrSpecialSovereigntyArea,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':230951).
lisp_trans(disjointWith(tSumoIndependentState,tSumoDependencyOrSpecialSovereigntyArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231014).
lisp_trans(genls(tSumoOverseasArea,tSumoDependencyOrSpecialSovereigntyArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231077).
lisp_trans(documentation(tSumoDependencyOrSpecialSovereigntyArea,vEnglishLanguage,'DependencyOrSpecialSovereigntyArea is a subclass of  #$GeopoliticalArea, representing the classification \'Dependency or Special  Sovereignty Area\' used by the CIA World Fact Book.  Cf.  #$IndependentState.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231137).
lisp_trans(rtUnaryFunction(mobResidentFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231416).
lisp_trans(argIsa(mobResidentFn,1,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231452).
lisp_trans(resultIsa(mobResidentFn,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231491).
lisp_trans(documentation(mobResidentFn,vEnglishLanguage,s("(","#$ResidentFn","?","AREA",")","denotes","the","#$GroupOfPeople","who","have","their","#$home","in","?","AREA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231524).
lisp_trans(=>(member(PERSON,mobResidentFn(AREA)),home(PERSON,AREA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231652).
lisp_trans(genlPreds(uCitizenryFn,mobResidentFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231721).
lisp_trans(rtUnaryFunction(uCitizenryFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231758).
lisp_trans(argIsa(uCitizenryFn,1,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231795).
lisp_trans(resultIsa(uCitizenryFn,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231835).
lisp_trans(documentation(uCitizenryFn,vEnglishLanguage,s("(","#$CitizenryFn","?","AREA",")","denotes","the","#$GroupOfPeople","who","are","legal","and","permanent","residents","of","the","#$GeopoliticalArea","?","AREA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':231869).
lisp_trans(=>(and(tSumoGeopoliticalArea(AREA),equal(CITIZENRY,uCitizenryFn(AREA)),equal(POPULATION,mobResidentFn(AREA))),greaterThanOrEqualTo(POPULATION,CITIZENRY)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232039).
lisp_trans(rtBinaryFunction(uPerCapitaFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232233).
lisp_trans(argIsa(uPerCapitaFn,1,vtQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232271).
lisp_trans(argIsa(uPerCapitaFn,2,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232303).
lisp_trans(resultIsa(uPerCapitaFn,vtQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232343).
lisp_trans(documentation(uPerCapitaFn,vEnglishLanguage,s("(","#$PerCapitaFn","?","AREA","?","QUANTITY",")","denotes","the","average","amount","of","?","QUANTITY","possessed","by","a","resident","of","#$GeopoliticalArea","?","AREA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232372).
lisp_trans(=>(equal(uPerCapitaFn(QUANTITY1,AREA),QUANTITY2),exists([POPULATION],and(equal(POPULATION,vCardinalityFn(mobResidentFn(AREA))),equal(QUANTITY2,uDivisionFn(QUANTITY1,POPULATION))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232546).
lisp_trans(genls(tSumoCityDistrict,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232773).
lisp_trans(documentation(tSumoCityDistrict,vEnglishLanguage,s("Any","#$geopoliticalSubdivision","of","a","#$City",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232814).
lisp_trans(<=>(tSumoCityDistrict(DISTRICT),exists([CITY],and(tGroupedCity(CITY),geopoliticalSubdivision(DISTRICT,CITY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':232905).
lisp_trans(genls(tPlaceLikeDowntown,tSumoCityDistrict),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233063).
lisp_trans(documentation(tPlaceLikeDowntown,vEnglishLanguage,s("The","commercial","center","of","a","#$City",".","The","part","of","the","#$City","that","contains","more","shops","and","offices","than","any","other","part",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233096).
lisp_trans(genls(tSumoCemetery,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233258).
lisp_trans(documentation(tSumoCemetery,vEnglishLanguage,s("A","#$LandArea","which","is","used","for","burying","the","dead",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233287).
lisp_trans(=>(tSumoCemetery(C),exists([T],and(tPlaceLikeTomb(T),located(T,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233379).
lisp_trans(genls(tPlaceLikePark,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233483).
lisp_trans(documentation(tPlaceLikePark,vEnglishLanguage,s("A","publicly","owned","#$LandArea","which","is","intended","to","be","used","for","recreation","and","/","or","exercise",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233508).
lisp_trans(=>(tPlaceLikePark(PARK),exists([GOV],and(tSumoGovernment(GOV),possesses(GOV,PARK)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233638).
lisp_trans(=>(tPlaceLikePark(PARK),hasPurpose(PARK,exists([REC],and(tSumoRecreationOrExercise(REC),eventLocated(REC,PARK))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233758).
lisp_trans(genls(tPlaceLikePublicPark,tPlaceLikePark),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233921).
lisp_trans(documentation(tPlaceLikePublicPark,vEnglishLanguage,s("A","#$Park","that","is","publicly","owned",",","i",".","e",".","owned","by","a","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':233948).
lisp_trans(=>(tPlaceLikePublicPark(P),exists([G],and(tSumoGovernment(G),possesses(G,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234058).
lisp_trans(genls(tSumoCultivatedLandArea,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234172).
lisp_trans(documentation(tSumoCultivatedLandArea,vEnglishLanguage,s("A","#$LandArea","which","is","dedicated","to","#$Agriculture",",","e",".","g",".","#$Lawns",",","gardens",",","and","fields","for","growing","crops",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234211).
lisp_trans(=>(tSumoCultivatedLandArea(A),exists([C],and(actAgriculture(C),eventLocated(C,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234369).
lisp_trans(genls(tPlaceLikeCampground,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234495).
lisp_trans(documentation(tPlaceLikeCampground,vEnglishLanguage,s("A","#$LandArea","whose","purpose","is","to","have","#$MobileResidences","(","e",".","g",".","recreational","vehicles",",","mobile","homes",",","#$Tents",",","etc",".",")","located","there",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234526).
lisp_trans(=>(tPlaceLikeCampground(C),hasPurpose(C,exists([R],and(tSumoMobileResidence(R),located(R,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234702).
lisp_trans(genls(tPlaceLikeCityBlock,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234838).
lisp_trans(documentation(tPlaceLikeCityBlock,vEnglishLanguage,s("A","square","-","shaped","area","surrounded","by","#$Roadways","which","is","part","of","a","#$City","and","typically","contains","#$Buildings",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':234868).
lisp_trans(=>(tPlaceLikeCityBlock(B),exists([C],and(tGroupedCity(C),part(B,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235021).
lisp_trans(genls(tSumoAerobicExerciseDevice,tSumoRecreationOrExerciseDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235123).
lisp_trans(documentation(tSumoAerobicExerciseDevice,vEnglishLanguage,s("An","#$RecreationOrExerciseDevice","whose","purpose","is","to","develop","the","cardiovascular","system",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235183).
lisp_trans(genls(tSumoAnaerobicExerciseDevice,tSumoRecreationOrExerciseDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235328).
lisp_trans(disjointWith(tSumoAnaerobicExerciseDevice,tSumoAerobicExerciseDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235390).
lisp_trans(documentation(tSumoAnaerobicExerciseDevice,vEnglishLanguage,s("An","#$RecreationOrExerciseDevice","whose","purpose","is","to","develop","#$Muscles","without","also","developing","the","cardiovascular","system",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':235447).
lisp_trans(genls(actSkilledOccupation,rtOccupationalRole),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236382).
lisp_trans(documentation(actSkilledOccupation,vEnglishLanguage,s("Any","#$Position","which","requires","learning","a","set","of","skills",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236429).
lisp_trans(=>(and(actSkilledOccupation(OCCUPATION),sumoAttribute(PERSON,OCCUPATION)),exists([TRAINING],and(actEducationalProcess(TRAINING),destination(TRAINING,PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236539).
lisp_trans(genls(tSumoManualLabor,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236780).
lisp_trans(genls(tSumoManualLabor,rtOccupationalRole),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236812).
lisp_trans(documentation(tSumoManualLabor,vEnglishLanguage,s("Any","#$Position","which","involves","manual","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236852).
lisp_trans(genls(actUnskilledOccupation,tSumoManualLabor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236943).
lisp_trans(disjointWith(actUnskilledOccupation,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':236986).
lisp_trans(documentation(actUnskilledOccupation,vEnglishLanguage,s("Any","#$Position","which","does","not","require","learning","a","set","of","skills",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237035).
lisp_trans(genls(tSumoOccupationalTrade,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237156).
lisp_trans(genls(tSumoOccupationalTrade,tSumoManualLabor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237203).
lisp_trans(documentation(tSumoOccupationalTrade,vEnglishLanguage,s("Any","#$Position","that","involves","skilled","manual","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237244).
lisp_trans(genls(tSumoProfession,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237348).
lisp_trans(disjointWith(tSumoProfession,tSumoOccupationalTrade),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237388).
lisp_trans(documentation(tSumoProfession,vEnglishLanguage,s("Any","occupation","that","requires","at","least","a","bachelor","'s","degree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237428).
lisp_trans(=>(and(or(tSumoOccupationalTrade(ROLE),tSumoProfession(ROLE)),holdsDuring(T1,sumoAttribute(HUMAN,ROLE))),exists([FIELD],and(tFieldOfStudy(FIELD),holdsDuring(T1,knows(HUMAN,FIELD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237546).
lisp_trans(documentation(tSumoGovernmentSecretary,vEnglishLanguage,s("This","#$Position","#$Attribute","describes","a","person","who","is","head","of","an","adminstrative","department","of","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':237838).
lisp_trans(actGovernmentPosition(tSumoGovernmentSecretary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238155).
lisp_trans(actGovernmentPosition(tSumoSecretaryOfTheInterior),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238218).
lisp_trans(subAttribute(tSumoSecretaryOfTheInterior,tSumoGovernmentSecretary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238284).
lisp_trans(documentation(tSumoSecretaryOfTheInterior,vEnglishLanguage,s("This","#$Position","#$Attribute","describes","the","head","of","the","#$UnitedStatesDepartmentOfInterior",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238355).
lisp_trans(actGovernmentPosition(tSumoSecretaryOfTheTreasury),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238837).
lisp_trans(subAttribute(tSumoSecretaryOfTheTreasury,tSumoGovernmentSecretary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238903).
lisp_trans(documentation(tSumoSecretaryOfTheTreasury,vEnglishLanguage,s("This","#$Position","#$Attribute","describes","the","head","of","the","United","States","Treasury","Department",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':238974).
lisp_trans(genls(tSumoStateGovernment,tSumoGovernment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239121).
lisp_trans(documentation(tSumoStateGovernment,vEnglishLanguage,s("The","class","of","#$Governments","whose","jurisdictions","are","#$StateOrProvinces",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239159).
lisp_trans(<=>(tSumoStateOrProvince(STATE),tSumoStateGovernment(iGroup_GovernmentFn(STATE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239703).
lisp_trans(genls(tGroupedCityGovernment,tSumoGovernment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239797).
lisp_trans(documentation(tGroupedCityGovernment,vEnglishLanguage,'CityGovernment is the class of  governments of #$Cities.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239834).
lisp_trans(<=>(tGroupedCity(C),tGroupedCityGovernment(iGroup_GovernmentFn(C))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':239942).
lisp_trans(genls(tSumoMilitaryService,tGroupedMilitaryOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':241436).
lisp_trans(documentation(tSumoMilitaryService,vEnglishLanguage,s("A","branch","of","the","armed","forces","of","a","#$Nation",".","For","example",",","there","are","five","military","services","in","the","United","States",",","the","army",",","the","navy",",","the","air","force",",","the","marines",",","and","the","coast","guard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':241484).
lisp_trans(genls(tSumoCoastGuard,actGovernmentOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':241719).
lisp_trans(documentation(tSumoCoastGuard,vEnglishLanguage,'CoastGuard is the subclass of #$GovernmentOrganizations  that enforce the maritime laws of a #$Nation and guard its #$Seacoast.  This may be  a military or quasi-military organization.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':241764).
lisp_trans(genls(tSumoArmy,tSumoMilitaryService),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':241997).
lisp_trans(documentation(tSumoArmy,vEnglishLanguage,'MilitaryServices that are land forces.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242029).
lisp_trans(genls(tGroupedAirForce,tSumoMilitaryService),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242110).
lisp_trans(documentation(tGroupedAirForce,vEnglishLanguage,'AirForce is the subclass of #$MilitaryService  that comprises military air forces.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242146).
lisp_trans(genls(tSumoMilitaryUnit,tGroupedMilitaryOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242275).
lisp_trans(documentation(tSumoMilitaryUnit,vEnglishLanguage,s("Any","#$MilitaryOrganization","that","can","be","dispatched","to","an","area","of","operations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242320).
lisp_trans(=>(actBattle(B),exists([U1,U2],and(tSumoMilitaryUnit(U1),tSumoMilitaryUnit(U2),not(equal(U1,U2)),agent(B,U1),agent(B,U2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242444).
lisp_trans(genls(tSumoMilitaryReserveForce,tGroupedMilitaryOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242651).
lisp_trans(documentation(tSumoMilitaryReserveForce,vEnglishLanguage,'MilitaryReserveForce is the subclass  of #$MilitaryOrganizations that consist of forces trained in military  procedures and activities, which are subject to being called to active duty  if needed.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242704).
lisp_trans(genls(tSumoMilitarySquad,tSumoMilitaryUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242959).
lisp_trans(documentation(tSumoMilitarySquad,vEnglishLanguage,s("Any","#$MilitaryUnit","with","the","rank","of","squad",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':242997).
lisp_trans(genls(tSumoMilitaryCorps,tSumoMilitaryUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243089).
lisp_trans(documentation(tSumoMilitaryCorps,vEnglishLanguage,s("Any","#$MilitaryUnit","with","the","rank","of","corps",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243127).
lisp_trans(genls(tSumoCavalryUnit,tSumoMilitaryUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243220).
lisp_trans(documentation(tSumoCavalryUnit,vEnglishLanguage,'MilitaryUnits composed primarily of #$Soldiers  who are mounted, i.e. who perform their combat missions from a #$Horse or  #$Vehicle.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243256).
lisp_trans(=>(and(tSumoCavalryUnit(C),actBattle(B),agent(B,C)),exists([P,V,T],and(sumoAttribute(P,mobSoldier),member(P,C),actTransportation(T),agent(T,P),tSumoVehicle(V),patient(T,V),during(T,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243438).
lisp_trans(genls(tSumoMilitarySurplus,tSumoMilitaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243733).
lisp_trans(documentation(tSumoMilitarySurplus,vEnglishLanguage,s("Any","#$MilitaryArtifact","which","is","sold","to","a","non","-","military","customer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243777).
lisp_trans(=>(tSumoMilitarySurplus(S),exists([A,B],and(actBuying(B),patient(B,A),not(tGroupedMilitaryOrganization(A)),not(member(A,tGroupedMilitaryOrganization))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':243894).
lisp_trans(documentation(hostileForces,vEnglishLanguage,s("(","hostileForces","?","UNIT1","?","UNIT2",")","means","that","the","#$MilitaryUnits","?","UNIT1","and","?","UNIT2","are",",","respectively",",","allied","with","#$GeopoliticalAreas","that","are","at","war","with","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244120).
lisp_trans(rtBinaryPredicate(hostileForces),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244334).
lisp_trans(rtIrreflexiveRelation(hostileForces),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244375).
lisp_trans(rtPartialValuedRelation(hostileForces),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244420).
lisp_trans(argIsa(hostileForces,1,tSumoMilitaryUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244467).
lisp_trans(argIsa(hostileForces,2,tSumoMilitaryUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244505).
lisp_trans(=>(hostileForces(U1,U2),exists([W,A1,A2],and(actWar(WAR),contestParticipant(W,A1),contestParticipant(W,A2),subOrganization(U1,iGroup_GovernmentFn(A1)),subOrganization(U2,iGroup_GovernmentFn(A2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244544).
lisp_trans(genls(tSumoCommission,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244798).
lisp_trans(documentation(tSumoCommission,vEnglishLanguage,s("A","small",",","temporary","#$Organization","whose","purpose","is","to","investigate","some","issue",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244833).
lisp_trans(=>(tSumoCommission(COMMISSION),hasPurpose(COMMISSION,exists([INVESTIGATE,ISSUE],and(actInvestigating(INVESTIGATE),patient(INVESTIGATE,ISSUE),agent(INVESTIGATE,COMMISSION))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':244958).
lisp_trans(genls(tGroupedServiceOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245296).
lisp_trans(documentation(tGroupedServiceOrganization,vEnglishLanguage,s("An","#$Organization","that","performs","a","public","service","and","is","regulated","by","the","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245340).
lisp_trans(=>(tGroupedServiceOrganization(ORG),exists([PROC,GOV],and(actRegulatoryProcess(PROC),patient(PROC,ORG),agent(PROC,GOV),tSumoGovernment(GOV)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245483).
lisp_trans(genls(tSumoLibrary,tGroupedEducationalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245704).
lisp_trans(documentation(tSumoLibrary,vEnglishLanguage,s("An","#$EducationalOrganization","which","is","a","repository","of","#$Texts","which","have","been","classified","for","efficient","retrieval",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245747).
lisp_trans(=>(tSumoLibrary(L),exists([B,T],and(possesses(L,B),tPlaceLikeBuilding(B),tSumoText(T),located(T,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':245905).
lisp_trans(genls(tGroupedPublicLibrary,tSumoLibrary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246064).
lisp_trans(genls(tGroupedPublicLibrary,actGovernmentOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246097).
lisp_trans(documentation(tGroupedPublicLibrary,vEnglishLanguage,s("A","#$Library","which","is","financed","by","taxes","and","which","is","open","to","everyone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246145).
lisp_trans(genls(tSumoMuseum,tGroupedEducationalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246265).
lisp_trans(documentation(tSumoMuseum,vEnglishLanguage,s("An","#$EducationalOrganization","where","#$Artifacts","of","historic",",","scientific","or","aesthetic","value","are","collected","and","exhibited",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246307).
lisp_trans(genls(tSumoArtMuseum,tSumoMuseum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246470).
lisp_trans(documentation(tSumoArtMuseum,vEnglishLanguage,s("An","art","museum","is","a","building","or","space","for","the","exhibition","of","art",",","usually","visual","art",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246498).
lisp_trans(=>(tSumoArtMuseum(M),exists([B,A],and(possesses(M,B),tPlaceLikeBuilding(B),tSumoArtWork(A),located(A,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246627).
lisp_trans(genls(tSumoOrganizationalBoard,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246836).
lisp_trans(documentation(tSumoOrganizationalBoard,vEnglishLanguage,s("Part","of","an","#$Organization","that","is","responsible","for","managing","the","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':246880).
lisp_trans(=>(tSumoOrganizationalBoard(BOARD),exists([ORG,MANAGE],and(subOrganization(BOARD,ORG),actManaging(MANAGE),agent(MANAGE,BOARD),patient(MANAGE,ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247015).
lisp_trans(genls(tSumoSecurityUnit,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247241).
lisp_trans(documentation(tSumoSecurityUnit,vEnglishLanguage,s("The","#$Organization","that","is","charged","with","ensuring","the","security","of","members","of","the","overall","#$Organization","and","the","property","of","the","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247278).
lisp_trans(=>(and(tSumoSecurityUnit(UNIT),subOrganization(UNIT,ORG)),holdsObligation(exists([MAINTAIN],and(actMaintaining(MAINTAIN),agent(MAINTAIN,UNIT),patient(MAINTAIN,ORG))),UNIT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247471).
lisp_trans(genls(actUnionOrganization,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247726).
lisp_trans(documentation(actUnionOrganization,vEnglishLanguage,s("An","#$Organization","comprised","of","workers","from","the","same","#$Corporation","or","#$Industry",".","The","purpose","of","the","#$UnionOrganization","is","to","strengthen","its","representation","in","bargaining","with","the","#$Corporation","or","#$Industry",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':247768).
lisp_trans(=>(actUnionOrganization(ORG),exists([COLL],=>(member(MEMBER,ORG),or(and(actCorporation(COLL),employs(COLL,MEMBER)),exists([CORP],and(tSumoIndustry(COLL),member(CORP,COLL),employs(CORP,MEMBER))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248034).
lisp_trans(genls(tOrganicCompound,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248430).
lisp_trans(documentation(tOrganicCompound,vEnglishLanguage,s("Any","#$CompoundSubstance","that","has","a","#$Carbon","base",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248475).
lisp_trans(=>(and(tOrganicCompound(COMPOUND),tMolecule(COMPOUND)),exists([CARBON],and(tCarbon(CARBON),part(CARBON,COMPOUND)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248577).
lisp_trans(genls(tUrea,tOrganicCompound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248774).
lisp_trans(documentation(tUrea,vEnglishLanguage,s("Urea","is","a","dry",",","soluble",",","nitrogenous","substance","that","is","the","major","solid","component","of","the","urine","of","mammals",",","and","which","may","be","synthesized","from","ammonia","and","carbon","dioxide",",","it","is","useful","in","the","production","of","#$Plastic","and","in","#$Fertilizers",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':248806).
lisp_trans(genls(tSteroid,tOrganicCompound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249083).
lisp_trans(genls(tSteroid,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249118).
lisp_trans(documentation(tSteroid,vEnglishLanguage,s("A","class","of","#$OrganicCompounds","having","the","same","basic","chemical","structure","and","having","significant","physiological","effects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249165).
lisp_trans(genls(tHydrocarbon,tOrganicCompound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249326).
lisp_trans(documentation(tHydrocarbon,vEnglishLanguage,s("Any","#$OrganicCompound","that","contains","only","#$Carbon","and","#$Hydrogen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249365).
lisp_trans(=>(tHydrocarbon(S),exists([P1,P2],and(equal(S,uMereologicalSumFn(P1,P2)),tCarbon(P1),tHydrogen(P2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249479).
lisp_trans(genls(tSumoAlcohol,tOrganicCompound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249647).
lisp_trans(documentation(tSumoAlcohol,vEnglishLanguage,'OrganicCompounds that are produced from hydrocarbons  by distillation.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249682).
lisp_trans(genls(tAlkaloid,tSumoChemicalBase),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249798).
lisp_trans(genls(tAlkaloid,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249831).
lisp_trans(genls(tAlkaloid,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249866).
lisp_trans(documentation(tAlkaloid,vEnglishLanguage,s("A","#$ChemicalBase","found","in","#$Plants","that","has","physiological","and","psychological","effects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':249914).
lisp_trans(=>(tAlkaloid(A),exists([N],and(tNitrogen(N),part(N,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250043).
lisp_trans(vtConsciousnessAttribute(tSumoDrugged),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250158).
lisp_trans(contraryAttribute(tSumoDrugged,tSumoSober),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250200).
lisp_trans(documentation(tSumoDrugged,vEnglishLanguage,s("The","#$ConsciousnessAttribute","of","someone","whose","motor","and","/","or","cognitive","faculties","are","significantly","impaired","by","a","#$BiologicallyActiveSubstance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250234).
lisp_trans(=>(holdsDuring(T,sumoAttribute(P,tSumoDrugged)),holdsDuring(T,exists([B],and(tSumoBiologicallyActiveSubstance(B),part(B,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250420).
lisp_trans(subAttribute(mobDrunk,tSumoDrugged),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250594).
lisp_trans(documentation(mobDrunk,vEnglishLanguage,s("The","#$ConsciousnessAttribute","of","someone","whose","motor","and","cognitive","faculties","are","significantly","impaired","by","#$Alcohol",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250623).
lisp_trans(=>(holdsDuring(TIME,sumoAttribute(PERSON,mobDrunk)),exists([PAST],and(temporalPart(PAST,tColOfPastFn(TIME)),holdsDuring(PAST,exists([DRINK,ALCOHOL],and(actDrinking(DRINK),patient(DRINK,ALCOHOL),tObjectAlcoholicBeverage(ALCOHOL),agent(DRINK,PERSON))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':250782).
lisp_trans(=>(holdsDuring(T,sumoAttribute(P,mobDrunk)),holdsDuring(T,exists([B],and(tSumoAlcohol(B),part(B,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251147).
lisp_trans(genls(tAminoAcid,tSumoChemicalAcid),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251299).
lisp_trans(genls(tAminoAcid,tOrganicCompound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251333).
lisp_trans(documentation(tAminoAcid,vEnglishLanguage,s("Organic","acids","that","are","the","building","blocks","of","#$Proteins",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251370).
lisp_trans(=>(tSumoProtein(P),exists([A],and(tAminoAcid(A),part(A,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251473).
lisp_trans(genls(tCholesterol,tSteroid),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251578).
lisp_trans(genls(tCholesterol,tSumoAnimalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251609).
lisp_trans(documentation(tCholesterol,vEnglishLanguage,s("A","#$Steroid","that","is","produced","by","the","#$Liver","and","that","is","believed","to","be","closely","associated","with","various","cardiological","disorders",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251648).
lisp_trans(=>(tCholesterol(S),exists([P,L],and(eventBiologicalProcess(P),eventLocated(P,L),tPartTypeLiver(L),result(P,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251823).
lisp_trans(genls(tSumoChemicalAcid,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':251998).
lisp_trans(disjointWith(tSumoChemicalAcid,tSumoChemicalBase),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252040).
lisp_trans(documentation(tSumoChemicalAcid,vEnglishLanguage,s("A","bitter","#$CompoundSubstance","that","is","capable","of","reacting","with","a","#$ChemicalBase","and","forming","a","#$ChemicalSalt",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252077).
lisp_trans(=>(and(tSumoChemicalAcid(CA),tSumoChemicalBase(CB),eventChemicalProcess(C),patient(C,CA),patient(C,CB)),exists([CS],and(tSumoChemicalSalt(CS),result(C,CS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252234).
lisp_trans(genls(tSumoChemicalBase,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252472).
lisp_trans(documentation(tSumoChemicalBase,vEnglishLanguage,s("A","#$CompoundSubstance","that","is","capable","of","reacting","with","a","#$ChemicalAcid","and","forming","a","#$ChemicalSalt",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252514).
lisp_trans(genls(tSumoChemicalSalt,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252665).
lisp_trans(documentation(tSumoChemicalSalt,vEnglishLanguage,s("A","bitter","#$CompoundSubstance","that","is","formed","in","a","chemical","reaction","of","a","#$ChemicalBase","with","a","#$ChemicalAcid",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252707).
lisp_trans(genls(tSumoSodiumChloride,tSumoChemicalSalt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252866).
lisp_trans(names("salt",tSumoSodiumChloride),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252905).
lisp_trans(names("NaCl",tSumoSodiumChloride),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252935).
lisp_trans(documentation(tSumoSodiumChloride,vEnglishLanguage,'SodiumChloride is the compound of #$Sodium and #$Chloride, which may appear in crystalline form or in solution with water or other substances. It is a compound found in solution in significant quantities in sea water.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':252966).
lisp_trans(=>(tSumoSodiumChloride(SALT),exists([SYNTHESIS,SODIUM,CHLORINE],and(actChemicalSynthesis(SYNTHESIS),resource(SYNTHESIS,SODIUM),tSodium(SODIUM),resource(SYNTHESIS,CHLORINE),tChlorine(CHLORINE),result(SYNTHESIS,SALT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253236).
lisp_trans(genls(tDiamond,tMineral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253570).
lisp_trans(genls(tDiamond,tCarbon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253597).
lisp_trans(documentation(tDiamond,vEnglishLanguage,s("Crystalline","#$Carbon","that","is","valued","as","a","gem","and","used","in","industrial","applications",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253623).
lisp_trans(genls(actSalineSolution,tSolution),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253749).
lisp_trans(documentation(actSalineSolution,vEnglishLanguage,s("A","#$Solution","consisting","of","#$SodiumChloride","and","#$Water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253784).
lisp_trans(=>(and(actSalineSolution(SOLUTION),part(PART,SOLUTION)),or(tSumoSodiumChloride(PART),tWater(PART))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':253892).
lisp_trans(=>(tWater(WATER),exists([SYNTHESIS,HYDROGEN,OXYGEN],and(actChemicalSynthesis(SYNTHESIS),resource(SYNTHESIS,HYDROGEN),tHydrogen(HYDROGEN),resource(SYNTHESIS,OXYGEN),tOxygen(OXYGEN),result(SYNTHESIS,WATER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254053).
lisp_trans(documentation(reactant,vEnglishLanguage,s("(","reactant","?","PROCESS","?","SUBSTANCE",")","means","that","?","SUBSTANCE","is","a","chemical","reactant","in","the","chemical","reaction","?","PROCESS",",","i",".","e",".","?","SUBSTANCE","is","present","at","the","beginning","of","the","chemical","reaction","?","PROCESS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254380).
lisp_trans(argIsa(reactant,1,eventChemicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254615).
lisp_trans(argIsa(reactant,2,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254651).
lisp_trans(genlPreds(reactant,resource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254681).
lisp_trans(rtCaseRole(reactant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254713).
lisp_trans(documentation(reagent,vEnglishLanguage,s("(","reagent","?","PROCESS","?","SUBSTANCE",")","means","that","?","SUBSTANCE","is","a","chemical","agent","in","the","chemical","reaction","?","PROCESS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254744).
lisp_trans(argIsa(reagent,1,eventChemicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254894).
lisp_trans(argIsa(reagent,2,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254929).
lisp_trans(genlPreds(reagent,instrument),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254958).
lisp_trans(rtCaseRole(reagent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':254991).
lisp_trans(genls(tOil,tSolution),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255020).
lisp_trans(documentation(tOil,vEnglishLanguage,s("A","greasy",",","viscous","#$Solution","that","cannot","be","mixed","with","#$Water",".","Note","that","this","general","class","covers","petroleum","oil",",","vegetable","oil",",","animal","fat",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255044).
lisp_trans(=>(tOil(OIL),not(exists([MIX,WATER],and(tMixture(MIX),part(WATER,MIX),tWater(WATER),part(OIL,MIX))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255232).
lisp_trans(genls(tSurfactant,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255425).
lisp_trans(documentation(tSurfactant,vEnglishLanguage,s("Surfactants",",","also","known","as","#$Wetting","agents",",","lower","the","surface","tension","of","a","#$Liquid",",","allowing","easier","spreading",".","The","term","surfactant","is","a","compression","of","'","Surface","active","agent","'",".","Surfactants","are","usually","organic","compounds","that","contain","both","hydrophobic","and","hydrophilic","groups",",","and","are","thus","semi","-","soluble","in","both","organic","and","aqueous","solvents",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255458).
lisp_trans(genls(tSumoDetergent,tSurfactant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255849).
lisp_trans(genls(tSumoDetergent,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255881).
lisp_trans(documentation(tSumoDetergent,vEnglishLanguage,s("A","detergent","is","a","compound",",","or","a","mixture","of","compounds",",","whose","molecules","have","two","distinct","regions",":","one","that","is","hydrophilic",",","and","dissolves","easily","in","water",",","and","another","region","that","is","hydrophobic",",","with","little","(","if","any",")","affinity","for","water",".","As","a","consequence",",","these","compounds","can","aid","in","the","solubilization","of","hydrophobic","compounds","in","water",",","and","usually","are","optimized","for","this","property",".","Though","#$Soap","also","has","these","properties",",","soaps","in","general","are","not","considered","detergents",".","#$Soap","is","a","particular","type","of","surfactant","that","is","derived","from","oils","and","fats",".","They","are","created","through","the","saponification","process","whereby","the","ester","linkage","in","a","vegetable","oil","or","fat","is","hydrolytically","cleaved",",","creating","a","sodium","or","potassium","salt","of","a","fatty","acid","(","i",".","e",".","soap",")",".","Both","detergents","and","soaps","are","considered","to","be","surfactants",".","#$Surfactants","that","are","not","soaps","are","considered","to","be","detergents",".","Detergents","are","also","commonly","known","as","any","cleaning","mixture","containing","surfactants",".","(","from","Wikipedia",")")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':255910).
lisp_trans(=>(tSumoDetergent(DETERGENT),hasPurpose(DETERGENT,exists([REMOVE,SUBSTANCE,SURFACE,OBJECT],and(actRemoving(REMOVE),tSumoSubstance(SUBSTANCE),patient(REMOVE,SUBSTANCE),origin(REMOVE,SURFACE),surface(SURFACE,OBJECT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':256945).
lisp_trans(genls(actBathing,actWashing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257257).
lisp_trans(documentation(actBathing,vEnglishLanguage,'Washing the entire body of a #$Human or #$Animal.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257284).
lisp_trans(=>(and(actBathing(B),patient(B,A)),tClazzAnimal(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257378).
lisp_trans(genls(tSumoBathingDevice,tSumoWashingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257461).
lisp_trans(documentation(tSumoBathingDevice,vEnglishLanguage,s("A","#$WashingDevice","which","is","intended","to","be","used","by","Humans","for","washing","their","bodies",".","Note","that","this","class","covers","bathtubs",",","showers",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257500).
lisp_trans(=>(tSumoBathingDevice(BD),hasPurpose(BD,exists([B,P],and(actBathing(B),instrument(B,BD),patient(B,PERSON),tSumoHuman(P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257686).
lisp_trans(genls(tSumoWashBasin,tSumoWashingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257891).
lisp_trans(documentation(tSumoWashBasin,vEnglishLanguage,s("A","#$WashingDevice","which","is","intended","to","be","used","by","#$Humans","for","washing","their","#$Hands",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':257926).
lisp_trans(=>(tSumoWashBasin(B),hasPurpose(B,exists([W,H],and(actWashing(W),instrument(W,B),patient(W,H),tPartTypeHand(H))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258058).
lisp_trans(genls(tObjectGlue,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258250).
lisp_trans(genls(tObjectGlue,tSumoAttachingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258274).
lisp_trans(documentation(tObjectGlue,vEnglishLanguage,s("Any","#$Mixture","whose","purpose","is","to","be","used","as","the","#$instrument","of","#$Attaching","one","thing","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258306).
lisp_trans(=>(tObjectGlue(GLUE),hasPurpose(GLUE,exists([ATTACH],and(actAttaching(ATTACH),instrument(ATTACH,GLUE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258446).
lisp_trans(genls(tGlass,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258670).
lisp_trans(documentation(tGlass,vEnglishLanguage,s("A","transparent","or","translucent","#$Mixture","of","silicates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258695).
lisp_trans(genls(tSumoMetallicAlloy,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258789).
lisp_trans(documentation(tSumoMetallicAlloy,vEnglishLanguage,s("A","#$Mixture","of","two","or","more","#$Metals",",","and","possibly","nonmetallic","elements","as","well",".","For","example",",","steel","is","an","alloy","containing","iron","and","manganese",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':258822).
lisp_trans(=>(tSumoMetallicAlloy(ALLOY),exists([METAL1,METAL2],and(tMetal(METAL1),tMetal(METAL2),not(equal(METAL1,METAL2)),part(METAL1,ALLOY),part(METAL2,ALLOY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259016).
lisp_trans(genls(tObjectSteel,tSumoMetallicAlloy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259268).
lisp_trans(documentation(tObjectSteel,vEnglishLanguage,s("A","#$MetallicAlloy","made","from","#$Iron","and","other","elements",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259299).
lisp_trans(=>(tObjectSteel(STEEL),exists([IRON],and(tIron(IRON),part(IRON,STEEL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259395).
lisp_trans(genls(tObjectBrass,tSumoMetallicAlloy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259520).
lisp_trans(documentation(tObjectBrass,vEnglishLanguage,s("A","#$MetallicAlloy","made","from","#$Copper","and","#$Zinc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259551).
lisp_trans(=>(tObjectBrass(BRASS),exists([COPPER,ZINC],and(tCopper(COPPER),tZinc(ZINC),part(COPPER,BRASS),part(ZINC,BRASS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259641).
lisp_trans(genls(tGroupedPowder,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259840).
lisp_trans(documentation(tGroupedPowder,vEnglishLanguage,s("Any","#$Solid","#$Substance","which","consists","of","loose",",","identical",",","and","very","small","particles",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259868).
lisp_trans(=>(tGroupedPowder(POWDER),sumoAttribute(POWDER,tSumoSolid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':259997).
lisp_trans(genls(tSumoFallout,tGroupedPowder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260061).
lisp_trans(documentation(tSumoFallout,vEnglishLanguage,s("Radioactive","powder","that","is","typically","dispersed","by","the","explosion","of","a","nuclear","weapon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260087).
lisp_trans(=>(tSumoFallout(POWDER),capability(tSumoRadiatingNuclear,instrument,POWDER)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260216).
lisp_trans(genls(tFog,tSumoWaterCloud),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260305).
lisp_trans(documentation(tFog,vEnglishLanguage,s("Any","#$WaterCloud","that","is","in","contact","with","the","ground",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260331).
lisp_trans(=>(tFog(FOG),exists([LAND],and(tSumoLandArea(LAND),meetsSpatially(FOG,LAND)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260423).
lisp_trans(genls(tSumoIce,tWater),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260556).
lisp_trans(documentation(tSumoIce,vEnglishLanguage,'Water that has the #$PhysicalState of #$Solid.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260577).
lisp_trans(<=>(tSumoIce(ICE),and(tWater(ICE),sumoAttribute(ICE,tSumoSolid))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260665).
lisp_trans(=>(and(tSumoIce(ICE),measure(ICE,uMeasureFn(NUMBER,vtCelsiusDegree))),lessThanOrEqualTo(NUMBER,0)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260761).
lisp_trans(genls(tSumoField,tSumoLandArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260890).
lisp_trans(documentation(tSumoField,vEnglishLanguage,s("A","#$LandArea","that","has","been","cleared","of","#$BotanicalTrees",".","Note","that","a","#$Field","is","not","necessarily","used","for","the","cultivation","of","crops","and","that","a","#$Field","may","be","very","small",",","e",".","g",".","#$Lawn","is","a","subclass","of","#$Field",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':260916).
lisp_trans(=>(tSumoField(FIELD),not(exists([TREE],and(tSumoBotanicalTree(TREE),located(TREE,FIELD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261165).
lisp_trans(genls(tGroupedLawn,tSumoField),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261308).
lisp_trans(documentation(tGroupedLawn,vEnglishLanguage,s("A","#$Field","of","cultivated","and","mowed","#$Grass",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261330).
lisp_trans(=>(tGroupedLawn(L),exists([G],and(tSumoGrass(G),located(G,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261413).
lisp_trans(genls(tSumoMilitaryFront,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261514).
lisp_trans(documentation(tSumoMilitaryFront,vEnglishLanguage,s("A","#$GeographicArea","along","which","opposing","military","forces","confront","one","another","in","a","#$Battle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261554).
lisp_trans(=>(holdsDuring(TIME,tSumoMilitaryFront(AREA)),exists([BATTLE],and(actBattle(BATTLE),eventLocated(BATTLE,AREA),temporalPart(TIME,BATTLE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261696).
lisp_trans(sumo_partition(tPlaceLikeRegion,tSumoGeographicArea,tSpaceRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':261901).
lisp_trans(genls(tSumoAtmosphericRegion,tSpaceRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263118).
lisp_trans(documentation(tSumoAtmosphericRegion,vEnglishLanguage,'AtmosphericRegion is the class of  all subregions of #$EarthsAtmosphere.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263159).
lisp_trans(genls(tSumoStreamWaterArea,tSumoWaterArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263706).
lisp_trans(genls(tSumoStreamWaterArea,tSumoFlowRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263743).
lisp_trans(disjointWith(tSumoStreamWaterArea,tSumoStaticWaterArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263781).
lisp_trans(documentation(tSumoStreamWaterArea,vEnglishLanguage,s("A","relatively","narrow","#$WaterArea","where","the","water","flows","constantly","and","in","the","same","direction",",","e",".","g",".","a","river",",","a","stream",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263824).
lisp_trans(genls(tSumoStaticWaterArea,tSumoWaterArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':263998).
lisp_trans(documentation(tSumoStaticWaterArea,vEnglishLanguage,s("A","#$WaterArea","in","which","water","does","not","flow","constantly","or","in","the","same","direction",",","e",".","g",".","most","lakes","and","ponds",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':264035).
lisp_trans(genls(tSumoFlowRegion,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':264194).
lisp_trans(documentation(tSumoFlowRegion,vEnglishLanguage,'FlowRegion is a class of things whose  boundaries are relatively stable but whose constitutive #$material is continuously moving  through the region itself and being replaced by  other, similar material.  Each #$FlowRegion is constituted by a stream  of matter moving as a whole.  A #$FlowRegion may be liquid or gaseous.   A wind may be considered as a #$Process or as a #$FlowRegion, similarly  an OceanCurrent or a #$WaterWave.  The motion process associated with a  #$FlowRegion F is denoted by (#$FlowFn F).  Note that certain  properties belong to the #$FlowRegion itself (e.g., mass, length, volume,  temperature, and speed or velocity of the region moving as a whole),  while other properties of interest belong to the #$Motion of its  constitutive stuff (e.g., velocity, direction).  The motion of  a #$FlowRegion as a whole (e.g., #$JetStream moves within the atmosphere)  is distinguished from the motion of the #$pieces of stuff constituting the  #$FlowRegion.  See #$FlowFn and #$FlowRegionFn.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':264224).
lisp_trans(=>(and(tSumoFlowRegion(FR),located(FLUID,FR)),sumoAttribute(FLUID,tSumoFluid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265279).
lisp_trans(genls(tSpaceRegion,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265375).
lisp_trans(disjointWith(tSpaceRegion,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265405).
lisp_trans(sumo_partition(tSpaceRegion,tSumoAtmosphericRegion,tPlaceLikeOuterSpaceRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265443).
lisp_trans(documentation(tSpaceRegion,vEnglishLanguage,s("The","class","of","all","#$Regions","which","are","not","#$GeographicAreas",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265502).
lisp_trans(genls(tPlaceLikeOuterSpaceRegion,tSpaceRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265610).
lisp_trans(documentation(tPlaceLikeOuterSpaceRegion,vEnglishLanguage,s("The","class","of","all","#$Regions","which","are","neither","#$GeographicAreas","nor","#$AtmosphericRegions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265650).
lisp_trans(genls(tSumoStormFront,tSumoAtmosphericRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265792).
lisp_trans(documentation(tSumoStormFront,vEnglishLanguage,s("The","#$Region","where","two","or","more","unstable","air","masses","meet",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265832).
lisp_trans(=>(tSumoStormFront(FRONT),exists([AIR1,AIR2],and(tAir(AIR1),tAir(AIR2),cycBetween(AIR1,FRONT,AIR2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':265936).
lisp_trans(vtPositionalAttribute(tSumoInside),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266110).
lisp_trans(documentation(tSumoInside,vEnglishLanguage,'Inside is a #$PositionalAttribute used to  describe the relative location of one object or region to another  region.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266148).
lisp_trans(=>(tSumoInside(INSIDE),exists([OBJECT],all([THING],=>(located(THING,INSIDE),exists([PART],and(interiorPart(PART,OBJECT),located(THING,PART))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266458).
lisp_trans(vtPositionalAttribute(tSumoOutside),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266705).
lisp_trans(contraryAttribute(tSumoInside,tSumoOutside),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266744).
lisp_trans(documentation(tSumoOutside,vEnglishLanguage,'Outside is a #$PositionalAttribute used to  describe the relative location of one object or region to another  region. '),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':266779).
lisp_trans(=>(orientation(OBJ,REGION,tSumoOutside),tPlaceLikeRegion(REGION)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267089).
lisp_trans(=>(orientation(OBJ,REGION,tSumoInside),tPlaceLikeRegion(REGION)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267160).
lisp_trans(<=>(orientation(OBJ,REGION,tSumoOutside),not(partlyLocated(OBJ,REGION))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267230).
lisp_trans(=>(part(OBJ,REGION),not(orientation(OBJ,REGION,tSumoOutside))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267316).
lisp_trans(genls(tSumoOutdoors,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267392).
lisp_trans(documentation(tSumoOutdoors,vEnglishLanguage,s("Any","#$Region","which","is","not","enclosed","by","a","#$Building","or","part","of","a","#$Building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267419).
lisp_trans(=>(tSumoOutdoors(OUTDOORS),not(exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),orientation(OUTDOORS,BUILDING,tSumoInside))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267540).
lisp_trans(genls(tSumoIndoors,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267716).
lisp_trans(disjointWith(tSumoIndoors,tSumoOutdoors),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267742).
lisp_trans(documentation(tSumoIndoors,vEnglishLanguage,s("Any","#$Region","which","is","enclosed","by","a","#$Building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267770).
lisp_trans(=>(tSumoIndoors(INDOORS),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),orientation(INDOORS,BUILDING,tSumoInside)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':267861).
lisp_trans(genls(tTypeOfBiologicalSpecies,tSet),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268017).
lisp_trans(documentation(tTypeOfBiologicalSpecies,vEnglishLanguage,s("The","#$Class","of","all","biological","species",",","i",".","e",".","the","class","of","all","classes","of","#$Organism","whose","instances","can","interbreed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268052).
lisp_trans(=>(tTypeOfBiologicalSpecies(SPECIES),genls(SPECIES,tSumoOrganism)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268221).
lisp_trans(genls(tWood,tSumoTissue),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268300).
lisp_trans(genls(tWood,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268323).
lisp_trans(documentation(tWood,vEnglishLanguage,'Tissue that comprises the inner trunk of #$BotanicalTrees.   It is often used in constructing #$Buildings and other #$Artifacts. Wood is the principal substance making up a tree, and is distinguished from the bark, roots, flowers, seeds, fruit and leaves.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268354).
lisp_trans(=>(tWood(X),exists([CELL],and(tCellulose(CELL),part(CELL,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268652).
lisp_trans(relatedInternalConcept(tWood,tSumoWoodArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268769).
lisp_trans(genls(tSumoWoodArtifact,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268812).
lisp_trans(documentation(tSumoWoodArtifact,vEnglishLanguage,'Wood that has been cut (and perhaps treated) for  some purpose, e.g. #$Constructing or #$Combustion.  Note that this class covers  both lumber and firewood.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':268845).
lisp_trans(=>(tSumoWoodArtifact(W),material(tWood,W)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269052).
lisp_trans(genls(tSumoOakWood,tSumoWoodArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269108).
lisp_trans(documentation(tSumoOakWood,vEnglishLanguage,s("Any","#$WoodArtifact","that","is","made","from","the","#$Wood","of","an","oak","tree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269140).
lisp_trans(genls(tRubber,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269248).
lisp_trans(genls(tRubber,tSumoBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269281).
lisp_trans(genls(tRubber,tHydrocarbon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269313).
lisp_trans(documentation(tRubber,vEnglishLanguage,s("Natural","rubber",",","as","opposed","to","synthetic","rubber","which","is","a","#$Plastic",",","is","a","product","of","the","rubber","tree",",","genus","Hevea","or","Ficus",".","It","is","the","coagulated","form","of","the","milky","juice","secreted","by","these","trees",".","Rubber","is","essentially","a","polymer","of","isoprene",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269343).
lisp_trans(=>(tRubber(R),exists([T],and(tSumoBotanicalTree(T),part(R,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269627).
lisp_trans(genls(tObjectPlastic,tHydrocarbon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269735).
lisp_trans(documentation(tObjectPlastic,vEnglishLanguage,s("Any","of","a","large","set","of","hydrocarbon","materials",",","in","the","form","of","polymers",",","which","are","usually","derived","from","#$Petroleum","products",".","Plastics","have","a","tremendous","variety","of","material","properties","including","a","wide","range","of","values","for","opacity",",","density",",","ductility","etc",".","and","are","pervasive","in","modern","#$Manufacture","(","-","ing",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':269766).
lisp_trans(genls(tObjectPolypropylene,tObjectPlastic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':270115).
lisp_trans(documentation(tObjectPolypropylene,vEnglishLanguage,s("Polypropylene","(","PP",")",",","also","known","as","polypropene",",","is","a","thermoplastic","polymer","used","in","a","wide","variety","of","applications","including","packaging","and","labeling",",","textiles","(","e",".","g",".",",","ropes",",","thermal","underwear","and","carpets",")",",","stationery",",","plastic","parts","and","reusable","containers","of","various","types",",","laboratory","equipment",",","loudspeakers",",","automotive","components",",","and","polymer","banknotes",".","An","addition","polymer","made","from","the","monomer","propylene",",","it","is","rugged","and","unusually","resistant","to","many","chemical","solvents",",","bases","and","acids",".","(","Wikipedia",")")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':270148).
lisp_trans(genls(tSumoPolystyrene,tObjectPlastic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':270694).
lisp_trans(documentation(tSumoPolystyrene,vEnglishLanguage,s("Polystyrene","(","PS",")","is","a","synthetic","aromatic","polymer","made","from","the","monomer","styrene",",","a","liquid","petrochemical",".","Polystyrene","can","be","rigid","or","foamed",".","General","purpose","polystyrene","is","clear",",","hard","and","brittle",".","It","is","a","very","inexpensive","resin","per","unit","weight",".","It","is","a","rather","poor","barrier","to","oxygen","and","water","vapor","and","has","relatively","low","melting","point",".","Polystyrene","can","be","naturally","transparent",",","but","can","be","colored","with","colorants",".","Uses","include","protective","packaging",".","As","a","thermoplastic","polymer",",","polystyrene","is","in","a","solid","(","glassy",")","state","at","room","temperature","but","flows","if","heated","above","about","100","degree","Celsius",",","its","glass","transition","temperature",".","It","becomes","rigid","again","when","cooled",".","This","temperature","behavior","is","exploited","for","extrusion",",","and","also","for","molding","and","vacuum","forming",".","(","Wikipedia",")")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':270725).
lisp_trans(genls(tCellulose,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271537).
lisp_trans(genls(tCellulose,tSumoCarbohydrate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271573).
lisp_trans(documentation(tCellulose,vEnglishLanguage,s("The","main","component","of","#$Plant","#$Tissue",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271607).
lisp_trans(genls(tStarch,tSumoCarbohydrate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271692).
lisp_trans(documentation(tStarch,vEnglishLanguage,s("A","complex","#$Carbohydrate","that","is","the","main","form","in","which","#$Carbohydrates","are","stored",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271723).
lisp_trans(genls(tSugar,tSumoCarbohydrate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271850).
lisp_trans(documentation(tSugar,vEnglishLanguage,s("A","simple","#$Carbohydrate","that","has","a","sweet","taste","and","consists","mostly","or","entirely","of","sucrose",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':271880).
lisp_trans(genls(tNectar,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272013).
lisp_trans(documentation(tNectar,vEnglishLanguage,s("A","sweet",",","sticky","liquid","that","is","produced","by","#$Plants","and","that","attracts","Insects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272046).
lisp_trans(genls(tSumoMedicine,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272168).
lisp_trans(documentation(tSumoMedicine,vEnglishLanguage,s("Any","#$BiologicallyActiveSubstance","which","has","a","therapeutic","effect","under","certain","conditions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272216).
lisp_trans(=>(tSumoMedicine(M),exists([P],and(actTherapeuticProcess(P),instrument(P,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272352).
lisp_trans(genls(tStimulant,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272473).
lisp_trans(disjointWith(tStimulant,tDepressant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272522).
lisp_trans(documentation(tStimulant,vEnglishLanguage,s("Any","#$BiologicallyActiveSubstance","which","has","the","effect","of","stimulating","the","central","nervous","system",",","i",".","e",".","increasing","function","or","activity","in","the","#$Brain","or","#$SpinalCord",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272554).
lisp_trans(genls(tDepressant,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272768).
lisp_trans(documentation(tDepressant,vEnglishLanguage,s("Any","#$BiologicallyActiveSubstance","which","has","the","effect","of","depressing","the","central","nervous","system",",","i",".","e",".","decreasing","function","or","activity","in","the","#$Brain","or","#$SpinalCord",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':272818).
lisp_trans(genls(tOpium,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273032).
lisp_trans(genls(tOpium,tSumoPlantSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273077).
lisp_trans(documentation(tOpium,vEnglishLanguage,s("A","substance","harvested","from","the","seed","capsules","of","the","opium","poppy","that","contains","various","powerful","alkaloids",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273109).
lisp_trans(genls(tOpium,tDepressant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273256).
lisp_trans(=>(tOpium(O),exists([A],and(tAlkaloid(A),part(A,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273285).
lisp_trans(genls(tSumoGrass,tClazzFloweringPlant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273387).
lisp_trans(documentation(tSumoGrass,vEnglishLanguage,'FloweringPlants with green, narrow leaves that are  used for lawns and #$Fields. #$Grass includes any plant of the family  Gramineae, a widely distributed group of mostly annual and perennial  herbs.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273419).
lisp_trans(genls(tClazzLilac,tClazzFloweringPlant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273662).
lisp_trans(documentation(tClazzLilac,vEnglishLanguage,s("A","#$FloweringPlant","that","has","large","clusters","of","aromatic","flowers",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273694).
lisp_trans(genls(tTobacco,tClazzFloweringPlant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273800).
lisp_trans(documentation(tTobacco,vEnglishLanguage,s("A","#$FloweringPlant","containing","nicotine","whose","leaves","are","dried","and","then","smoked","or","ingested",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273834).
lisp_trans(genls(tSumoLesion,tSumoAbnormalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':273969).
lisp_trans(documentation(tSumoLesion,vEnglishLanguage,s("Any","#$AbnormalAnatomicalStructure","which","is","the","result","of","an","Injuring","and","which","is","found","on","the","surface","of","an","#$Organ",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274015).
lisp_trans(=>(tSumoLesion(L),exists([I],and(actInjuring(I),result(I,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274176).
lisp_trans(=>(tSumoLesion(L),exists([S,O],and(surface(S,O),tPartTypeOrgan(O),located(L,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274281).
lisp_trans(genls(tScar,tSumoAbnormalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274409).
lisp_trans(documentation(tScar,vEnglishLanguage,s("Any","#$AbnormalAnatomicalStructure","which","results","from","the","healing","of","a","#$Lesion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274453).
lisp_trans(=>(tScar(S),exists([T,OP,L],and(temporalPart(T,tColOfPastFn(uWhenFn(S))),holdsDuring(T,tSumoLesion(L)),actOrganOrTissueProcess(OP),patient(OP,L),result(OP,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274574).
lisp_trans(genls(tPartTypeTumor,tSumoAbnormalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274828).
lisp_trans(documentation(tPartTypeTumor,vEnglishLanguage,s("Any","#$AbnormalAnatomicalStructure","which","consists","of","a","mass","of","#$Tissue",".","Note","that","this","class","covers","both","malignant","(","i",".","e",".","cancerous",")","and","benign","tumors",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':274873).
lisp_trans(=>(tPartTypeTumor(TUMOR),all([PART],=>(part(PART,TUMOR),tSumoTissue(PART)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275068).
lisp_trans(genls(tPartTypeTendon,tSumoTissue),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275194).
lisp_trans(genls(tPartTypeTendon,tSumoAnimalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275219).
lisp_trans(documentation(tPartTypeTendon,vEnglishLanguage,'Tissue that connects #$Muscle to #$Bone.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275253).
lisp_trans(=>(tPartTypeTendon(T),exists([M,B],and(tPartTypeMuscle(M),tSumoBone(B),connects(T,M,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275338).
lisp_trans(genls(tSweat,tSumoAnimalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275474).
lisp_trans(documentation(tSweat,vEnglishLanguage,s("An","#$AnimalSubstance","that","contains","#$SodiumChloride","and","is","produced","by","the","sweat","glands",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275507).
lisp_trans(=>(tSweat(SWEAT),exists([PART],and(tSumoSodiumChloride(PART),part(PART,SWEAT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275638).
lisp_trans(genls(tSumoPlantLeaf,tSumoPlantAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275773).
lisp_trans(genls(tSumoPlantLeaf,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275819).
lisp_trans(documentation(tSumoPlantLeaf,vEnglishLanguage,s("An","#$Organ","of","#$Plants","whose","main","purpose","is","photosynthesis",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275846).
lisp_trans(genls(tSumoPlantBranch,tSumoPlantAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':275953).
lisp_trans(genls(tSumoPlantBranch,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276001).
lisp_trans(documentation(tSumoPlantBranch,vEnglishLanguage,s("The","stem","of","a","#$Plant","or","any","shoot","arising","from","the","stem","of","a","#$Plant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276033).
lisp_trans(genls(tSumoBotanicalTree,tClazzFloweringPlant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276152).
lisp_trans(=>(tSumoBotanicalTree(X),material(tWood,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276192).
lisp_trans(documentation(tSumoBotanicalTree,vEnglishLanguage,'BotanicalTree is an imprecise term  for a perennial woody plant that is larger than a bush or shrub,  generally understood to describe a large growth having one main trunk  with few or no branches projecting from its base, a well-developed crown  of foliage, and a height at maturity of at least 12 feet.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276251).
lisp_trans(genls(tPartTypeTreeBranch,tSumoPlantBranch),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276607).
lisp_trans(documentation(tPartTypeTreeBranch,vEnglishLanguage,s("Any","#$PlantBranch","which","is","part","of","a","#$BotanicalTree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276641).
lisp_trans(=>(tPartTypeTreeBranch(B),exists([T],and(tSumoBotanicalTree(T),part(B,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276742).
lisp_trans(genls(tClazzWillowTree,tSumoBotanicalTree),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276854).
lisp_trans(documentation(tClazzWillowTree,vEnglishLanguage,s("A","#$BotanicalTree","of","the","genus","#$Salix",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276890).
lisp_trans(genls(tSumoPlantRoot,tSumoPlantAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':276976).
lisp_trans(genls(tSumoPlantRoot,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277022).
lisp_trans(documentation(tSumoPlantRoot,vEnglishLanguage,s("An","#$Organ","of","#$Plants","whose","main","purpose","is","twofold",",","viz",".","to","absorb","nutrients","from","the","ground","and","to","anchor","the","#$Plant","in","place",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277049).
lisp_trans(genls(tSumoFlower,tSumoPlantAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277227).
lisp_trans(genls(tSumoFlower,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277270).
lisp_trans(documentation(tSumoFlower,vEnglishLanguage,s("The","reproductive","organ","of","#$FloweringPlants",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277294).
lisp_trans(=>(tSumoFlower(FLOWER),exists([PLANT,TIME],and(tClazzFloweringPlant(PLANT),holdsDuring(TIME,part(FLOWER,PLANT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277381).
lisp_trans(genls(tSumoAntibody,tSumoProtein),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277546).
lisp_trans(documentation(tSumoAntibody,vEnglishLanguage,s("An","immunoglobulin","which","is","produced","by","the","body","and","which","has","the","ability","to","neutralize","#$Antigens",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277574).
lisp_trans(=>(tSumoAntibody(BODY),hasPurpose(BODY,exists([DEST,ANTI],and(actDestruction(DEST),agent(DEST,BODY),patient(DEST,ANTI),tAntigen(ANTI))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':277719).
lisp_trans(genls(tAntibiotic,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278033).
lisp_trans(documentation(tAntibiotic,vEnglishLanguage,s("A","#$BiologicallyActiveSubstance","than","can","kill","instances","of","#$Bacterium",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278083).
lisp_trans(genls(tAntigen,tSumoBiologicallyActiveSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278202).
lisp_trans(documentation(tAntigen,vEnglishLanguage,s("Any","#$BiologicallyActiveSubstance","that","has","the","capacity","to","stimulate","the","production","of","#$Antibodies",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278249).
lisp_trans(genls(tSumoAntigenA,tAntigen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278394).
lisp_trans(documentation(tSumoAntigenA,vEnglishLanguage,s("An","#$Antigen","that","is","carried","in","the","red","blood","cells","of","those","with","#$BloodTypeA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278422).
lisp_trans(genls(tSumoAntigenB,tAntigen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278547).
lisp_trans(documentation(tSumoAntigenB,vEnglishLanguage,s("An","#$Antigen","that","is","carried","in","the","red","blood","cells","of","those","with","#$BloodTypeB",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278575).
lisp_trans(genls(tBloodCell,tCell),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278700).
lisp_trans(genls(tBloodCell,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278726).
lisp_trans(documentation(tBloodCell,vEnglishLanguage,s("A","#$Cell","that","is","normally","present","in","#$Blood",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278773).
lisp_trans(=>(tBloodCell(C),exists([B],and(tPartTypeBlood(B),part(C,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278863).
lisp_trans(genls(tRedBloodCell,tBloodCell),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':278966).
lisp_trans(documentation(tRedBloodCell,vEnglishLanguage,'BloodCells that contain hemoglobin, lack a  #$CellNucleus, and carry #$Oxygen to the tissues of the body.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279000).
lisp_trans(=>(tRedBloodCell(C),not(exists([N],and(tPartTypeCellNucleus(N),part(N,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279155).
lisp_trans(genls(tPartTypeWhiteBloodCell,tBloodCell),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279284).
lisp_trans(documentation(tPartTypeWhiteBloodCell,vEnglishLanguage,'BloodCells that lack hemoglobin, contain a  #$CellNucleus, and have no color.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279320).
lisp_trans(=>(tPartTypeWhiteBloodCell(C),exists([N],and(tPartTypeCellNucleus(N),part(N,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279449).
lisp_trans(genls(tPartTypeBloodTypeA,tPartTypeBlood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279563).
lisp_trans(documentation(tPartTypeBloodTypeA,vEnglishLanguage,s("The","subclass","of","#$Blood","that","contains","#$AntigenA","and","does","not","contain","#$AntigenB",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279591).
lisp_trans(=>(tPartTypeBloodTypeA(B),exists([A],and(tSumoAntigenA(A),part(A,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279719).
lisp_trans(=>(tPartTypeBloodTypeA(B),not(exists([A],and(tSumoAntigenB(A),part(A,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279826).
lisp_trans(genls(tBloodTypeAB,tPartTypeBlood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279951).
lisp_trans(documentation(tBloodTypeAB,vEnglishLanguage,s("The","subclass","of","#$Blood","that","contains","both","#$AntigenA","and","#$AntigenB",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':279980).
lisp_trans(=>(tBloodTypeAB(B),exists([A],and(tSumoAntigenA(A),part(A,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280097).
lisp_trans(=>(tBloodTypeAB(B),exists([A],and(tSumoAntigenB(A),part(A,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280205).
lisp_trans(genls(tPartTypeBloodTypeB,tPartTypeBlood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280323).
lisp_trans(documentation(tPartTypeBloodTypeB,vEnglishLanguage,s("The","subclass","of","#$Blood","that","contains","#$AntigenB","and","does","not","contain","#$AntigenA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280351).
lisp_trans(=>(tPartTypeBloodTypeB(B),exists([A],and(tSumoAntigenB(A),part(A,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280479).
lisp_trans(=>(tPartTypeBloodTypeB(B),not(exists([A],and(tSumoAntigenA(A),part(A,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280586).
lisp_trans(genls(tPartTypeBloodTypeO,tPartTypeBlood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280711).
lisp_trans(documentation(tPartTypeBloodTypeO,vEnglishLanguage,s("The","subclass","of","#$Blood","that","contains","neither","#$AntigenA","nor","#$AntigenB",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280739).
lisp_trans(=>(tPartTypeBloodTypeO(B),not(exists([A],and(tSumoAntigenA(A),part(A,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280858).
lisp_trans(=>(tPartTypeBloodTypeO(B),not(exists([A],and(tSumoAntigenB(A),part(A,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':280983).
lisp_trans(genls(tSumoNerveCell,tCell),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281108).
lisp_trans(genls(tSumoNerveCell,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281134).
lisp_trans(documentation(tSumoNerveCell,vEnglishLanguage,s("The","#$Cells","that","make","up","a","#$NervousSystem",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281181).
lisp_trans(=>(tSumoNerveCell(N),exists([S],and(tPartTypeNervousSystem(S),part(N,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281269).
lisp_trans(genls(tSumoLiquidBodySubstance,tSumoBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281380).
lisp_trans(documentation(tSumoLiquidBodySubstance,vEnglishLanguage,s("Any","#$BodySubstance","which","is","#$Liquid","under","normal","circumstances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281425).
lisp_trans(=>(tSumoLiquidBodySubstance(SUBSTANCE),sumoAttribute(SUBSTANCE,tSumoLiquid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281547).
lisp_trans(genls(tSumoSerum,tSumoLiquidBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281631).
lisp_trans(disjointWith(tSumoSerum,tPartTypeBlood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281668).
lisp_trans(documentation(tSumoSerum,vEnglishLanguage,s("Any","#$LiquidBodySubstance","other","than","#$Blood",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281691).
lisp_trans(genls(tSumoTearSubstance,tSumoLiquidBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281778).
lisp_trans(genls(tSumoTearSubstance,actSalineSolution),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281823).
lisp_trans(documentation(tSumoTearSubstance,vEnglishLanguage,s("The","class","of","#$SalineSolutions","produced","by","the","lacrimal","glands","of","the","#$Eyes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281863).
lisp_trans(=>(tSumoTearSubstance(T),exists([P,E],and(tPartTypeEye(E),instrument(P,E),result(P,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':281991).
lisp_trans(genls(tMilk,tSumoLiquidBodySubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282126).
lisp_trans(genls(tMilk,tSumoBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282162).
lisp_trans(documentation(tMilk,vEnglishLanguage,s("A","nutritious","#$BodySubstance","produced","by","#$Mammals","that","has","evolved","to","provide","nourishment","for","their","offspring","during","their","initial","period","of","life",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282187).
lisp_trans(=>(tMilk(MILK),exists([PROCESS,MAMMAL],and(tClazzMammal(MAMMAL),sumoAttribute(MAMMAL,tFemale),instrument(PROCESS,MAMMAL),result(PROCESS,MILK)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282375).
lisp_trans(genls(tPartTypeCellPart,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282592).
lisp_trans(documentation(tPartTypeCellPart,vEnglishLanguage,'part of a #$Cell'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282621).
lisp_trans(=>(tPartTypeCellPart(OBJ1),exists([CELL],and(tCell(CELL),properPart(OBJ1,CELL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282684).
lisp_trans(genls(tPartTypeCellNucleus,tPartTypeCellPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282796).
lisp_trans(documentation(tPartTypeCellNucleus,vEnglishLanguage,s("The","part","of","the","#$Cell","that","contains","DNA","and","RNA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':282948).
lisp_trans(=>(tPartTypeCellNucleus(NUCLEUS),exists([CELL],and(tCell(CELL),part(NUCLEUS,CELL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283046).
lisp_trans(genls(tSumoTea,tSumoBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283181).
lisp_trans(genls(tSumoTea,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283205).
lisp_trans(documentation(tSumoTea,vEnglishLanguage,s("A","#$Beverage","which","is","prepared","by","infusing","tea","leaves","into","hot","water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283233).
lisp_trans(genls(tObjectAlcoholicBeverage,tSumoBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283343).
lisp_trans(genls(tObjectAlcoholicBeverage,tDepressant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283381).
lisp_trans(documentation(tObjectAlcoholicBeverage,vEnglishLanguage,s("Any","#$Beverage","that","contains","#$Alcohol",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283421).
lisp_trans(=>(tObjectAlcoholicBeverage(BEVERAGE),exists([ALCOHOL],and(tSumoAlcohol(ALCOHOL),part(ALCOHOL,BEVERAGE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283514).
lisp_trans(genls(tObjectWine,tObjectAlcoholicBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283669).
lisp_trans(genls(tSumoDistilledAlcoholicBeverage,tObjectAlcoholicBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283847).
lisp_trans(documentation(tSumoDistilledAlcoholicBeverage,vEnglishLanguage,s("An","#$AlcoholicBeverage","that","has","had","some","part","of","its","#$Water","content","removed","by","distillation",".","This","class","covers","drinks","of","unmixed",",","hard","liquor",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':283903).
lisp_trans(=>(tSumoDistilledAlcoholicBeverage(BEVERAGE),exists([REMOVE,WATER],and(actRemoving(REMOVE),patient(REMOVE,WATER),tWater(WATER),origin(REMOVE,BEVERAGE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':284112).
lisp_trans(genls(tObjectBeer,tObjectAlcoholicBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':284350).
lisp_trans(genls(tPartTypeSpinalColumn,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':284927).
lisp_trans(genls(tPartTypeSpinalColumn,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':284958).
lisp_trans(documentation(tPartTypeSpinalColumn,vEnglishLanguage,s("A","flexible","column","made","out","of","bones","called","vertebrae",".","The","main","function","of","the","#$SpinalColumn","is","to","protect","the","spinal","cord",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285008).
lisp_trans(<=>(tClazzVertebrate(VERT),exists([SPINE],and(tClazzAnimal(VERT),component(SPINE,VERT),tPartTypeSpinalColumn(SPINE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285184).
lisp_trans(genls(tPartTypeSpinalCord,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285368).
lisp_trans(documentation(tPartTypeSpinalCord,vEnglishLanguage,s("A","cord","of","nerves","that","carries","impulses","to","and","from","the","#$Brain",".","It","is","contained","within","the","#$SpinalColumn",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285396).
lisp_trans(=>(tPartTypeSpinalCord(C),exists([S],and(tPartTypeNervousSystem(S),part(C,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285551).
lisp_trans(=>(tPartTypeSpinalCord(C),exists([S],and(tPartTypeSpinalColumn(S),contains(S,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285663).
lisp_trans(genls(tSumoTail,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285779).
lisp_trans(documentation(tSumoTail,vEnglishLanguage,s("A","#$BodyPart","which","extends","from","the","rear","of","the","main","body","of","some","#$Vertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285821).
lisp_trans(=>(tSumoTail(T),exists([V],and(tClazzVertebrate(V),part(T,V),not(tSumoHuman(V))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':285943).
lisp_trans(genls(actWing,tSumoLimb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286078).
lisp_trans(documentation(actWing,vEnglishLanguage,s("Any","#$Limb","which","is","capable","of","being","an","instrument","in","#$Flying",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286099).
lisp_trans(genls(tPartTypeSkin,actBodyCovering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286204).
lisp_trans(genls(tPartTypeSkin,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286233).
lisp_trans(documentation(tPartTypeSkin,vEnglishLanguage,s("A","BodyCovering","that","comprises","part","of","the","surface","of","#$Animals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286275).
lisp_trans(=>(tPartTypeSkin(SKIN),exists([SURFACE,ANIMAL],and(surface(SURFACE,ANIMAL),part(SKIN,ANIMAL),tClazzAnimal(ANIMAL),overlapsSpatially(SKIN,SURFACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286380).
lisp_trans(genls(tPartTypeRetina,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286600).
lisp_trans(genls(tPartTypeRetina,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286624).
lisp_trans(documentation(tPartTypeRetina,vEnglishLanguage,s("A","membrane","that","covers","the","#$Eye","and","converts","the","image","formed","by","the","lens","of","the","#$Eye","into","neurochemical","impulses","which","can","be","processed","by","the","#$Brain",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286668).
lisp_trans(=>(tPartTypeRetina(R),exists([E],and(tPartTypeEye(E),part(R,E)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286867).
lisp_trans(genls(tSumoBronchialDuct,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':286965).
lisp_trans(genls(tSumoBronchialDuct,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287001).
lisp_trans(documentation(tSumoBronchialDuct,vEnglishLanguage,s("Any","#$BodyVessel","which","is","located","in","a","#$Lung","and","which","carries","oxygen","from","the","trachea","to","the","alveoli",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287052).
lisp_trans(=>(tSumoBronchialDuct(DUCT),exists([LUNG],and(tPartTypeLung(LUNG),located(DUCT,LUNG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287206).
lisp_trans(genls(tPartTypeBloodVessel,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287340).
lisp_trans(genls(tPartTypeBloodVessel,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287374).
lisp_trans(documentation(tPartTypeBloodVessel,vEnglishLanguage,s("Any","#$BodyVessel","which","is","used","to","circulate","#$Blood","from","one","part","of","the","body","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287423).
lisp_trans(=>(tPartTypeBloodVessel(VESSEL),exists([BLOOD,TRANSFER],and(tPartTypeBlood(BLOOD),actTransfer(TRANSFER),patient(TRANSFER,BLOOD),instrument(TRANSFER,VESSEL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287561).
lisp_trans(genls(tPartTypeAlveolus,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287792).
lisp_trans(genls(tPartTypeAlveolus,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287823).
lisp_trans(documentation(tPartTypeAlveolus,vEnglishLanguage,s("Tiny","sacs","in","the","#$Lung","which","absorb","#$Oxygen","which","is","delivered","to","them","by","the","#$BronchialDucts",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':287869).
lisp_trans(=>(tPartTypeAlveolus(A),exists([L],and(tPartTypeLung(L),located(A,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288011).
lisp_trans(genls(tPartTypeArtery,tPartTypeBloodVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288125).
lisp_trans(documentation(tPartTypeArtery,vEnglishLanguage,s("Any","#$BloodVessel","which","transfers","#$Blood","from","the","#$Heart","to","the","extremities","of","the","body",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288155).
lisp_trans(=>(and(tPartTypeArtery(ARTERY),actTransfer(TRANSFER),patient(TRANSFER,BLOOD),instrument(TRANSFER,ARTERY),tPartTypeBlood(BLOOD)),exists([HEART],and(tPartTypeHeart(HEART),origin(TRANSFER,HEART)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288289).
lisp_trans(genls(tPartTypeVein,tPartTypeBloodVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288573).
lisp_trans(relatedInternalConcept(tPartTypeVein,tPartTypeArtery),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288601).
lisp_trans(documentation(tPartTypeVein,vEnglishLanguage,s("Any","#$BloodVessel","which","transfers","#$Blood","from","the","extremities","of","the","body","to","the","#$Heart",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288638).
lisp_trans(=>(and(tPartTypeVein(V),actTransfer(T),patient(T,B),instrument(T,V),tPartTypeBlood(B)),exists([H],and(tPartTypeHeart(H),destination(T,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288770).
lisp_trans(genls(tSumoPulmonaryArtery,tPartTypeArtery),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':288979).
lisp_trans(documentation(tSumoPulmonaryArtery,vEnglishLanguage,s("An","#$Artery","that","carries","#$Blood","from","the","#$Heart","to","a","#$Lung",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289013).
lisp_trans(=>(and(tSumoPulmonaryArtery(ARTERY),actTransfer(TRANSFER),patient(TRANSFER,BLOOD),instrument(TRANSFER,ARTERY),tPartTypeBlood(BLOOD)),exists([LUNG],and(tPartTypeLung(LUNG),destination(TRANSFER,LUNG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289128).
lisp_trans(genls(tSumoPulmonaryVein,tPartTypeVein),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289402).
lisp_trans(documentation(tSumoPulmonaryVein,vEnglishLanguage,s("A","#$Vein","that","carries","#$Blood","from","the","#$Lungs","to","the","#$Heart",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289432).
lisp_trans(=>(and(tSumoPulmonaryVein(V),actTransfer(T),patient(T,B),instrument(T,V),tPartTypeBlood(B)),exists([L,H,P],and(tPartTypeLung(L),origin(T,L),part(V,P),part(L,P),part(H,P),tPartTypeHeart(H),destination(T,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289545).
lisp_trans(genls(tPartTypeCapillary,tPartTypeBloodVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289872).
lisp_trans(documentation(tPartTypeCapillary,vEnglishLanguage,s("A","very","small","#$BloodVessel","that","connects","arterioles","(","very","small","#$Arteries",")","with","venules","(","very","small","#$Veins",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':289905).
lisp_trans(=>(tPartTypeCapillary(C),exists([A,V],and(tPartTypeArtery(A),tPartTypeVein(V),connects(C,A,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290061).
lisp_trans(genls(tPartTypeLung,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290200).
lisp_trans(genls(tPartTypeLung,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290222).
lisp_trans(documentation(tPartTypeLung,vEnglishLanguage,s("A","respiratory","organ","of","#$Vertebrates",".","Its","function","is","to","furnish","the","blood","with","oxygen","and","to","remove","carbon","dioxide",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290264).
lisp_trans(=>(capability(actBreathing,experiencer,ANIMAL),exists([LUNG],and(component(LUNG,ANIMAL),tPartTypeLung(LUNG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290423).
lisp_trans(genls(tPartTypeKidney,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290573).
lisp_trans(genls(tPartTypeKidney,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290597).
lisp_trans(documentation(tPartTypeKidney,vEnglishLanguage,s("An","#$Organ","that","separates","urine","from","other","#$BodySubstances","and","passes","it","to","the","bladder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290641).
lisp_trans(genls(tPartTypeSpleen,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290774).
lisp_trans(genls(tPartTypeSpleen,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290798).
lisp_trans(documentation(tPartTypeSpleen,vEnglishLanguage,s("An","#$Organ","on","the","left","side","of","the","body","that","produces","#$Cells","that","play","a","crucial","role","in","immune","response",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290842).
lisp_trans(genls(actInhaling,actBreathing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':290992).
lisp_trans(documentation(actInhaling,vEnglishLanguage,s("Any","instance","of","#$Breathing","where","the","breath","is","taken","into","the","#$Lungs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291022).
lisp_trans(=>(actInhaling(I),exists([L],and(tPartTypeLung(L),destination(I,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291139).
lisp_trans(genls(actExhaling,actBreathing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291247).
lisp_trans(documentation(actExhaling,vEnglishLanguage,s("Any","instance","of","#$Breathing","where","the","breath","is","expelled","from","the","#$Lungs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291277).
lisp_trans(=>(actExhaling(E),exists([L],and(tPartTypeLung(L),origin(E,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291396).
lisp_trans(genls(tPartTypeNostril,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291499).
lisp_trans(genls(tPartTypeNostril,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291529).
lisp_trans(documentation(tPartTypeNostril,vEnglishLanguage,s("Either","of","two","#$BodyVessels","that","run","through","the","#$Nose","and","connect","it","to","the","#$Throat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291574).
lisp_trans(=>(tPartTypeNose(NOSE),exists([N1,N2],and(tPartTypeNostril(N1),tPartTypeNostril(N2),not(equal(N1,N2)),connected(N1,NOSE),connected(N2,NOSE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291706).
lisp_trans(=>(tPartTypeNostril(NOS),exists([N,T],and(tPartTypeNose(N),tPartTypeThroat(T),connects(NOS,N,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':291909).
lisp_trans(genls(tPartTypeHeart,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292050).
lisp_trans(genls(tPartTypeHeart,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292073).
lisp_trans(documentation(tPartTypeHeart,vEnglishLanguage,s("The","#$Organ","that","pumps","#$Blood","throughout","the","body",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292116).
lisp_trans(=>(tPartTypeHeart(HEART),exists([TRANSFER,BLOOD],and(actTransfer(TRANSFER),tPartTypeBlood(BLOOD),instrument(TRANSFER,HEART),patient(TRANSFER,BLOOD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292209).
lisp_trans(genls(tPartTypeLiver,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292433).
lisp_trans(genls(tPartTypeLiver,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292456).
lisp_trans(documentation(tPartTypeLiver,vEnglishLanguage,s("An","#$Organ","that","secretes","bile","and","serves","metabolic","functions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292499).
lisp_trans(genls(tPartTypeMouth,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292603).
lisp_trans(genls(tPartTypeMouth,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292646).
lisp_trans(documentation(tPartTypeMouth,vEnglishLanguage,s("Part","of","the","#$Face",",","used","for","#$Ingesting","Food","and","#$Vocalizing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292672).
lisp_trans(=>(tPartTypeMouth(MOUTH),exists([FACE],and(tSumoFace(FACE),part(MOUTH,FACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292778).
lisp_trans(genls(tPartTypeTongue,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292903).
lisp_trans(genls(tPartTypeTongue,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292947).
lisp_trans(documentation(tPartTypeTongue,vEnglishLanguage,s("Part","of","the","#$Mouth",",","used","for","#$Tasting","Food",",","#$Vocalizing",",","and","the","initial","stage","of","#$Digesting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':292974).
lisp_trans(=>(tPartTypeTongue(TONGUE),exists([MOUTH],and(tPartTypeMouth(MOUTH),part(TONGUE,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293115).
lisp_trans(genls(tPartTypeNervousSystem,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293247).
lisp_trans(genls(tPartTypeNervousSystem,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293278).
lisp_trans(documentation(tPartTypeNervousSystem,vEnglishLanguage,s("A","system","in","#$Vertebrates","that","is","made","up","of","the","#$Brain",",","the","spinal","cord",",","nerves",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293329).
lisp_trans(=>(and(tPartTypeNervousSystem(S),part(S,A),tClazzAnimal(A)),tClazzVertebrate(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293467).
lisp_trans(genls(tPartTypeHoof,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293582).
lisp_trans(genls(tPartTypeHoof,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293624).
lisp_trans(documentation(tPartTypeHoof,vEnglishLanguage,s("The","hard","end","of","the","#$Foot","of","a","#$HoofedMammal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293649).
lisp_trans(=>(tPartTypeHoof(H),exists([F,A],and(tSumoFoot(F),tSumoHoofedMammal(A),part(H,F),part(F,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293737).
lisp_trans(genls(tPartTypeTooth,tSumoBone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293889).
lisp_trans(documentation(tPartTypeTooth,vEnglishLanguage,s("Part","of","the","#$Mouth",",","used","for","biting","and","chewing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':293911).
lisp_trans(=>(tPartTypeTooth(TOOTH),exists([MOUTH],and(tPartTypeMouth(MOUTH),part(TOOTH,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294002).
lisp_trans(genls(tPartTypeSkull,tSumoBone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294131).
lisp_trans(documentation(tPartTypeSkull,vEnglishLanguage,s("The","#$Bone","that","is","found","in","the","#$Heads","of","#$Vertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294153).
lisp_trans(=>(tPartTypeSkull(S),exists([V,H],and(tClazzVertebrate(V),tSumoHead(H),part(H,V),part(S,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294251).
lisp_trans(genls(tSumoHorn,tSumoBone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294402).
lisp_trans(documentation(tSumoHorn,vEnglishLanguage,s("An","outgrowth","of","#$Bone","that","is","found","on","some","#$HoofedMammals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294423).
lisp_trans(=>(tSumoHorn(H),exists([M],and(tSumoHoofedMammal(M),part(H,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294526).
lisp_trans(genls(tIvory,tSumoBone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294631).
lisp_trans(documentation(tIvory,vEnglishLanguage,s("A","very","hard","substance","that","makes","up","the","tusks","of","elephants","and","walruses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294653).
lisp_trans(genls(tSumoAnimalShell,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294768).
lisp_trans(genls(tSumoAnimalShell,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294817).
lisp_trans(documentation(tSumoAnimalShell,vEnglishLanguage,s("A","hard","shell","of","calcium","that","serves","as","a","supporting","structure","for","some","#$Invertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294849).
lisp_trans(=>(and(tClazzAnimal(A),tSumoAnimalShell(S),part(S,A)),or(tClazzInvertebrate(A),tClazzReptile(A))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':294984).
lisp_trans(genls(actOssification,actOrganOrTissueProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295134).
lisp_trans(documentation(actOssification,vEnglishLanguage,s("Any","#$BiologicalProcess","that","results","in","the","formation","of","#$Bones",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295179).
lisp_trans(=>(actOssification(O),exists([B],and(tSumoBone(B),result(O,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295294).
lisp_trans(genls(actChewing,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295401).
lisp_trans(documentation(actChewing,vEnglishLanguage,s("Breaking","up","or","mashing","Food","with","one","'s","teeth",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295431).
lisp_trans(=>(and(actChewing(CHEW),resource(CHEW,FOOD)),isa(FOOD,uFoodForFn(tSumoOrganism))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295520).
lisp_trans(=>(and(actChewing(CHEW),instrument(CHEW,TOOTH)),tPartTypeTooth(TOOTH)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295636).
lisp_trans(=>(actChewing(CHEW),exists([EAT],and(actEating(EAT),subProcess(CHEW,EAT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295741).
lisp_trans(genls(actFeeding,actGiving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295871).
lisp_trans(documentation(actFeeding,vEnglishLanguage,s("Giving","Food","to","a","#$Human","or","#$Animal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295897).
lisp_trans(=>(and(actFeeding(F),patient(F,O)),isa(O,uFoodForFn(tClazzAnimal))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':295977).
lisp_trans(=>(and(actFeeding(F),destination(F,A)),tClazzAnimal(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296072).
lisp_trans(genls(tSumoLip,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296159).
lisp_trans(genls(tSumoLip,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296200).
lisp_trans(documentation(tSumoLip,vEnglishLanguage,s("Folds","of","#$Tissue","surrounding","the","mouths","of","some","#$Vertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296224).
lisp_trans(=>(tSumoLip(LIP),exists([MOUTH],and(tPartTypeMouth(MOUTH),part(LIP,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296328).
lisp_trans(genls(actKissing,actTouching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296451).
lisp_trans(documentation(actKissing,vEnglishLanguage,s("The","class","of","#$Touching","processes","where","the","lips","of","two","persons","are","brought","into","contact","with","each","other",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296479).
lisp_trans(=>(actKissing(KISS),exists([PERSON1,PERSON2,LIP1,LIP2],and(agent(KISS,PERSON1),agent(KISS,PERSON2),tSumoHuman(PERSON1),tSumoHuman(PERSON2),not(equal(PERSON1,PERSON2)),tSumoLip(LIP1),tSumoLip(LIP2),part(LIP1,PERSON1),part(LIP2,PERSON2),holdsDuring(uBeginFn(uWhenFn(KISS)),not(meetsSpatially(LIP1,LIP2))),holdsDuring(iTimeOf_EndFn(uWhenFn(KISS)),meetsSpatially(LIP1,LIP2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':296629).
lisp_trans(genls(actLicking,actTouching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297149).
lisp_trans(documentation(actLicking,vEnglishLanguage,s("The","class","of","#$Touching","processes","where","the","#$Tongue","is","brought","into","contact","with","something","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297177).
lisp_trans(=>(actLicking(L),exists([T],and(tPartTypeTongue(T),instrument(L,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297319).
lisp_trans(genls(actEmbracing,actTouching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297427).
lisp_trans(documentation(actEmbracing,vEnglishLanguage,s("The","class","of","#$Touching","processes","where","one","#$Human","hugs","another","one",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297457).
lisp_trans(=>(actEmbracing(E),exists([P1,P2],and(tSumoHuman(P1),tSumoHuman(P2),not(equal(P1,P2)),agent(E,P1),agent(E,P2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297572).
lisp_trans(genls(tSumoSkeleton,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297759).
lisp_trans(genls(tSumoSkeleton,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297805).
lisp_trans(documentation(tSumoSkeleton,vEnglishLanguage,s("The","system","of","#$Bones","that","make","up","the","supporting","structure","of","#$Vertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297834).
lisp_trans(=>(and(tClazzAnimal(ANIMAL),tSumoSkeleton(SKELETON),part(SKELETON,ANIMAL)),tClazzVertebrate(ANIMAL)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':297957).
lisp_trans(=>(tSumoSkeleton(S),exists([A],and(tClazzAnimal(A),interiorPart(S,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298104).
lisp_trans(genls(tPartTypeExoskeleton,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298215).
lisp_trans(genls(tPartTypeExoskeleton,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298264).
lisp_trans(documentation(tPartTypeExoskeleton,vEnglishLanguage,s("The","system","of","#$Bones","that","are","on","the","#$Outside","of","an","organism","and","make","up","the","supporting","structure","of","many","#$Invertebrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298296).
lisp_trans(=>(and(tClazzAnimal(ANIMAL),tPartTypeExoskeleton(SKELETON),part(SKELETON,ANIMAL)),tClazzInvertebrate(ANIMAL)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298469).
lisp_trans(<=>(tSumoBone(BONE),exists([SKELETON],and(or(tSumoSkeleton(SKELETON),tPartTypeExoskeleton(SKELETON)),part(BONE,SKELETON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298621).
lisp_trans(=>(tPartTypeExoskeleton(X),exists([A],and(tClazzAnimal(A),part(X,A),not(exists([PART],and(properPart(PART,A),orientation(PART,X,tSumoOutside))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':298819).
lisp_trans(genls(tSumoBodyJoint,actBodyJunction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299055).
lisp_trans(documentation(tSumoBodyJoint,vEnglishLanguage,'BodyJunctions where different parts of the same  #$Skeleton come together.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299089).
lisp_trans(=>(tSumoBodyJoint(J),exists([S,P1,P2],and(tSumoSkeleton(S),component(P1,S),component(P2,S),component(J,S),connects(J,P1,P2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299210).
lisp_trans(genls(tSumoAirway,tSumoTransitway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299407).
lisp_trans(documentation(tSumoAirway,vEnglishLanguage,s("The","class","of","Transitways","used","to","transport","Air","to","a","location","where","it","is","absent","or","insufficient",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299436).
lisp_trans(genls(tPartTypeThroat,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299576).
lisp_trans(genls(tPartTypeThroat,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299620).
lisp_trans(genls(tPartTypeThroat,tSumoAirway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299649).
lisp_trans(documentation(tPartTypeThroat,vEnglishLanguage,s("A","#$BodyVessel","which","connects","the","#$Mouth","to","the","lungs","and","stomach",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299674).
lisp_trans(=>(tPartTypeThroat(THROAT),exists([MOUTH],and(tPartTypeMouth(MOUTH),connected(THROAT,MOUTH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299785).
lisp_trans(genls(tSumoHair,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299922).
lisp_trans(documentation(tSumoHair,vEnglishLanguage,s("A","filament","that","covers","part","of","the","body","of","many","#$Mammals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':299964).
lisp_trans(=>(tSumoHair(HAIR),exists([MAMMAL,TIME],and(tClazzMammal(MAMMAL),holdsDuring(TIME,part(HAIR,MAMMAL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300064).
lisp_trans(genls(tSumoFacialHair,tSumoHair),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300221).
lisp_trans(documentation(tSumoFacialHair,vEnglishLanguage,'Hair that grows on the #$Face.  This  class covers beards, mustaches, sideburns, midnight shadow, etc.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300248).
lisp_trans(=>(tSumoFacialHair(H),exists([F],and(tSumoFace(F),part(H,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300398).
lisp_trans(genls(tSumoHairRemoval,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300501).
lisp_trans(documentation(tSumoHairRemoval,vEnglishLanguage,'Removing (some or all) the #$Hair from the  body of an #$Animal.  Note that this covers shaving hair, cutting hair,  pulling hair out by the roots, etc.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300533).
lisp_trans(=>(and(tSumoHairRemoval(REMOVE),resource(REMOVE,HAIR)),tSumoHair(HAIR)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300735).
lisp_trans(genls(actPeeling,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300849).
lisp_trans(documentation(actPeeling,vEnglishLanguage,s("Removing","the","#$Skin","(","or","part","of","the","#$Skin",")","from","an","#$Organism",".","Note","that","this","class","covers","a","large","range","of","cases",",","including","peeling","an","orange",",","pelting","an","#$Animal",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':300877).
lisp_trans(=>(and(actPeeling(P),patient(P,O)),exists([S],and(tPartTypeSkin(S),part(O,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301094).
lisp_trans(genls(tPartTypeBrain,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301224).
lisp_trans(genls(tPartTypeBrain,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301247).
lisp_trans(documentation(tPartTypeBrain,vEnglishLanguage,s("The","seat","of","the","central","nervous","system",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301290).
lisp_trans(documentation(intelligenceQuotient,vEnglishLanguage,s("(","intelligenceQuotient","?","PERSON","?","NUMBER",")","means","that","?","NUMBER","is","the","I",".","Q",".","of","?","PERSON",".","The","I",".","Q",".","of","a","person","is","the","ratio","of","their","mental","age","(","determined","by","a","standardized","test",")","divided","by","their","chronological","age",",","multiplied","by","100",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301371).
lisp_trans(rtBinaryPredicate(intelligenceQuotient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301657).
lisp_trans(rtSingleValuedRelation(intelligenceQuotient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301705).
lisp_trans(argIsa(intelligenceQuotient,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301758).
lisp_trans(argIsa(intelligenceQuotient,2,vtRationalNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301796).
lisp_trans(genls(tPartTypeStomach,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301844).
lisp_trans(genls(tPartTypeStomach,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301869).
lisp_trans(documentation(tPartTypeStomach,vEnglishLanguage,s("A","muscular","sac","that","is","the","principal","organ","of","digestion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':301914).
lisp_trans(=>(tPartTypeStomach(S),capability(actDigesting,instrument,S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302015).
lisp_trans(genls(tPartTypeIntestine,tSumoBodyVessel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302084).
lisp_trans(genls(tPartTypeIntestine,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302116).
lisp_trans(documentation(tPartTypeIntestine,vEnglishLanguage,s("A","#$BodyVessel","which","connects","the","#$Stomach","to","the","anus","and","which","is","used","in","digesting","Food",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302163).
lisp_trans(=>(tPartTypeIntestine(I),capability(actDigesting,instrument,I)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302302).
lisp_trans(=>(tPartTypeIntestine(I),exists([S],and(tPartTypeStomach(S),connected(I,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302373).
lisp_trans(genls(tPartTypeHypothalamus,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302483).
lisp_trans(genls(tPartTypeHypothalamus,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302516).
lisp_trans(documentation(tPartTypeHypothalamus,vEnglishLanguage,s("The","part","of","the","#$Brain","lying","below","the","thalamus","that","serves","to","regulate","#$AutonomicProcesses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302566).
lisp_trans(=>(tPartTypeHypothalamus(HYPO),exists([BRAIN],and(tPartTypeBrain(BRAIN),part(HYPO,BRAIN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302710).
lisp_trans(genls(tPartTypeEye,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302844).
lisp_trans(genls(tPartTypeEye,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302865).
lisp_trans(documentation(tPartTypeEye,vEnglishLanguage,s("The","#$Organ","of","sight",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302906).
lisp_trans(=>(tPartTypeEye(EYE),capability(actSeeing,instrument,EYE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':302967).
lisp_trans(=>(tPartTypeEye(EYE),exists([HEAD],and(tSumoHead(HEAD),part(EYE,HEAD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303035).
lisp_trans(genls(tPartTypeEar,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303154).
lisp_trans(genls(tPartTypeEar,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303175).
lisp_trans(documentation(tPartTypeEar,vEnglishLanguage,s("The","#$Organ","of","hearing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303216).
lisp_trans(=>(tPartTypeEar(EAR),capability(actHearing,instrument,EAR)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303279).
lisp_trans(=>(tPartTypeEar(EAR),exists([HEAD],and(tSumoHead(HEAD),part(EAR,HEAD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303348).
lisp_trans(genls(tPartTypeEyelid,tPartTypeSkin),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303467).
lisp_trans(documentation(tPartTypeEyelid,vEnglishLanguage,s("Folds","of","#$Skin","that","can","be","manipulated","to","cover","or","uncover","#$Eyes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303490).
lisp_trans(=>(tPartTypeEyelid(E),capability(actCovering,instrument,E)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303600).
lisp_trans(=>(tPartTypeEyelid(E),hasPurpose(E,exists([EYE,P,C],and(actCovering(C),actBodyMotion(C),tSumoHuman(P),experiencer(C,P),instrument(C,E),patient(C,EYE),tPartTypeEye(EYE),part(EYE,P),part(E,P))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303667).
lisp_trans(genls(tSumoEyeIris,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':303997).
lisp_trans(documentation(tSumoEyeIris,vEnglishLanguage,s("The","iris","is","a","thin",",","circular","structure","in","the","#$Eye",",","responsible","for","controlling","the","diameter","and","size","of","the","pupils",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304022).
lisp_trans(=>(tSumoEyeIris(I),exists([E],and(tPartTypeEye(E),part(I,E)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304183).
lisp_trans(genls(tPartTypeNose,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304292).
lisp_trans(genls(tPartTypeNose,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304314).
lisp_trans(documentation(tPartTypeNose,vEnglishLanguage,s("The","#$Organ","of","#$Smelling",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304356).
lisp_trans(=>(tPartTypeNose(NOSE),capability(actSmelling,instrument,NOSE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304423).
lisp_trans(=>(tPartTypeNose(NOSE),exists([FACE],and(tSumoFace(FACE),part(NOSE,FACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304496).
lisp_trans(documentation(secretesSubstance,vEnglishLanguage,s("(","secretesSubstance","?","OBJ","?","STUFF",")","means","that","the","subclass","of","#$OrganicObject","(","either","#$Organism","or","#$BodyPart",")","?","OBJ","produces","the","subclass","of","#$Substance","?","STUFF",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304618).
lisp_trans(rtBinaryPredicate(secretesSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304831).
lisp_trans(argGenl(secretesSubstance,1,tSumoOrganicObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304876).
lisp_trans(argGenl(secretesSubstance,2,tSumoNaturalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304927).
lisp_trans(=>(secretesSubstance(O,S),all([I1],=>(isa(I1,O),exists([P,I2],and(eventBiologicalProcess(P),eventLocated(P,I1),result(P,I2),isa(I2,S)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':304982).
lisp_trans(genls(tSumoThyroidGland,tPartTypeGland),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305232).
lisp_trans(documentation(tSumoThyroidGland,vEnglishLanguage,s("A","#$Gland","in","the","neck","that","produces","#$HormoneTSH",",","which","regulates","body","weight",",","metabolic","rate",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305262).
lisp_trans(genls(tSumoThyroidHormone,tHormone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305411).
lisp_trans(documentation(tSumoThyroidHormone,vEnglishLanguage,s("A","#$Hormone","secreted","by","the","#$ThyroidGland",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305445).
lisp_trans(genls(tPartTypePituitaryGland,tPartTypeGland),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305539).
lisp_trans(documentation(tPartTypePituitaryGland,vEnglishLanguage,s("The","main","#$Gland","of","the","endocrine","system",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305571).
lisp_trans(genls(tSumoHormoneTSH,tHormone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305663).
lisp_trans(documentation(tSumoHormoneTSH,vEnglishLanguage,s("A","#$Hormone","secreted","by","the","#$ThyroidGland",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305693).
lisp_trans(=>(tSumoHormoneTSH(HORMONE),exists([PROC,GLAND],and(tSumoThyroidGland(GLAND),instrument(PROC,GLAND),result(PROC,HORMONE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305783).
lisp_trans(genls(tPartTypePancreas,tPartTypeGland),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305970).
lisp_trans(documentation(tPartTypePancreas,vEnglishLanguage,s("A","large","#$Gland","that","secretes","#$Insulin","and","other","substances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':305996).
lisp_trans(=>(tPartTypePancreas(P),secretesSubstance(P,tInsulin)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306103).
lisp_trans(genls(tInsulin,tHormone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306167).
lisp_trans(documentation(tInsulin,vEnglishLanguage,s("A","#$Hormone","secreted","by","the","#$Pancreas","that","is","used","to","regulate","the","metabolism","of","#$Carbohydrates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306194).
lisp_trans(genls(tPartTypeArm,tSumoLimb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306337).
lisp_trans(documentation(tPartTypeArm,vEnglishLanguage,s("The","upper","#$Limbs","of","a","#$Primate",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306357).
lisp_trans(=>(tPartTypeArm(ARM),exists([PRIMATE],and(tClazzPrimate(PRIMATE),part(ARM,PRIMATE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306430).
lisp_trans(genls(tPartTypeHand,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306561).
lisp_trans(genls(tPartTypeHand,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306603).
lisp_trans(documentation(tPartTypeHand,vEnglishLanguage,s("The","grasping",",","fingered","part","of","an","upper","limb","of","a","#$Primate",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306628).
lisp_trans(=>(tPartTypeHand(HAND),exists([ARM],and(tPartTypeArm(ARM),part(HAND,ARM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306730).
lisp_trans(genls(tSumoDigitAppendage,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306848).
lisp_trans(genls(tSumoDigitAppendage,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306900).
lisp_trans(documentation(tSumoDigitAppendage,vEnglishLanguage,s("Any","of","the","extremities","of","#$Limbs","that","are","found","in","the","higer","#$Vertebrates","and","the","#$Amphibians",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':306935).
lisp_trans(=>(tSumoDigitAppendage(DIGIT),exists([LIMB],and(tSumoLimb(LIMB),part(DIGIT,LIMB)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307083).
lisp_trans(genls(tClazzToad,tClazzAmphibian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307207).
lisp_trans(documentation(tClazzToad,vEnglishLanguage,s("An","#$Amphibian","that","lacks","a","#$Tail","and","lives","at","least","partially","outside","of","water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307233).
lisp_trans(=>(tClazzToad(A),not(exists([T],and(tSumoTail(T),part(T,A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307356).
lisp_trans(initialPart(tSumoDigitAppendage,tSumoLimb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307470).
lisp_trans(genls(tPartTypeFinger,tSumoDigitAppendage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307505).
lisp_trans(documentation(tPartTypeFinger,vEnglishLanguage,s("The","five","extremities","of","#$Hands",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307538).
lisp_trans(=>(tPartTypeFinger(FINGER),exists([HAND],and(tPartTypeHand(HAND),part(FINGER,HAND)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307613).
lisp_trans(genls(tPartTypeThumb,tPartTypeFinger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307741).
lisp_trans(documentation(tPartTypeThumb,vEnglishLanguage,s("The","thick",",","short","#$Finger","of","each","#$Hand",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307765).
lisp_trans(genls(tSumoNailDigit,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307848).
lisp_trans(documentation(tSumoNailDigit,vEnglishLanguage,s("Any","of","the","horny","structures","which","are","found","on","the","#$DigitAppendages","of","#$Primates","and","other","#$Animals",".","This","includes","fingernails","and","toenails",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':307895).
lisp_trans(=>(tSumoNailDigit(N),exists([D],and(tSumoDigitAppendage(D),part(N,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308086).
lisp_trans(genls(tFingerprint,vtShapeAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308208).
lisp_trans(genls(tFingerprint,vtBiologicalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308246).
lisp_trans(documentation(tFingerprint,vEnglishLanguage,s("That","pattern","of","arches",",","loops",",","and","whorls","that","mark","the","imprint","of","a","#$Finger",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308289).
lisp_trans(=>(and(sumoAttribute(O,P),tFingerprint(P),not(tPartTypeFinger(O))),exists([PR,F],and(instrument(PR,F),tPartTypeFinger(F),sumoAttribute(F,P),patient(PR,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308415).
lisp_trans(genls(tSumoLimb,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308643).
lisp_trans(genls(tSumoLimb,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308685).
lisp_trans(documentation(tSumoLimb,vEnglishLanguage,s("Any","of","the","limbs","of","a","#$Vertebrate",".","Animal","Appendages","with","joints","that","are","used","for","movement","and","grasping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308710).
lisp_trans(=>(tSumoLimb(LIMB),exists([VERTEBRATE],and(tClazzVertebrate(VERTEBRATE),part(LIMB,VERTEBRATE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':308858).
lisp_trans(genls(tClazzSnake,tClazzReptile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309004).
lisp_trans(documentation(tClazzSnake,vEnglishLanguage,s("A","long","and","narrow","#$Reptile","which","lacks","#$Limbs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309029).
lisp_trans(=>(tClazzSnake(SNAKE),not(exists([LIMB],and(tSumoLimb(LIMB),part(LIMB,SNAKE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309119).
lisp_trans(genls(tClazzRattlesnake,tClazzSnake),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309250).
lisp_trans(documentation(tClazzRattlesnake,vEnglishLanguage,s("A","subclass","of","#$Snake","which","derives","its","name","from","the","fact","that","it","can","manipulate","its","tail","in","such","a","way","as","to","produce","a","sound","like","that","of","a","rattle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309279).
lisp_trans(genls(tSumoConstrictorSnake,tClazzSnake),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309478).
lisp_trans(documentation(tSumoConstrictorSnake,vEnglishLanguage,s("A","#$Snake","that","lacks","venom","and","kills","its","prey","by","crushing","it","to","death",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309512).
lisp_trans(genls(tSumoAntInsect,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309636).
lisp_trans(documentation(tSumoAntInsect,vEnglishLanguage,s("A","colony","#$Insect","of","three","types",":","males",",","#$QueenInsect",",","and","worker","ants",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309664).
lisp_trans(genls(tClazzAnaconda,tSumoConstrictorSnake),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309784).
lisp_trans(documentation(tClazzAnaconda,vEnglishLanguage,s("A","very","large","Boa","that","is","found","in","South","America",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309821).
lisp_trans(genls(tClazzBee,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309914).
lisp_trans(documentation(tClazzBee,vEnglishLanguage,s("A","hairy","#$Insect",",","some","species","of","which","produce","honey","and","/","or","sting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':309936).
lisp_trans(genls(tSumoBumbleBee,tClazzBee),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310044).
lisp_trans(documentation(tSumoBumbleBee,vEnglishLanguage,s("A","large","#$Bee","which","lacks","a","stinger",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310069).
lisp_trans(genls(tSumoFlyInsect,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310151).
lisp_trans(documentation(tSumoFlyInsect,vEnglishLanguage,'Insects with #$Wings and two #$Limbs.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310179).
lisp_trans(genls(tClazzGrasshopper,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310264).
lisp_trans(documentation(tClazzGrasshopper,vEnglishLanguage,'Insects with enormous legs that are used for  jumping.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310294).
lisp_trans(genls(tClazzMoth,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310398).
lisp_trans(documentation(tClazzMoth,vEnglishLanguage,s("Nocturnal","#$Insect","with","a","large","body","and","antennae",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310421).
lisp_trans(genls(tSumoQueenInsect,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310512).
lisp_trans(disjointWith(tSumoQueenInsect,tSumoWorkerInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310542).
lisp_trans(documentation(tSumoQueenInsect,vEnglishLanguage,s("A","#$Female","#$Insect","which","is","the","sole","member","of","her","colony","with","the","capability","to","reproduce",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310578).
lisp_trans(=>(tSumoQueenInsect(INSECT),and(sumoAttribute(INSECT,tFemale),capability(actReplication,agent,INSECT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310720).
lisp_trans(=>(tSumoQueenInsect(INSECT),exists([GROUP],and(tGroupedGroup(GROUP),member(INSECT,GROUP),not(exists([MEMBER],and(member(MEMBER,GROUP),capability(actReplication,agent,MEMBER),not(equal(MEMBER,INSECT)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':310841).
lisp_trans(genls(tSumoWorkerInsect,tClazzInsect),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311164).
lisp_trans(documentation(tSumoWorkerInsect,vEnglishLanguage,s("Sterile","members","of","an","#$Insect","colony","which","are","responsible","for","locating","food","and","caring","for","eggs",",","larvae",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311195).
lisp_trans(genls(tPartTypeLeg,tSumoLimb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311438).
lisp_trans(documentation(tPartTypeLeg,vEnglishLanguage,s("The","lower","#$Limbs","of","#$Animals",",","used","for","locomotion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311458).
lisp_trans(=>(tPartTypeLeg(LEG),exists([ANIMAL],and(tClazzAnimal(ANIMAL),part(LEG,ANIMAL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311550).
lisp_trans(genls(tSumoFoot,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311667).
lisp_trans(genls(tSumoFoot,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311709).
lisp_trans(documentation(tSumoFoot,vEnglishLanguage,s("The","lower","part","of","a","#$Limb",",","the","part","which","makes","contact","with","the","ground","in","locomotion","of","the","#$Animal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311734).
lisp_trans(=>(tSumoFoot(FOOT),exists([LIMB],and(tPartTypeLeg(LIMB),part(FOOT,LIMB)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311879).
lisp_trans(genls(tPartTypeAnkle,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':311990).
lisp_trans(documentation(tPartTypeAnkle,vEnglishLanguage,s("The","joint","in","the","#$Leg","that","connects","the","tibia","and","the","fibula","to","the","talus",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312017).
lisp_trans(=>(tPartTypeAnkle(A),exists([L],and(tPartTypeLeg(L),part(A,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312134).
lisp_trans(genls(tPartTypeElbow,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312231).
lisp_trans(documentation(tPartTypeElbow,vEnglishLanguage,s("The","joint","in","the","#$Arm","connecting","the","forearm","and","the","upper","arm",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312258).
lisp_trans(=>(tPartTypeElbow(E),exists([A],and(tPartTypeArm(A),part(E,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312364).
lisp_trans(genls(tPartTypeWrist,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312461).
lisp_trans(documentation(tPartTypeWrist,vEnglishLanguage,s("The","joint","in","the","#$Arm","connecting","the","radius","and","carpal","bones",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312488).
lisp_trans(=>(tPartTypeWrist(W),exists([A],and(tPartTypeArm(A),part(W,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312593).
lisp_trans(genls(tPartTypeToe,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312690).
lisp_trans(genls(tPartTypeToe,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312731).
lisp_trans(genls(tPartTypeToe,tSumoDigitAppendage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312755).
lisp_trans(documentation(tPartTypeToe,vEnglishLanguage,s("The","five","extremities","of","a","#$Foot",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312785).
lisp_trans(=>(tPartTypeToe(TOE),exists([FOOT],and(tSumoFoot(FOOT),part(TOE,FOOT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312858).
lisp_trans(genls(tPartTypeKnee,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':312977).
lisp_trans(documentation(tPartTypeKnee,vEnglishLanguage,s("The","joint","in","the","#$Leg","connecting","the","tibia","and","fibula","with","the","femur",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313003).
lisp_trans(=>(tPartTypeKnee(KNEE),exists([LEG],and(tPartTypeLeg(LEG),part(KNEE,LEG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313115).
lisp_trans(genls(tPartTypeShoulder,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313233).
lisp_trans(genls(tPartTypeShoulder,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313279).
lisp_trans(documentation(tPartTypeShoulder,vEnglishLanguage,s("The","part","of","a","#$Primate","between","the","#$Arm","and","the","neck",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313308).
lisp_trans(=>(tPartTypeShoulder(SHOULDER),exists([PRIMATE],and(tClazzPrimate(PRIMATE),part(SHOULDER,PRIMATE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313409).
lisp_trans(genls(tPartTypeKnuckle,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313555).
lisp_trans(documentation(tPartTypeKnuckle,vEnglishLanguage,s("Any","joint","in","a","#$Finger",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313584).
lisp_trans(=>(tPartTypeKnuckle(KNUCKLE),exists([FINGER],and(tPartTypeFinger(FINGER),part(KNUCKLE,FINGER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313652).
lisp_trans(genls(tPartTypeHipJoint,tSumoBodyJoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313791).
lisp_trans(documentation(tPartTypeHipJoint,vEnglishLanguage,s("The","hip","joint","is","a","synovial","joint","formed","by","the","articulation","of","the","rounded","head","of","the","femur","and","the","cup","-","like","acetabulum","of","the","pelvis",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':313821).
lisp_trans(genls(tPartTypeTorso,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314002).
lisp_trans(genls(tPartTypeTorso,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314045).
lisp_trans(documentation(tPartTypeTorso,vEnglishLanguage,s("The","body","of","a","#$Primate","excluding","its","#$Limbs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314071).
lisp_trans(=>(and(tPartTypeTorso(TORSO),tSumoLimb(LIMB)),not(overlapsSpatially(TORSO,LIMB))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314159).
lisp_trans(genls(tPartTypeWaist,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314274).
lisp_trans(documentation(tPartTypeWaist,vEnglishLanguage,s("The","waist","is","the","part","of","the","abdomen","between","the","rib","cage","and","hips",".","On","proportionate","people",",","the","waist","is","the","narrowest","part","of","the","torso",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314300).
lisp_trans(genls(tPartTypeBreast,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314480).
lisp_trans(genls(tPartTypeBreast,tPartTypeOrgan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314524).
lisp_trans(documentation(tPartTypeBreast,vEnglishLanguage,s("The","paired","#$Organs","which","are","part","of","the","chests","of","#$Primates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314548).
lisp_trans(=>(tPartTypeBreast(B),exists([T],and(tPartTypeTorso(T),part(B,uFrontFn(T))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314654).
lisp_trans(=>(tPartTypeBreast(B),exists([P],and(tClazzPrimate(P),part(B,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314773).
lisp_trans(genls(tSumoBust,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314875).
lisp_trans(documentation(tSumoBust,vEnglishLanguage,s("Bust","is","the","chest","of","a","woman",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314902).
lisp_trans(genls(tSumoHead,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':314978).
lisp_trans(genls(tSumoHead,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315020).
lisp_trans(documentation(tSumoHead,vEnglishLanguage,s("The","part","of","the","body","containing","the","sense","organs","and","the","brain",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315045).
lisp_trans(genls(tSumoNeck,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315150).
lisp_trans(genls(tSumoNeck,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315192).
lisp_trans(documentation(tSumoNeck,vEnglishLanguage,s("The","part","of","the","body","that","connects","the","#$Head","to","the","rest","of","the","body",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315217).
lisp_trans(=>(tSumoNeck(NECK),exists([HEAD],and(tSumoHead(HEAD),connected(NECK,HEAD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315329).
lisp_trans(genls(tSumoFace,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315456).
lisp_trans(genls(tSumoFace,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315498).
lisp_trans(documentation(tSumoFace,vEnglishLanguage,s("The","part","of","the","#$Head","from","forehead","to","chin","and","from","ear","to","ear",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315523).
lisp_trans(=>(tSumoFace(FACE),exists([HEAD],and(tSumoHead(HEAD),part(FACE,HEAD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315630).
lisp_trans(=>(tSumoFace(FACE),exists([VERTEBRATE],and(tClazzVertebrate(VERTEBRATE),part(FACE,VERTEBRATE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315752).
lisp_trans(genls(tPartTypeChin,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315898).
lisp_trans(genls(tPartTypeChin,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315940).
lisp_trans(documentation(tPartTypeChin,vEnglishLanguage,s("A","part","of","the","#$Face","which","protrudes","slightly","and","which","is","lower","than","all","other","parts","of","the","#$Face",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':315965).
lisp_trans(=>(tPartTypeChin(CHIN),exists([FACE],and(tSumoFace(FACE),part(CHIN,FACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316107).
lisp_trans(=>(tPartTypeChin(CHIN),all([PART],=>(and(part(PART,FACE),not(part(PART,CHIN))),orientation(PART,CHIN,tSumoBelow)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316229).
lisp_trans(sumo_partition(actExpressing,stateGesture,xtExpressingInLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316419).
lisp_trans(disjointDecomposition(actExpressing,tSumoExpressingApproval,tSumoExpressingDisapproval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316471).
lisp_trans(genls(tSumoExpressingApproval,actExpressing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316548).
lisp_trans(documentation(tSumoExpressingApproval,vEnglishLanguage,'Expressing favor about a physical thing  or a state of affairs.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316589).
lisp_trans(=>(and(tSumoExpressingApproval(EXPRESS),agent(EXPRESS,AGENT),patient(EXPRESS,THING)),or(wants(AGENT,THING),desires(AGENT,THING))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316709).
lisp_trans(genls(tSumoExpressingDisapproval,actExpressing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316897).
lisp_trans(documentation(tSumoExpressingDisapproval,vEnglishLanguage,'Expressing disfavor about a physical  thing or a state of affairs.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':316941).
lisp_trans(=>(and(tSumoExpressingDisapproval(EXPRESS),agent(EXPRESS,AGENT),patient(EXPRESS,THING)),or(dislikes(AGENT,THING),disapproves(AGENT,THING))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317067).
lisp_trans(genls(actRegretting,tSumoExpressingDisapproval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317265).
lisp_trans(genls(actApologizing,actRegretting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317309).
lisp_trans(documentation(actRegretting,vEnglishLanguage,'ExpressingDisapproval about a state of affairs  that has already occurred.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317343).
lisp_trans(=>(and(actRegretting(R),patient(R,T),ftSentence(T)),truth(T,vTrue)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317466).
lisp_trans(genls(tSumoExpressingFarewell,actExpressing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317574).
lisp_trans(documentation(tSumoExpressingFarewell,vEnglishLanguage,s("Any","instance","of","#$Expressing","an","acknowledgment","of","a","person","'s","departure",".","Note","that","this","class","is","not","a","subclass","of","#$LinguisticCommunication",",","because","it","covers","gestures","of","departure",",","e",".","g",".","#$Waving","and","#$Nodding","in","certain","circumstances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317615).
lisp_trans(genls(actCongratulating,tSumoExpressingApproval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317909).
lisp_trans(documentation(actCongratulating,vEnglishLanguage,s("Any","#$ExpressingApproval","to","a","person","for","something","that","the","person","did","in","the","past","and","that","is","regarded","as","being","to","the","benefit","of","the","person","congratulated",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':317954).
lisp_trans(=>(actCongratulating(C),exists([P,A,D],and(destination(C,D),agent(P,D),agent(C,A),wants(A,P),refers(C,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318162).
lisp_trans(genls(ftFacialExpression,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318352).
lisp_trans(documentation(ftFacialExpression,vEnglishLanguage,s("Any","#$Gesture","whose","#$instrument","is","the","#$Face",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318388).
lisp_trans(=>(and(ftFacialExpression(EXPRESS),agent(EXPRESS,AGENT)),exists([FACE],and(part(FACE,AGENT),tSumoFace(FACE),instrument(EXPRESS,FACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318488).
lisp_trans(genls(actSmiling,ftFacialExpression),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318705).
lisp_trans(documentation(actSmiling,vEnglishLanguage,s("Spreading","the","lips","in","such","a","way","as","to","convey","happiness",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318741).
lisp_trans(=>(and(actSmiling(SMILE),agent(SMILE,AGENT)),holdsDuring(uWhenFn(SMILE),sumoAttribute(AGENT,vtHappiness))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318842).
lisp_trans(genls(actFrowning,ftFacialExpression),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':318979).
lisp_trans(documentation(actFrowning,vEnglishLanguage,s("Furrowing","the","forehead","in","such","a","way","as","to","convey","unhappiness",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319016).
lisp_trans(=>(and(actFrowning(FROWN),agent(FROWN,AGENT)),holdsDuring(uWhenFn(FROWN),sumoAttribute(AGENT,vtUnhappiness))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319124).
lisp_trans(genls(actLaughing,actVocalizing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319264).
lisp_trans(genls(actLaughing,ftFacialExpression),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319295).
lisp_trans(documentation(actLaughing,vEnglishLanguage,s("Expressing","happiness","by","#$Vocalizing","in","a","certain","way",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319332).
lisp_trans(=>(actLaughing(LAUGH),exists([SMILE],and(actSmiling(SMILE),subProcess(SMILE,LAUGH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319432).
lisp_trans(genls(actWeeping,ftFacialExpression),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319572).
lisp_trans(documentation(actWeeping,vEnglishLanguage,'Expressing unhappiness by shedding tears.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319608).
lisp_trans(=>(and(actWeeping(WEEP),agent(WEEP,AGENT)),holdsDuring(uWhenFn(WEEP),sumoAttribute(AGENT,vtUnhappiness))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319695).
lisp_trans(genls(actNodding,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319832).
lisp_trans(documentation(actNodding,vEnglishLanguage,s("Moving","the","#$Head","up","and","down","or","side","to","side","to","indicate","approval","or","disapproval",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319859).
lisp_trans(=>(and(actNodding(NOD),patient(NOD,HEAD)),tSumoHead(HEAD)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':319986).
lisp_trans(genls(stateHandGesture,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320083).
lisp_trans(documentation(stateHandGesture,vEnglishLanguage,s("Any","#$Gesture","which","involves","the","#$Hands",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320114).
lisp_trans(=>(stateHandGesture(HG),exists([H],and(tPartTypeHand(H),patient(HG,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320202).
lisp_trans(genls(actWaving,stateHandGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320311).
lisp_trans(documentation(actWaving,vEnglishLanguage,s("Moving","a","#$Hand","to","indicate","a","greeting",",","farewell",",","recognition",",","goodwill",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320341).
lisp_trans(=>(and(actWaving(WAVE),patient(WAVE,HAND)),tPartTypeHand(HAND)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320462).
lisp_trans(genls(actClapping,stateHandGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320560).
lisp_trans(genls(actClapping,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320592).
lisp_trans(genls(actClapping,actImpacting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320627).
lisp_trans(documentation(actClapping,vEnglishLanguage,s("Bringing","the","#$Hands","together","repeatedly","to","make","a","loud","noise",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320657).
lisp_trans(genls(actInclining,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320765).
lisp_trans(genls(actInclining,tSumoMotionDownward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320797).
lisp_trans(documentation(actInclining,vEnglishLanguage,s("Moving","one","'s","body","downward","from","a","vertical","position",".","Note","that","this","class","covers","cases","of","leaning","forward",",","as","well","as","those","of","reclining","backwards",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':320833).
lisp_trans(genls(actBowing,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321029).
lisp_trans(genls(actBowing,actInclining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321055).
lisp_trans(genls(actBowing,tSumoMotionDownward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321083).
lisp_trans(documentation(actBowing,vEnglishLanguage,s("Any","downward","motion","of","the","body","that","indicates","respect","for","or","submission","to","another","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321116).
lisp_trans(genls(actSinking,actFalling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321252).
lisp_trans(documentation(actSinking,vEnglishLanguage,s("The","class","of","#$Falling","processes","that","occur","in","a","#$WaterArea",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321279).
lisp_trans(=>(actSinking(S),exists([W],and(tSumoWaterArea(W),eventLocated(S,W)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321385).
lisp_trans(genls(actDucking,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321498).
lisp_trans(genls(actDucking,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321536).
lisp_trans(genls(actDucking,tSumoMotionDownward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321566).
lisp_trans(documentation(actDucking,vEnglishLanguage,s("Purposely","moving","one","'s","body","downward","in","such","a","way","as","to","avoid","being","hit","by","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321600).
lisp_trans(=>(and(actDucking(MOTION),agent(MOTION,AGENT)),hasPurpose(MOTION,not(exists([IMPACT],and(actImpacting(IMPACT),patient(IMPACT,AGENT)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321731).
lisp_trans(genls(xtExpressingInLanguage,actExpressing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321927).
lisp_trans(genls(xtExpressingInLanguage,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':321970).
lisp_trans(documentation(xtExpressingInLanguage,vEnglishLanguage,s("Any","instance","of","#$Expressing","that","is","also","an","instance","of","#$LinguisticCommunication",",","e",".","g",".","thanking","someone",",","expressing","condolence",",","expressing","disapproval","with","an","utterance","rather","than","a","#$Gesture",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322026).
lisp_trans(genls(xtTonalLanguage,xtSpokenHumanLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322285).
lisp_trans(documentation(xtTonalLanguage,vEnglishLanguage,s("Any","#$SpokenHumanLanguage","that","uses","pitch","to","differentiate","otherwise","identical","words",",","e",".","g",".","Chinese",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322330).
lisp_trans(genls(actThanking,xtExpressingInLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322480).
lisp_trans(genls(actThanking,tSumoExpressingApproval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322521).
lisp_trans(documentation(actThanking,vEnglishLanguage,s("Any","#$ExpressingInLanguage","of","appreciation","to","a","person","for","something","that","the","person","did","in","the","past",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322560).
lisp_trans(=>(and(actThanking(THANK),agent(THANK,AGENT),patient(THANK,THING),destination(THANK,PERSON)),and(tSumoHuman(PERSON),or(holdsDuring(uWhenFn(THANK),wants(AGENT,THING)),holdsDuring(uWhenFn(THANK),desires(AGENT,THING))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':322707).
lisp_trans(=>(and(actThanking(T),destination(T,P)),tSumoHuman(P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323023).
lisp_trans(genls(actGreeting,actExpressing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323113).
lisp_trans(documentation(actGreeting,vEnglishLanguage,s("Any","instance","of","#$Expressing","an","acknowledgment","of","a","person","'s","arrival",".","Note","that","this","class","is","not","a","subclass","of","#$ExpressingInLanguage",",","because","it","covers","gestures","of","greeting",",","e",".","g",".","#$Waving","and","#$Nodding","in","certain","circumstances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323144).
lisp_trans(genlPreds(half,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323422).
lisp_trans(documentation(half,vEnglishLanguage,s("(","#$half","?","HALF","?","WHOLE",")","means","that","?","HALF","is","one","half","of","?","WHOLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323446).
lisp_trans(=>(half(HALF,WHOLE),exists([OTHER],and(half(OTHER,WHOLE),not(equal(OTHER,HALF)),equal(WHOLE,uMereologicalSumFn(HALF,OTHER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323549).
lisp_trans(documentation(third,vEnglishLanguage,s("(","third","?","THIRD","?","WHOLE",")","means","that","?","THIRD","is","one","third","of","?","WHOLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323734).
lisp_trans(genlPreds(third,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323839).
lisp_trans(=>(third(T,W),exists([O1,O2],and(third(O1,W),third(O2,W),not(equal(O1,T)),not(equal(O2,T)),not(equal(O1,O2)),equal(W,uMereologicalSumFn(T,uMereologicalSumFn(O1,O2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':323865).
lisp_trans(documentation(quarter,vEnglishLanguage,s("(","quarter","?","QUART","?","WHOLE",")","means","that","?","QUART","is","a","quarter","of","?","WHOLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324123).
lisp_trans(genlPreds(quarter,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324232).
lisp_trans(<=>(quarter(Q,W),exists([H],and(half(H,W),half(Q,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324260).
lisp_trans(genlPreds(most,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324349).
lisp_trans(documentation(most,vEnglishLanguage,s("(","#$most","?","MOST","?","WHOLE",")","means","that","?","MOST","is","a","#$part","of","?","WHOLE","that","is","greater","than","#$half","of","?","WHOLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324373).
lisp_trans(=>(most(MOST,WHOLE),exists([HALF,NUMBER1,NUMBER2,UNIT],and(half(HALF,WHOLE),measure(HALF,uMeasureFn(NUMBER1,UNIT)),measure(MOST,uMeasureFn(NUMBER2,UNIT)),greaterThan(NUMBER2,NUMBER1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324514).
lisp_trans(genls(tObjectBlueprint,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324773).
lisp_trans(documentation(tObjectBlueprint,vEnglishLanguage,s("An","#$Icon","which","is","a","scale","model","of","an","#$Artifact",",","whether","the","#$Artifact","actually","exists","or","not",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324799).
lisp_trans(=>(tObjectBlueprint(PLAN),hasPurpose(PLAN,exists([ARTIFACT],and(tObjectArtifact(ARTIFACT),represents(PLAN,ARTIFACT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':324943).
lisp_trans(genls(tChart,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325111).
lisp_trans(documentation(tChart,vEnglishLanguage,s("An","#$Icon","which","depicts","one","or","more","quantities",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325133).
lisp_trans(=>(tChart(CHART),exists([QUANTITY],and(vtPhysicalQuantity(QUANTITY),refers(CHART,QUANTITY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325222).
lisp_trans(genls(tObjectFlag,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325373).
lisp_trans(documentation(tObjectFlag,vEnglishLanguage,s("An","#$Icon","made","of","#$Fabric","that","refers","to","a","particular","#$GeopoliticalArea",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325394).
lisp_trans(=>(tObjectFlag(FLAG),exists([FABRIC],and(tSumoFabric(FABRIC),part(FABRIC,FLAG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325510).
lisp_trans(genls(tObjectNationalFlag,tObjectFlag),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325640).
lisp_trans(documentation(tObjectNationalFlag,vEnglishLanguage,s("A","#$Flag","that","is","the","official","flag","of","a","#$Nation",",","e",".","g",".","the","stars","and","stripes","is","the","#$NationalFlag","of","the","United","States",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325669).
lisp_trans(=>(tObjectNationalFlag(F),exists([N],and(actNation(N),refers(F,N)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325839).
lisp_trans(=>(tChart(G),exists([Q],and(vtPhysicalQuantity(Q),refers(G,Q)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':325948).
lisp_trans(genls(tSumoArrowIcon,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326060).
lisp_trans(documentation(tSumoArrowIcon,vEnglishLanguage,s("An","#$Icon","which","has","the","shape","of","an","arrow","and","which","is","used","to","indicate","direction","or","a","relationship","between","two","things",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326086).
lisp_trans(genls(cwMap,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326252).
lisp_trans(documentation(cwMap,vEnglishLanguage,s("An","#$Icon","which","represents","one","or","more","#$GeographicAreas","(","or","even","the","entire","#$Earth",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326272).
lisp_trans(=>(cwMap(M),exists([A],and(tSumoGeographicArea(A),represents(M,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326399).
lisp_trans(genls(tSumoPhotograph,tSumoImage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326511).
lisp_trans(genls(tSumoPhotograph,actRecording),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326539).
lisp_trans(documentation(tSumoPhotograph,vEnglishLanguage,s("An","#$Image","that","is","the","result","of","a","process","of","#$Photographing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326577).
lisp_trans(genls(actPhotographing,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326687).
lisp_trans(documentation(actPhotographing,vEnglishLanguage,'ContentDevelopment where the #$instrument  is a camera and the #$result is a #$Photograph.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326731).
lisp_trans(=>(actPhotographing(SHOOT),exists([PHOTO,CAMERA],and(tSumoPhotograph(PHOTO),result(SHOOT,PHOTO),instrument(SHOOT,CAMERA),tObjectCamera(CAMERA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':326873).
lisp_trans(genls(tObjectCamera,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327097).
lisp_trans(documentation(tObjectCamera,vEnglishLanguage,s("A","#$Device","which","is","capable","of","#$Photographing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327122).
lisp_trans(=>(tObjectCamera(CAMERA),capability(actPhotographing,instrument,CAMERA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327212).
lisp_trans(vtUnitOfMass(tSumoTonMass),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327687).
lisp_trans(documentation(tSumoTonMass,vEnglishLanguage,s("English","mass","unit","that","is","equal","to","2000","pounds",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327717).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,tSumoTonMass),uMeasureFn(uMultiplicationFn(NUMBER,2000),tSumoPoundMass))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327808).
lisp_trans(vtUnitOfMass(vMetricTonFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':327971).
lisp_trans(documentation(vMetricTonFn,vEnglishLanguage,'MetricTon is a #$UnitOfMeasure that represents  a weight of 2,205 #$PoundMass.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328003).
lisp_trans(equal(uMeasureFn(1,vMetricTonFn),uMeasureFn(2205,tSumoPoundMass)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328129).
lisp_trans(<=>(measure(O,uMeasureFn(A,vMetricTonFn)),measure(O,uMeasureFn(uMultiplicationFn(A,2205),tSumoPoundMass))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328195).
lisp_trans(vtUnitOfMass(tSumoLongTon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328328).
lisp_trans(documentation(tSumoLongTon,vEnglishLanguage,'LongTon is the #$UnitOfMeasure,  equal to 2,240 #$PoundMass, which is used to measure Dead Weight  Tonnage capacity of #$Ships.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328358).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,tSumoLongTon),uMeasureFn(uMultiplicationFn(NUMBER,2240),tSumoPoundMass))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328531).
lisp_trans(vtUnitOfVolume(vCubicFootFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328684).
lisp_trans(documentation(vCubicFootFn,vEnglishLanguage,'CubicFoot is a unit for measuring volume,  equal to a volume of one foot length in each dimension of length, width,  and height.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328718).
lisp_trans(equal(uMeasureFn(1,vCubicFootFn),uMultiplicationFn(uMeasureFn(1,tSumoFootLength),uMultiplicationFn(uMeasureFn(1,tSumoFootLength),uMeasureFn(1,tSumoFootLength)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':328894).
lisp_trans(=>(and(equal(N4,uMultiplicationFn(N1,uMultiplicationFn(N2,N3))),equal(QUANT,uMultiplicationFn(uMeasureFn(N1,tSumoFootLength),uMultiplicationFn(uMeasureFn(N2,tSumoFootLength),uMeasureFn(N3,tSumoFootLength))))),equal(QUANT,uMeasureFn(N4,vCubicFootFn))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329070).
lisp_trans(names(s("Registry","Ton"),tSumoRegistryTon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329384).
lisp_trans(names(s("Gross","Ton"),tSumoRegistryTon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329419).
lisp_trans(vtUnitOfVolume(tSumoRegistryTon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329451).
lisp_trans(documentation(tSumoRegistryTon,vEnglishLanguage,'RegistryTon is a unit of measure used to represent the Gross Registered Tonnage (GRT) capacity of #$Ships.  GRT is based on a volume measure, with one #$RegistryTon equal to a volume of 100 cubic feet.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329487).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,tSumoRegistryTon),uMeasureFn(uMultiplicationFn(NUMBER,100),vCubicFootFn))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329738).
lisp_trans(vtUnitOfInformation(tSumoPage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329902).
lisp_trans(documentation(tSumoPage,vEnglishLanguage,s("A","single","page","of","#$Text",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':329936).
lisp_trans(vtUnitOfVolume(tSumoLiquorShot),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330001).
lisp_trans(documentation(tSumoLiquorShot,vEnglishLanguage,s("A","#$UnitOfMeasure","used","in","preparing","#$AlcoholicBeverages",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330036).
lisp_trans(vtUnitOfDuration(actMillenniumDuration),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330140).
lisp_trans(documentation(actMillenniumDuration,vEnglishLanguage,s("The","#$UnitOfDuration","of","1000","years",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330185).
lisp_trans(=>(equal(N,uMultiplicationFn(1,N)),equal(uMeasureFn(N,actMillenniumDuration),uMeasureFn(uMultiplicationFn(N,1000),actYearDuration))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330275).
lisp_trans(vtUnitOfArea(vAcreFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330422).
lisp_trans(documentation(vAcreFn,vEnglishLanguage,s("A","#$UnitOfMeasure","equal","to","4840","square","yards",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330449).
lisp_trans(vtUnitOfArea(vSquareMileFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330535).
lisp_trans(documentation(vSquareMileFn,vEnglishLanguage,'SquareMile represents a #$UnitOfMeasure  equal to one square #$Mile.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330568).
lisp_trans(equal(uMeasureFn(1,vSquareMileFn),cycPerFn(uMeasureFn(1,vMileFn),uMeasureFn(1,vMileFn))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330685).
lisp_trans(vtUnitOfArea(vSquareYardFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330780).
lisp_trans(documentation(vSquareYardFn,vEnglishLanguage,'SquareYard represents a #$UnitOfMeasure  equal to one square #$YardLength.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330813).
lisp_trans(equal(uMeasureFn(1,vSquareYardFn),cycPerFn(uMeasureFn(1,tSumoYardLength),uMeasureFn(1,tSumoYardLength))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':330936).
lisp_trans(rtBinaryPredicate(creator),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331708).
lisp_trans(argIsa(creator,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331743).
lisp_trans(argIsa(creator,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331768).
lisp_trans(documentation(creator,vEnglishLanguage,s("(","creator","?","AGENT","?","ENTITY",")","means","that","some","#$Agent","?","AGENT","is","the","creator","of","some","#$Entity","?","ENTITY")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331794).
lisp_trans(termFormat(vEnglishLanguage,creator,"creator"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331933).
lisp_trans(=>(creator(AGENT,ENTITY),exists([CREATION],and(actCreation(CREATION),agent(CREATION,AGENT),result(CREATION,ENTITY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':331980).
lisp_trans(genls(iboMusic,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332152).
lisp_trans(documentation(iboMusic,vEnglishLanguage,'Music refers to the conception of music - it\'s notes, tempo, arrangement, lyrics, etc. as thought by its composers and lyricist.  Some types of #$Music are conceptualized with only the background instrumentation thought of, while some types of #$Music are conceptualized with the thought of having both lyrics and musical composition combined.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332181).
lisp_trans(termFormat(vEnglishLanguage,iboMusic,"music"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332567).
lisp_trans(=>(and(iboMusic(MC),realization(MUSIC,MC)),tSumoMakingMusic(MUSIC)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332611).
lisp_trans(genls(cwMusicalComposition,iboMusic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332711).
lisp_trans(documentation(cwMusicalComposition,vEnglishLanguage,'MusicalComposition refers to the the conception of a musical arrangement not including any #$LyricalContent.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332747).
lisp_trans(termFormat(vEnglishLanguage,cwMusicalComposition,s("musical","composition")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332911).
lisp_trans(comment(cwMusicalComposition,s("Currently",",","MusicalComposition","is","treated","as","text",",","and","there","is","no","propositional","content","related","to","it",".","This","is","dangerous",",","as","there","could","be","millions","of","instances","of","(","for","instance",")","sheet","music","containing","Beethoven","'s","Fifth","Symphony",",","and","only","having","MusicalComposition","equal","to","an","object","would","imply","that","all","of","this","different","instances","are","different","from","each","other",".","You","could","also","have","many","different","arrangements","of","the","same","musical","composition",".","As","such",",","I","propose","making","MusicalComposition","a","Proposition",",","which","refers","more","to","the","conception","of","the","music",",","and","SheetMusic","the","content","bearing","object","that","contains","information","about","a","particular","MusicalComposition",".","(","9","-13","-2011",")"),"KJN"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':332981).
lisp_trans(=>(and(cwMusicalComposition(MC),realization(MC,MUSIC)),not(exists([LC,V],and(actSinging(V),patient(V,LC),tSumoLyricalContent(LC),subProcess(V,MUSIC))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':333707).
lisp_trans(genls(tSumoSong,iboMusic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':333963).
lisp_trans(documentation(tSumoSong,vEnglishLanguage,'Song refers to the conception of music that  includes both #$MusicalComposition and #$LyricalComposition.  While a #$Song can be interpreted without its #$LyricalContent, or its #$LyricalContent is used elsewhere,  the idea of #$Song as it was originally conceptualized is that it contains both.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':333985).
lisp_trans(termFormat(vEnglishLanguage,tSumoSong,"song"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':334322).
lisp_trans(=>(and(tSumoSong(S),realization(S,MUSIC)),exists([MM,MV,LC,MC],and(tSumoMakingMusic(MM),actSinging(MV),tSumoLyricalContent(LC),cwMusicalComposition(MC),patient(MM,MC),patient(MV,LC),subProcess(MM,MUSIC),subProcess(MV,MUSIC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':334364).
lisp_trans(genls(tSumoLyricalContent,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':334716).
lisp_trans(documentation(tSumoLyricalContent,vEnglishLanguage,'LyricalContent is the conceptual  idea of #$Lyrics.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':334754).
lisp_trans(comment(tSumoLyricalContent,s("It","is","important","to","distinguish","the","propositional","content","of","#$Lyrics","from","the","text","that","displays","it",".","Some","songs","are","translated","from","one","language","to","another",",","but","use","essentially","the","same","Lyrical","content",".","(","9","-15","-2011",")"),"KJN"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':334857).
lisp_trans(termFormat(vEnglishLanguage,tSumoLyricalContent,s("lyrical","content")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335109).
lisp_trans(=>(tSumoLyricalContent(X),hasPurpose(X,exists([S],and(actSinging(S),patient(S,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335172).
lisp_trans(=>(tSumoLyricalContent(L),exists([W,I],and(tSumoWord(W),containsInformation(W,I),subProposition(I,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335312).
lisp_trans(vtDeonticAttribute(tSumoLegislativeBill),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335474).
lisp_trans(documentation(tSumoLegislativeBill,vEnglishLanguage,s("The","#$Attribute","of","being","a","proposed","law",",","i",".","e",".","being","under","consideration","by","a","legislative","body","of","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335518).
lisp_trans(=>(holdsDuring(TIME1,modalAttribute(TEXT,cwLaw)),exists([TIME2],and(holdsDuring(TIME2,sumoAttribute(TEXT,tSumoLegislativeBill)),earlier(TIME2,TIME1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335681).
lisp_trans(genls(tSumoPassingABill,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335868).
lisp_trans(genls(tSumoPassingABill,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335909).
lisp_trans(documentation(tSumoPassingABill,vEnglishLanguage,s("The","#$Process","of","converting","a","#$LegislativeBill","into","#$Law","by","a","duly","authorized","legislative","body","of","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':335943).
lisp_trans(=>(and(tSumoPassingABill(PASS),patient(PASS,TEXT)),and(holdsDuring(uBeginFn(uWhenFn(PASS)),sumoAttribute(TEXT,tSumoLegislativeBill)),holdsDuring(iTimeOf_EndFn(uWhenFn(PASS)),sumoAttribute(TEXT,cwLaw)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336290).
lisp_trans(vtDeonticAttribute(tSumoInternationalLaw),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336522).
lisp_trans(subAttribute(tSumoInternationalLaw,cwLaw),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336567).
lisp_trans(documentation(tSumoInternationalLaw,vEnglishLanguage,s("An","#$Attribute","that","applies","to","#$Propositions","that","express","#$Laws","concerning","the","relations","between","#$Nations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336603).
lisp_trans(vtDeonticAttribute(tSumoIllegal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336766).
lisp_trans(subAttribute(tSumoIllegal,cwProhibition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336802).
lisp_trans(contraryAttribute(tSumoIllegal,tSumoLegal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336837).
lisp_trans(documentation(tSumoIllegal,vEnglishLanguage,s("A","proposition","is","#$Illegal","just","in","case","it","is","inconsistent","with","any","proposition","that","is","a","#$Law",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':336871).
lisp_trans(vtDeonticAttribute(tSumoLegal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337012).
lisp_trans(subAttribute(tSumoLegal,cwPermission),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337046).
lisp_trans(documentation(tSumoLegal,vEnglishLanguage,s("A","proposition","is","#$Legal","just","in","case","it","is","not","inconsistent","with","any","proposition","that","is","a","#$Law",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337078).
lisp_trans(<=>(modalAttribute(F1,tSumoLegal),not(exists([F2],and(modalAttribute(F2,cwLaw),not(consistent(F1,F2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337219).
lisp_trans(genls(actCriminalAction,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337367).
lisp_trans(documentation(actCriminalAction,vEnglishLanguage,s("Any","#$IntentionalProcess","that","violates","a","#$Law",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337412).
lisp_trans(=>(actCriminalAction(ACTION),exists([LAW,CONTENT,CRIME],and(modalAttribute(LAW,cwLaw),containsInformation(LAW,CONTENT),realization(ACTION,CRIME),not(consistent(CONTENT,CRIME))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337510).
lisp_trans(genls(tSumoPoliticalCrime,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337762).
lisp_trans(genls(tSumoPoliticalCrime,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337803).
lisp_trans(documentation(tSumoPoliticalCrime,vEnglishLanguage,s("A","#$CriminalAction","that","is","committed","by","or","against","#$Governments",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337846).
lisp_trans(genls(actPoliticalRevolution,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':337963).
lisp_trans(genls(actPoliticalRevolution,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338011).
lisp_trans(documentation(actPoliticalRevolution,vEnglishLanguage,s("The","violent","overthrow","of","one","#$Government","and","its","replacement","by","another",".","This","covers","grass","-","roots","revolutions",",","as","well","as","coups","d","'","etat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338057).
lisp_trans(=>(and(actPoliticalRevolution(R),patient(R,A)),tSumoGeopoliticalArea(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338251).
lisp_trans(=>(and(actPoliticalRevolution(R),patient(R,A)),exists([GOV1,GOV2],and(holdsDuring(uBeginFn(uWhenFn(R)),equal(GOV1,iGroup_GovernmentFn(A))),holdsDuring(iTimeOf_EndFn(uWhenFn(R)),equal(GOV2,iGroup_GovernmentFn(A))),not(equal(GOV1,GOV2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338356).
lisp_trans(genls(tSumoLawEnforcement,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338663).
lisp_trans(genls(tSumoLawEnforcement,actRegulatoryProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338706).
lisp_trans(documentation(tSumoLawEnforcement,vEnglishLanguage,s("Any","#$RegulatoryProcess","where","the","agent","is","either","a","#$PoliceOrganization","or","a","member","of","a","#$PoliceOrganization",".","This","covers","everything","from","issuing","a","traffic","ticket","to","arresting","someone","on","suspicion","of","having","committed","a","#$Murder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':338750).
lisp_trans(=>(and(tSumoLawEnforcement(L),agent(L,AGENT)),or(tGroupedPoliceOrganization(P),exists([O],and(tGroupedPoliceOrganization(O),member(P,O))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339035).
lisp_trans(genls(actImprisoning,actConfining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339242).
lisp_trans(documentation(actImprisoning,vEnglishLanguage,s("The","class","of","#$Confining","processes","where","the","detainee","is","put","in","#$Prison",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339275).
lisp_trans(=>(actImprisoning(I),exists([P],and(tPlaceLikePrison(P),eventLocated(I,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339397).
lisp_trans(genls(actEspionage,actPoliticalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339511).
lisp_trans(genls(actEspionage,actInvestigating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339549).
lisp_trans(documentation(actEspionage,vEnglishLanguage,s("Any","Investigating","by","one","#$Government","of","another","#$Government","where","the","second","Government","does","not","know","that","it","is","being","spied","upon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339584).
lisp_trans(=>(actEspionage(S),exists([GOV1,GOV2],and(tSumoGovernment(GOV1),tSumoGovernment(GOV2),agent(S,GOV1),patient(S,GOV2),not(equal(GOV1,GOV2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339763).
lisp_trans(genls(actPolling,actInvestigating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':339988).
lisp_trans(documentation(actPolling,vEnglishLanguage,s("Investigating","what","people","believe","(","and","in","what","proportions",")","by","asking","a","set","of","structured","questions","to","a","random","sample","of","people",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340021).
lisp_trans(genls(actMilitaryInfiltration,actMilitaryProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340195).
lisp_trans(genls(actMilitaryInfiltration,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340243).
lisp_trans(documentation(actMilitaryInfiltration,vEnglishLanguage,s("Any","#$Process","by","a","#$MilitaryOrganization","which","involves","moving","through","enemy","positions","without","detection","by","the","enemy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340289).
lisp_trans(genls(cwAgreement,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340466).
lisp_trans(documentation(cwAgreement,vEnglishLanguage,'Agreement is the class of #$Propositions  that express the contents of agreements entered into by #$CognitiveAgents. #$Agreement  includes treaties, contracts, purchase orders, pledges, marriage vows, etc.  An  #$Agreement may be written down in a document or other #$ContentBearingObject, it can be verbal #$Communication, it can even be an implied agreement.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340499).
lisp_trans(termFormat(vEnglishLanguage,cwAgreement,"agreement"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340906).
lisp_trans(=>(cwAgreement(COMPACT),exists([COMM],and(actCommitting(COMM),represents(COMM,COMPACT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':340958).
lisp_trans(=>(cwAgreement(AGREEMENT),exists([AGENT1,AGENT2],and(partyToAgreement(AGENT1,AGREEMENT),partyToAgreement(AGENT2,AGREEMENT),not(equal(AGENT1,AGENT2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':341093).
lisp_trans(rtBinaryPredicate(partyToAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342072).
lisp_trans(documentation(partyToAgreement,vEnglishLanguage,s("(","#$partyToAgreement","?","AGENT","?","PROP",")","means","that","the","#$Agent","?","AGENT","has","committed","to","the","agreement","?","PROP",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342116).
lisp_trans(termFormat(vEnglishLanguage,partyToAgreement,s("party","to","agreement")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342270).
lisp_trans(argIsa(partyToAgreement,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342338).
lisp_trans(argIsa(partyToAgreement,2,cwAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342381).
lisp_trans(=>(partyToAgreement(AGENT,CONTENT),exists([C],and(actCommitting(C),agent(C,AGENT),patient(C,CONTENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342420).
lisp_trans(rtBinaryPredicate(agreementPeriod),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342572).
lisp_trans(argIsa(agreementPeriod,1,cwAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342615).
lisp_trans(argIsa(agreementPeriod,2,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342652).
lisp_trans(documentation(agreementPeriod,vEnglishLanguage,s("(","#$agreementPeriod","?","AGREEMENT","?","DURATION",")","holds","if","?","DURATION","specifies","a","#$TimeDuration",",","which","is","the","length","of","time","that","the","?","AGREEMENT","is","#$ActiveAgreement",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342692).
lisp_trans(=>(and(agreementPeriod(AGREEMENT,DURATION),agreementEffectiveDate(AGREEMENT,STARTDATE)),holdsDuring(timeTimePeriodFn(STARTDATE,DURATION),sumoProperty(AGREEMENT,tSumoActiveAgreement))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':342902).
lisp_trans(rtBinaryPredicate(agreementEffectiveDate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343112).
lisp_trans(argIsa(agreementEffectiveDate,1,cwAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343162).
lisp_trans(argIsa(agreementEffectiveDate,2,timeOfTimePoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343206).
lisp_trans(documentation(agreementEffectiveDate,vEnglishLanguage,s("(","#$agreementEffectiveDate","?","AGREEMENT","?","TIME",")","means","that","?","AGREEMENT","goes","into","effect","at","#$TimePoint","?","TIME",",","and","remains","an","#$ActiveAgreement","for","#$TimeDuration","?","DURATION",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343250).
lisp_trans(rtBinaryFunction(timeTimePeriodFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343484).
lisp_trans(documentation(timeTimePeriodFn,vEnglishLanguage,s("(","#$TimePeriodFn","?","TIMEPOINT","?","DURATION",")","accepts","#$TimePoint","?","TIMEPOINT","and","#$TimeDuration","?","DURATION","and","returns","a","#$TimeInterval","that","starts","from","?","TIMEPOINT","and","ends","at","the","end","of","?","DURATION")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343523).
lisp_trans(termFormat(vEnglishLanguage,timeTimePeriodFn,s("time","period","function")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343759).
lisp_trans(argIsa(timeTimePeriodFn,1,timeOfTimePoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343825).
lisp_trans(argIsa(timeTimePeriodFn,2,timeTimeDuration),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343859).
lisp_trans(resultIsa(timeTimePeriodFn,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343896).
lisp_trans(=>(and(timeOfTimePoint(T1),timeOfTimePoint(T2),equal(INTERVAL,timeTimeIntervalFn(T1,T2)),duration(INTERVAL,PERIOD)),equal(INTERVAL,timeTimePeriodFn(T1,PERIOD))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':343931).
lisp_trans(rtBinaryPredicate(agreementExpirationDate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344130).
lisp_trans(argIsa(agreementExpirationDate,1,cwAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344181).
lisp_trans(argIsa(agreementExpirationDate,2,timeOfTimePoint),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344226).
lisp_trans(documentation(agreementExpirationDate,vEnglishLanguage,s("(","#$agreementExpirationDate","?","AGREEMENT","?","ENDDATE",")","means","that","?","ENDDATE","is","the","date","on","which","?","AGREEMENT","is","no","longer","#$ActiveAgreement",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344271).
lisp_trans(=>(agreementExpirationDate(AGREEMENT,ENDDATE),holdsDuring(eventFutureFn(ENDDATE),not(sumoProperty(AGREEMENT,tSumoActiveAgreement)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344464).
lisp_trans(rtQuaternaryPredicate(agreementClause),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344605).
lisp_trans(documentation(agreementClause,vEnglishLanguage,s("(","#$agreementClause","?","PROP","?","ATTR","?","AGREEMENT","?","AGENT",")","means","that","#$Proposition","?","PROP",",","which","has","#$modalAttribute","?","ATTR",",","is","part","of","#$Agreement","?","AGREEMENT","and",",","with","#$CognitiveAgent","?","AGENT","being","the","one","responsible","to","make","the","statement","true")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344652).
lisp_trans(termFormat(vEnglishLanguage,agreementClause,s("agreement","clause")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':344940).
lisp_trans(argIsa(agreementClause,1,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345005).
lisp_trans(argIsa(agreementClause,2,vtDeonticAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345044).
lisp_trans(argIsa(agreementClause,3,cwAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345088).
lisp_trans(argIsa(agreementClause,4,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345125).
lisp_trans(=>(agreementClause(PROP,ATTR,AGREEMENT,AGENT),and(exists([CLAUSE],containsInformation(CLAUSE,PROP)),partyToAgreement(AGENT,AGREEMENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345168).
lisp_trans(=>(and(agreementClause(PROP,ATTR,AGREEMENT,AGENT),or(equal(ATTR,cwObligation),equal(ATTR,eventPromise))),modalAttribute(exists([PROC],and(realization(PROC,PROP),agent(PROC,AGENT))),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345346).
lisp_trans(=>(agreementClause(PROP,cwProhibition,AGREEMENT,AGENT),not(holdsRight(exists([PROC],and(realization(PROC,PROP),agent(PROC,AGENT))),AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345610).
lisp_trans(=>(agreementClause(PROP,cwPermission,AGREEMENT,AGENT),holdsRight(exists([PROC],and(realization(PROC,PROP),agent(PROC,AGENT))),AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':345816).
lisp_trans(vtRelationalAttribute(tSumoActiveAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346001).
lisp_trans(documentation(tSumoActiveAgreement,vEnglishLanguage,'ActiveAgreement describes an #$Agreement that is still binding or is still in effect'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346048).
lisp_trans(termFormat(vEnglishLanguage,tSumoActiveAgreement,s("active","agreement")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346185).
lisp_trans(=>(sumoProperty(AGREEMENT,tSumoActiveAgreement),cwAgreement(AGREEMENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346250).
lisp_trans(=>(sumoProperty(AGREEMENT,tSumoActiveAgreement),modalAttribute(exists([PROC],realization(PROC,AGREEMENT)),cwObligation)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346330).
lisp_trans(=>(sumoProperty(ENTITY,eventPromise),or(sumoProperty(ENTITY,cwContract),sumoProperty(ENTITY,tSumoNakedPromise))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':346951).
lisp_trans(subAttribute(tSumoNakedPromise,eventPromise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347076).
lisp_trans(documentation(tSumoNakedPromise,vEnglishLanguage,s("A","#$Promise","where","nothing","is","promised","in","return",",","i",".","e",".","a","nudum","pactum",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347112).
lisp_trans(subAttribute(cwContract,tSumoActiveAgreement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347231).
lisp_trans(subAttribute(cwContract,eventPromise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347271).
lisp_trans(documentation(cwContract,vEnglishLanguage,'Contract is a type of #$Agreement that is  legally enforceable, meaning a #$CognitiveAgent can pursue other parties of the  agreement in a court of law if provisions of the contract are not followed or kept.   It follows that all subpropositions of the #$Contract is #$Legal.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347303).
lisp_trans(termFormat(vEnglishLanguage,cwContract,"contract"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347624).
lisp_trans(contraryAttribute(tSumoNakedPromise,cwContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347673).
lisp_trans(=>(sumoProperty(AGREEMENT,cwContract),all([X],=>(subProposition(X,AGREEMENT),modalAttribute(X,tSumoLegal)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347716).
lisp_trans(=>(and(sumoProperty(AGREEMENT,cwContract),partyToAgreement(AGENT1,AGREEMENT),partyToAgreement(AGENT2,AGREEMENT),actIntentionalProcess(PROC),agent(PROC,AGENT1),realization(PROC,PROP),not(consistent(PROP,AGREEMENT))),modalAttribute(exists([LEGAL],and(actLegalAction(LEGAL),plaintiff(LEGAL,AGENT2),defendant(LEGAL,AGENT1))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':347855).
lisp_trans(subAttribute(cwMarriageContract,cwContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348297).
lisp_trans(documentation(cwMarriageContract,vEnglishLanguage,s("An","#$Contract","between","a","married","couple","about","how","assets","owned","by","the","couple","will","be","distributed","in","the","event","that","the","couple","is","divorced",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348338).
lisp_trans(=>(sumoProperty(C,cwMarriageContract),exists([P1,P2],and(partyToAgreement(C,P1),partyToAgreement(C,P2),spouse(P1,P2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348530).
lisp_trans(subAttribute(tSumoPurchaseContract,cwContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348691).
lisp_trans(documentation(tSumoPurchaseContract,vEnglishLanguage,s("A","#$Contract","between","two","#$Agents","in","which","one","#$Agent","agrees","to","render","the","other","some","good","or","service","in","exchange","for","currency",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348732).
lisp_trans(=>(sumoProperty(C,tSumoPurchaseContract),exists([S],and(actSelling(S),agent(S,SELLER),destination(S,BUYER),realization(S,C),partyToAgreement(C,SELLER),partyToAgreement(C,BUYER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':348915).
lisp_trans(subAttribute(tSumoServiceContract,cwContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':349160).
lisp_trans(documentation(tSumoServiceContract,vEnglishLanguage,s("A","#$Contract","where","an","#$Agent","agrees","to","perform","a","service","for","another","#$Agent","(","usually","for","a","price",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':349200).
lisp_trans(=>(sumoProperty(C,tSumoServiceContract),exists([SP],and(actServiceProcess(SP),realization(SP,C),serviceProvider(SP,SERVICE),serviceRecipient(SP,CUST),partyToAgreement(C,SERVICE),partyToAgreement(C,CUST)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':349353).
lisp_trans(subAttribute(cwWarranty,tSumoServiceContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':349642).
lisp_trans(documentation(cwWarranty,vEnglishLanguage,s("A","#$Contract","that","states","the","cirumstances","under","which","defects","in","the","product","will","be","corrected","for","no","charge",".","A","#$Warranty","is","usually","limited","to","a","length","of","time","that","is","specified","in","the","#$Warranty","itself",".","A","#$Warranty","also","includes","information","about","what","is","not","covered","and","actions","that","invalidate","the","#$Warranty",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':349682).
lisp_trans(subAttribute(cwTreaty,cwContract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350059).
lisp_trans(documentation(cwTreaty,vEnglishLanguage,s("Any","#$Contract","which","holds","between","two","or","more","#$Nations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350090).
lisp_trans(=>(sumoProperty(T,cwTreaty),exists([N1,N2],and(partyToAgreement(T,N1),partyToAgreement(T,N2),actNation(N1),actNation(N2),not(equal(N1,N2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350191).
lisp_trans(disjointDecomposition(ftSentence,iboStatement,actSupposition,actQuestion,eventRequest,tSumoOrder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350408).
lisp_trans(genls(iboStatement,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350487).
lisp_trans(documentation(iboStatement,vEnglishLanguage,s("A","#$Sentence","that","is","stated","to","be","true",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350517).
lisp_trans(=>(and(actStating(STATE),result(STATE,SENTENCE),ftSentence(SENTENCE)),iboStatement(SENTENCE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350602).
lisp_trans(genls(tSumoFact,iboStatement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350751).
lisp_trans(documentation(tSumoFact,vEnglishLanguage,s("The","class","of","#$Statements","that","are","#$True",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350777).
lisp_trans(=>(tSumoFact(FACT),truth(FACT,vTrue)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350860).
lisp_trans(genls(actQuestion,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350913).
lisp_trans(documentation(actQuestion,vEnglishLanguage,s("An","interrogative","#$Sentence",",","a","#$Sentence","that","poses","a","question",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':350942).
lisp_trans(=>(and(actQuestioning(QUESTION),result(QUESTION,SENTENCE),ftSentence(SENTENCE)),actQuestion(SENTENCE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351052).
lisp_trans(genls(actSupposition,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351210).
lisp_trans(documentation(actSupposition,vEnglishLanguage,s("A","#$Sentence","that","is","assumed","to","be","true",",","possibly","just","for","the","sake","of","argument",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351242).
lisp_trans(=>(and(actSupposing(SUPPOSE),result(SUPPOSE,SENTENCE),ftSentence(SENTENCE)),actSupposition(SENTENCE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351371).
lisp_trans(genls(eventRequest,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351528).
lisp_trans(documentation(eventRequest,vEnglishLanguage,s("A","#$Sentence","that","expresses","a","request","for","something","or","that","something","be","done",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351556).
lisp_trans(=>(and(actRequesting(REQUEST),result(REQUEST,SENTENCE),ftSentence(SENTENCE)),eventRequest(SENTENCE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351679).
lisp_trans(genls(tSumoOrder,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351833).
lisp_trans(documentation(tSumoOrder,vEnglishLanguage,s("A","#$Sentence","that","expresses","an","order","for","something","or","that","something","be","done",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351859).
lisp_trans(=>(and(actOrdering(ORDER),result(ORDER,SENTENCE),ftSentence(SENTENCE)),tSumoOrder(SENTENCE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':351979).
lisp_trans(genls(actAudioRecording,actRecording),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':352125).
lisp_trans(comment(actAudioRecording,s("In","ver","1.111","of","Mid","-","level","-","ontology",".","kif",",","it","says","that","(","#$subclass","#$AudioRecording","#$Text",")",".","This","does","not","seem","right",".","Deleting","that","statement",".","Creating","a","parent","class","called","#$Recording","which","means","something","that","captures","a","#$Process","that","happened","in","real","life",".","#$AudioRecording","and","#$VideoRecording","will","inherit","from","there",".","A","#$Photograph","is","also","a","still","recording","of","what","happened","in","real","life","-","as","opposed","to","Graphic","Art","which","is","more","of","an","#$ArtWork","than","a","#$Recording",",","so","it","will","also","inherit","from","#$Recording",".","(","9","-14","-2011",")"),"KJN"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':352161).
lisp_trans(documentation(actAudioRecording,vEnglishLanguage,s("A","representation","of","sound","on","some","medium","such","as","wax","cylinder",",","vinyl","record",",","magnetic","tape",",","CD","or","flash","memory",",","that","is","intended","to","be","used","in","some","machine","to","reproduce","that","sound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':352734).
lisp_trans(=>(actAudioRecording(X),exists([EV],and(tSumoRadiatingSound(EV),represents(X,EV),capability(tSumoRadiatingSound,patient,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':352966).
lisp_trans(=>(actAudioRecording(RECORD),exists([INFO,SOUND],and(containsInformation(RECORD,INFO),realization(SOUND,INFO),tSumoRadiatingSound(SOUND)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353137).
lisp_trans(genlPreds(record,represents),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353329).
lisp_trans(documentation(record,vEnglishLanguage,s("(","#$record","?","OBJ","?","PHYS",")",",","a","more","specific","relationship","than","#$represents",",","means","that","some","#$Physical","?","PHYS","is","captured","and","interpreted","into","a","#$ContentBearingObject","that","is","stored","in","some","#$DataStorageDevice")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353361).
lisp_trans(termFormat(vEnglishLanguage,record,"record"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353608).
lisp_trans(comment(record,s("Adding","a","more","specific","relation","than","#$represents",".","While","#$represents","can","be","something","like","a","#$Logo","that","represents","a","#$Brand",",","#$record","is","more","strict","in","the","sense","that","it","is","an","accurate","rendering","of","some","#$Process","that","occurred","in","real","life",".","(","9","-14","-2011",")","."),"KJN"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353653).
lisp_trans(argIsa(record,1,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353940).
lisp_trans(argIsa(record,2,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':353979).
lisp_trans(=>(record(REC,PHYS),equivalentContentInstance(REC,PHYS)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354011).
lisp_trans(=>(record(REC,PHYS),exists([DS],and(tSumoDataStorageDevice(DS),stored(REC,DS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354082).
lisp_trans(rtBinaryPredicate(stored),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354206).
lisp_trans(rtAntisymmetricRelation(stored),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354240).
lisp_trans(rtPartialValuedRelation(stored),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354280).
lisp_trans(rtTransitiveRelation(stored),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354320).
lisp_trans(documentation(stored,vEnglishLanguage,s("(","#$stored","?","REC","?","OBJ",")","means","that","some","#$ContentBearingObject",",","encoded","in","some","format",",","is","saved","in","some","#$DataStorageDevice","and","can","be","accessed","in","some","future","date",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354357).
lisp_trans(termFormat(vEnglishLanguage,stored,"stored"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354562).
lisp_trans(comment(stored,s("Adding","a","stored","method","that","is","specific","to","storing","#$ContentBearingObject","such","as","#$SymbolicString",",","#$Recording",",","etc",".","in","a","#$DataStorageDevice",".","Will","be","changing","some","axioms","to","use","this","instead","of","other",",","vaguer","ways","of","describing","it","."),"KJN"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354607).
lisp_trans(argIsa(stored,1,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354867).
lisp_trans(argIsa(stored,2,tSumoDataStorageDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354906).
lisp_trans(=>(stored(O,D),exists([P],and(actWriting(P),destination(P,D),patient(P,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':354943).
lisp_trans(=>(equal(TIME,uWhenFn(stored(O,D))),holdsDuring(TIME,modalAttribute(exists([P],patient(P,O)),tSumoPossibility))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355074).
lisp_trans(vtRelationalAttribute(tSumoBlank),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355225).
lisp_trans(documentation(tSumoBlank,vEnglishLanguage,s("A","#$RelationalAttribute","meaning","that","there","is","no","#$ContentBearingObject","located","on","the","#$Object","with","this","attribute")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355262).
lisp_trans(=>(and(tSumoDataStorageDevice(DSTORE),sumoAttribute(DSTORE,tSumoBlank)),not(exists([DATA],stored(DATA,DSTORE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355419).
lisp_trans(genls(actRecording,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355562).
lisp_trans(documentation(actRecording,vEnglishLanguage,'Recording refers to a #$ContentBearingObject that represents some #$Process that happened in real life'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355604).
lisp_trans(termFormat(vEnglishLanguage,actRecording,"recording"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355753).
lisp_trans(=>(actRecording(R),exists([P],and(actProcess(P),record(R,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355805).
lisp_trans(genls(actMusicRecording,actAudioRecording),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355914).
lisp_trans(documentation(actMusicRecording,vEnglishLanguage,'MusicRecording refers to an #$AudioRecording of the #$Process of #$MakingMusic.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':355955).
lisp_trans(termFormat(vEnglishLanguage,actMusicRecording,s("music","recording")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356086).
lisp_trans(=>(actMusicRecording(M),exists([P],and(tSumoMakingMusic(P),record(M,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356149).
lisp_trans(genls(tSumoSheetMusic,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356265).
lisp_trans(documentation(tSumoSheetMusic,vEnglishLanguage,'SheetMusic refers to the #$ContentBearingObject that contains a representation of a #$MusicalComposition, using different musical  symbols'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356308).
lisp_trans(termFormat(vEnglishLanguage,tSumoSheetMusic,s("sheet","music")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356494).
lisp_trans(=>(tSumoSheetMusic(SM),exists([MC],and(cwMusicalComposition(MC),containsInformation(SM,MC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356549).
lisp_trans(genls(tSumoMusicText,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356686).
lisp_trans(documentation(tSumoMusicText,vEnglishLanguage,s("A","#$Text","in","a","#$Language","that","represents","a","form","of","music",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356712).
lisp_trans(=>(tSumoMusicText(X),capability(tSumoMakingMusic,patient,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356815).
lisp_trans(genls(actVideoRecording,actRecording),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356885).
lisp_trans(documentation(actVideoRecording,vEnglishLanguage,s("A","representation","of","video","on","some","medium","such","as","film",",","videotape","or","DVD",".","Instances","of","this","class","are","also","commonly","instances","of","#$AudioRecording",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':356921).
lisp_trans(=>(actVideoRecording(X),exists([EV],and(actProcess(EV),represents(X,EV),capability(tSumoRadiatingLight,patient,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357118).
lisp_trans(=>(actVideoRecording(VIDEO),modalAttribute(exists([AUDIO],and(actAudioRecording(AUDIO),part(AUDIO,VIDEO))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357282).
lisp_trans(genls(tSumoMediaSystem,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357464).
lisp_trans(documentation(tSumoMediaSystem,vEnglishLanguage,'MediaSystem is a #$Collection of  components that enable the #$RadiatingSound of #$AudioRecording and #$RadiatingLight  of #$VideoRecording'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357498).
lisp_trans(termFormat(vEnglishLanguage,tSumoMediaSystem,s("media","system")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357686).
lisp_trans(=>(tSumoMediaSystem(PLAYER),hasPurpose(PLAYER,or(exists([VIDEO,RL],and(actVideoRecording(VIDEO),tSumoRadiatingLight(RL),patient(RL,VIDEO),instrument(RL,PLAYER))),exists([AUDIO,RS],and(actAudioRecording(AUDIO),tSumoRadiatingSound(RS),patient(RS,AUDIO),instrument(RS,PLAYER)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':357743).
lisp_trans(genls(tSumoLabel,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361295).
lisp_trans(documentation(tSumoLabel,vEnglishLanguage,s("A","very","brief","#$Text","that","is","attached","to","an","#$Object","and","that","indicates","very","specific","information","about","the","#$Object",",","e",".","g",".","its","name",",","its","#$monetaryValue",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361317).
lisp_trans(=>(tSumoLabel(LABEL),exists([OBJ],and(tSumoSelfConnectedObject(OBJ),connected(LABEL,OBJ),refers(LABEL,OBJ)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361518).
lisp_trans(genls(tSumoFormText,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361690).
lisp_trans(documentation(tSumoFormText,vEnglishLanguage,s("A","page","or","set","of","pages","containing","spaces","where","information","is","to","be","entered","by","an","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361715).
lisp_trans(genls(tSumoTestForm,tSumoFormText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361851).
lisp_trans(genls(tSumoTestForm,tObjectMeasuringDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361880).
lisp_trans(documentation(tSumoTestForm,vEnglishLanguage,s("A","#$FormText","which","is","intended","to","measure","some","aspect","of","the","cognitive","capabilities",",","e",".","g",".","intelligence","or","knowledge","of","a","domain",",","of","the","person","taking","the","test",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':361916).
lisp_trans(genls(tSumoBallot,tSumoFormText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363324).
lisp_trans(documentation(tSumoBallot,vEnglishLanguage,s("A","#$FormText","which","is","used","in","#$Voting",".","A","list","of","candidates","is","printed","on","the","form",",","and","the","voter","selects","the","candidate","he","/","she","wants","to","vote","for",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363351).
lisp_trans(=>(tSumoBallot(B),hasPurpose(B,exists([V],and(actVoting(V),instrument(V,B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363542).
lisp_trans(genls(actApplication,tSumoFormText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363676).
lisp_trans(documentation(actApplication,vEnglishLanguage,s("A","#$FormText","whose","purpose","is","to","obtain","admission","to","an","#$Organization","or","to","receive","assistance","from","an","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363708).
lisp_trans(=>(actApplication(APP),hasPurpose(APP,exists([JOIN,GIVE],or(actJoiningAnOrganization(JOIN),actUnilateralGiving(GIVE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':363876).
lisp_trans(genls(cwAnnouncement,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364062).
lisp_trans(documentation(cwAnnouncement,vEnglishLanguage,s("Any","#$Text","which","contains","information","about","an","event","in","the","future",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364098).
lisp_trans(=>(cwAnnouncement(A),exists([CD,I],and(tSumoContentDevelopment(CD),result(CD,A),refers(A,I),actSocialInteraction(I),earlier(uWhenFn(CD),uWhenFn(I))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364214).
lisp_trans(genls(tSumoPerformanceProgram,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364459).
lisp_trans(documentation(tSumoPerformanceProgram,vEnglishLanguage,s("A","#$Text","that","describes","the","events","and","/","or","participants","in","a","#$Performance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364501).
lisp_trans(=>(tSumoPerformanceProgram(PROG),exists([PERF,PROP],and(containsInformation(PROG,PROP),realization(PERF,PROP),tSumoPerformance(PERF)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364631).
lisp_trans(genls(tSumoMotionPictureShot,tSumoMotionPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364817).
lisp_trans(documentation(tSumoMotionPictureShot,vEnglishLanguage,s("A","unit","of","action","in","a","#$MotionPicture",",","a","#$MotionPictureShot","is","a","sequence","of","images","which","are","captured","by","a","single","camera","without","interruption",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':364860).
lisp_trans(=>(tSumoMotionPictureShot(SHOT),exists([MOVIE],and(tSumoMotionPicture(MOVIE),subsumesContentInstance(MOVIE,SHOT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365060).
lisp_trans(=>(tSumoMotionPictureShot(SHOT),exists([C],and(tObjectCamera(C),instrument(SHOT,C),not(exists([C2],and(tObjectCamera(C2),not(equal(C,C2)),instrument(SHOT,C2))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365226).
lisp_trans(genls(tSumoMotionPictureScene,tSumoMotionPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365475).
lisp_trans(documentation(tSumoMotionPictureScene,vEnglishLanguage,s("A","discrete","part","of","a","#$MotionPicture","which","is","set","in","the","same","time","period","and","the","same","location",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365519).
lisp_trans(=>(tSumoMotionPictureScene(S),exists([M],and(tSumoMotionPicture(M),subsumesContentInstance(MOVIE,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365671).
lisp_trans(genls(tSumoDocumentary,tSumoMotionPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365814).
lisp_trans(genls(tSumoDocumentary,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365851).
lisp_trans(documentation(tSumoDocumentary,vEnglishLanguage,s("A","#$MotionPicture","which","purports","to","represent","the","facts","about","a","person",",","event",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':365886).
lisp_trans(genls(tSumoBroadcastProgram,tGroupedSeries),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366018).
lisp_trans(documentation(tSumoBroadcastProgram,vEnglishLanguage,s("A","#$Series","of","episodes","that","are","broadcast","on","television","or","radio",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366053).
lisp_trans(=>(tSumoBroadcastProgram(PROGRAM),exists([BROADCAST],and(actBroadcasting(BROADCAST),patient(BROADCAST,PROGRAM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366172).
lisp_trans(genls(tSumoNewsProgram,tSumoBroadcastProgram),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366338).
lisp_trans(documentation(tSumoNewsProgram,vEnglishLanguage,s("A","#$BroadcastProgram","that","is","devoted","to","reporting","the","latest","events","in","a","city",",","region",",","nation","or","the","world","at","large",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366378).
lisp_trans(=>(and(genls(PROGRAM,tSumoNewsProgram),equal(EPISODE,uSeriesVolumeFn(PROGRAM,NUMBER))),exists([DISSEMINATE],and(actDisseminating(DISSEMINATE),patient(DISSEMINATE,EPISODE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366544).
lisp_trans(rtBinaryFunction(uSeriesVolumeFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366781).
lisp_trans(rtPartialValuedRelation(uSeriesVolumeFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366822).
lisp_trans(argGenl(uSeriesVolumeFn,1,tGroupedSeries),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366870).
lisp_trans(argIsa(uSeriesVolumeFn,2,ftPositiveInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366911).
lisp_trans(resultGenl(uSeriesVolumeFn,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366953).
lisp_trans(documentation(uSeriesVolumeFn,vEnglishLanguage,s("A","#$BinaryFunction","that","maps","a","type","of","#$Series","(","e",".","g",".","the","Encyclopedia","_","Britannica","or","the","Popular","_","Mechanics","periodical",")","and","a","number","to","the","volumes","of","the","text","type","designated","by","the","number",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':366989).
lisp_trans(=>(and(genls(TEXT,iboPeriodicalCopy),equal(uSeriesVolumeFn(TEXT,INT1),VOLUME1),equal(uSeriesVolumeFn(TEXT,INT2),VOLUME2),greaterThan(INT2,INT1),actPublication(PUB1),actPublication(PUB2),isa(CBO1,VOLUME1),isa(CBO2,VOLUME2),patient(PUB1,CBO1),patient(PUB2,CBO2),date(PUB1,DATE1),date(PUB2,DATE2)),before(iTimeOf_EndFn(DATE1),iTimeOf_EndFn(DATE2))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':367231).
lisp_trans(=>(equal(uSeriesVolumeFn(SERIES,NUMBER),VOLUME),subsumesContentClass(SERIES,VOLUME)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':367700).
lisp_trans(genls(tGroupedSeries,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':367819).
lisp_trans(documentation(tGroupedSeries,vEnglishLanguage,s("A","#$Text","consisting","of","multiple","self","-","contained","units",".","Some","examples","are","an","encyclopedia","containing","a","couple","dozen","volumes",",","a","television","series","made","up","of","many","episodes",",","a","film","serial",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':367842).
lisp_trans(=>(tGroupedSeries(SERIES),exists([BOOK1,BOOK2],and(tSumoBook(BOOK1),tSumoBook(BOOK2),subsumesContentInstance(SERIES,BOOK1),subsumesContentInstance(SERIES,BOOK2),not(equal(BOOK1,BOOK2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368076).
lisp_trans(rtBinaryFunction(uPeriodicalIssueFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368352).
lisp_trans(rtPartialValuedRelation(uPeriodicalIssueFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368396).
lisp_trans(argGenl(uPeriodicalIssueFn,1,iboPeriodicalCopy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368447).
lisp_trans(argIsa(uPeriodicalIssueFn,2,ftPositiveInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368495).
lisp_trans(resultGenl(uPeriodicalIssueFn,iboPeriodicalCopy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368540).
lisp_trans(documentation(uPeriodicalIssueFn,vEnglishLanguage,s("A","#$BinaryFunction","that","maps","a","subclass","of","#$Periodical","and","a","number","to","all","of","the","issues","of","the","#$Periodical","corresponding","to","the","number",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368585).
lisp_trans(=>(equal(uPeriodicalIssueFn(PERIODICAL,NUMBER),ISSUE),subsumesContentClass(PERIODICAL,ISSUE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368780).
lisp_trans(genls(iboPeriodicalCopy,tGroupedSeries),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368907).
lisp_trans(documentation(iboPeriodicalCopy,vEnglishLanguage,s("A","#$Series","whose","elements","are","published","separately","and","on","a","periodic","basis",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':368936).
lisp_trans(genls(tSumoArticle,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369059).
lisp_trans(disjointWith(tSumoArticle,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369083).
lisp_trans(documentation(tSumoArticle,vEnglishLanguage,s("A","relatively","short","#$Text","that","either","is","unbound","or","is","bound","with","other","#$Articles","in","a","#$Book",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369107).
lisp_trans(=>(and(tSumoArticle(ARTICLE1),tSumoBook(BOOK),subsumesContentInstance(BOOK,ARTICLE1)),exists([ARTICLE2],and(tSumoArticle(ARTICLE2),not(equal(ARTICLE2,ARTICLE1)),subsumesContentInstance(BOOK,ARTICLE2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369248).
lisp_trans(genls(tSumoChapter,tSumoArticle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369561).
lisp_trans(documentation(tSumoChapter,vEnglishLanguage,s("A","numbered","and","/","or","titled","section","of","a","#$Book",",","which","is","typically","indicated","in","a","table","of","contents","for","the","#$Book",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369588).
lisp_trans(=>(tSumoChapter(CHAPTER),exists([BOOK],and(tSumoBook(BOOK),subsumesContentInstance(BOOK,CHAPTER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369745).
lisp_trans(genlPreds(titles,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369895).
lisp_trans(argIsa(titles,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369922).
lisp_trans(argGenl(titles,2,tSumoContentBearingPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':369955).
lisp_trans(documentation(titles,vEnglishLanguage,s("A","#$BinaryPredicate","used","to","indicate","the","title","of","a","#$ContentBearingPhysical",".","Note","that","the","second","argument","type","restriction","is","a","subclass",",","rather","than","an","instance",",","of","#$ContentBearingPhysical",".","Thus",",","the","title","Murder","_","on","_","the","_","Orient","_","Express","corresponds","to","a","large","class","of","#$Books",",","and","not","just","to","a","single","copy","of","the","book",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370004).
lisp_trans(documentation(formerName,vEnglishLanguage,s("(","formerName","?","NAME","?","THING",")","means","that","the","string","?","NAME","is","a","name","formerly","used","for","?","THING",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370371).
lisp_trans(genlPreds(formerName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370507).
lisp_trans(rtBinaryPredicate(familyName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370539).
lisp_trans(rtAsymmetricRelation(familyName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370577).
lisp_trans(argIsa(familyName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370618).
lisp_trans(argIsa(familyName,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370655).
lisp_trans(genlPreds(familyName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370683).
lisp_trans(documentation(familyName,vEnglishLanguage,s("(","#$familyName","?","STRING","?","HUMAN",")","means","that","the","#$SymbolicString","?","STRING","denotes","a","non","-","optional","name","that","?","HUMAN","has","inherited","by","virtue","of","being","born","into","a","particular","family","(","kin","group",")",".","surname","is","another","word","for","this","type","of","name",".","Cf",".","#$givenName",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':370714).
lisp_trans(documentation(middleName,vEnglishLanguage,s("(","middleName","?","CHAR","?","INDIV",")","means","that","the","#$SymbolicString","?","CHAR","contains","the","middle","name","of","the","#$Human","?","INDIV",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371012).
lisp_trans(rtBinaryPredicate(middleName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371170).
lisp_trans(rtAsymmetricRelation(middleName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371208).
lisp_trans(argIsa(middleName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371249).
lisp_trans(argIsa(middleName,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371286).
lisp_trans(genlPreds(middleName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371314).
lisp_trans(rtBinaryPredicate(givenName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371346).
lisp_trans(rtAsymmetricRelation(givenName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371383).
lisp_trans(genlPreds(givenName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371423).
lisp_trans(argIsa(givenName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371453).
lisp_trans(argIsa(givenName,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371490).
lisp_trans(documentation(givenName,vEnglishLanguage,s("(","#$givenName","?","STRING","?","HUMAN",")","means","that","?","STRING","is","a","name","selected","for","?","HUMAN",",","usually","from","among","many","options",",","as","opposed","to","a","mandatory","name","(","cf",".","#$familyName",")","that","?","HUMAN","has","inherited","by","virtue","of","being","born","into","a","certain","kin","group",",","caste",",","or","occupation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371517).
lisp_trans(rtBinaryPredicate(localLongName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371822).
lisp_trans(argIsa(localLongName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371863).
lisp_trans(argIsa(localLongName,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371903).
lisp_trans(documentation(localLongName,vEnglishLanguage,s("(","localLongName","?","NAME","?","THING",")","means","that","the","string","?","NAME","is","the","long","form","of","the","name","used","for","?","THING","in","its","local","area","or","language",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':371935).
lisp_trans(genlPreds(localLongName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372118).
lisp_trans(documentation(localShortName,vEnglishLanguage,s("(","localShortName","?","NAME","?","THING",")","means","that","the","string","?","NAME","is","the","short","form","of","the","name","used","for","?","THING","in","its","local","area","or","language",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372153).
lisp_trans(genlPreds(localShortName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372339).
lisp_trans(rtBinaryPredicate(localShortName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372374).
lisp_trans(argIsa(localShortName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372416).
lisp_trans(argIsa(localShortName,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372457).
lisp_trans(genls(iboMessage,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372491).
lisp_trans(documentation(iboMessage,vEnglishLanguage,s("A","#$FactualText","which","is","intended","to","be","delivered","to","and","read","by","a","#$Human",",","#$GroupOfPeople","or","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372522).
lisp_trans(genls(tSumoReport,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372677).
lisp_trans(genls(tSumoReport,tSumoArticle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372707).
lisp_trans(documentation(tSumoReport,vEnglishLanguage,s("A","relatively","brief","#$FactualText",",","often","it","describes","the","findings","of","a","study","or","experiment",",","or","a","series","of","observations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372733).
lisp_trans(genls(tSumoNewspaper,iboPeriodicalCopy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372898).
lisp_trans(documentation(tSumoNewspaper,vEnglishLanguage,s("A","#$Periodical","that","is","published","on","a","daily","or","weekly","basis",",","that","contains","#$Reports",",","and","whose","issues","are","printed","on","newsprint","paper",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':372930).
lisp_trans(=>(tSumoNewspaper(PAPER),exists([REPORT],and(tSumoReport(REPORT),subsumesContentInstance(PAPER,REPORT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373112).
lisp_trans(=>(and(genls(PAPER,tSumoNewspaper),tSumoWeek(WEEK)),exists([PUBLICATION,ISSUE],and(actPublication(PUBLICATION),temporalPart(uWhenFn(PUBLICATION),WEEK),result(PUBLICATION,ISSUE),isa(ISSUE,PAPER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373258).
lisp_trans(genls(tSumoMagazine,iboPeriodicalCopy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373530).
lisp_trans(documentation(tSumoMagazine,vEnglishLanguage,s("A","#$Periodical","that","is","softbound","and","printed","on","glossy","paper",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373561).
lisp_trans(genls(tSumoLetter,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373671).
lisp_trans(documentation(tSumoLetter,vEnglishLanguage,s("A","brief","message","which","is","intended","to","be","mailed","to","a","person","or","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373701).
lisp_trans(genls(actHoliday,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373822).
lisp_trans(documentation(actHoliday,vEnglishLanguage,'Holiday is the class of time periods that are  observed as holidays in a country, culture, or religion.  Holidays may  recur annually on the same date, or they may be moveable, for example,  #$UnitedStatesThanksgivingDay falls on the last #$Thursday of each  #$November.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':373854).
lisp_trans(genls(tSumoFixedHoliday,actHoliday),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374171).
lisp_trans(documentation(tSumoFixedHoliday,vEnglishLanguage,'FixedHoliday is the class of #$Holidays  whose observance is fixed to recurrences of the calendar day that the  holiday commemorates.  See #$commemoratesDate.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374203).
lisp_trans(genls(tSumoMoveableHoliday,actHoliday),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374413).
lisp_trans(documentation(tSumoMoveableHoliday,vEnglishLanguage,'MoveableHoliday is the class of  #$Holidays whose observance is not fixed to recurrences of any particular  calendar day.  For example, #$UnitedStatesMemorialDay is observed on the  last #$Monday of #$May.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374448).
lisp_trans(genls(tSumoHolidayCard,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374709).
lisp_trans(documentation(tSumoHolidayCard,vEnglishLanguage,s("A","stiff","piece","of","#$Paper",",","usually","folded","over",",","which","is","sent","to","others","in","celebration","of","a","#$Holiday",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374753).
lisp_trans(=>(tSumoHolidayCard(C),material(tObjectPaper,C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374903).
lisp_trans(=>(tSumoHolidayCard(C),exists([H],and(actHoliday(H),refers(C,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':374959).
lisp_trans(genls(tSumoHistoricalAccount,tSumoNarrativeText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375068).
lisp_trans(genls(tSumoHistoricalAccount,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375111).
lisp_trans(documentation(tSumoHistoricalAccount,vEnglishLanguage,s("A","#$FactualAccount","that","describes","significant","events","that","occurred","in","the","past",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375152).
lisp_trans(=>(tSumoHistoricalAccount(ACCOUNT),exists([EVENT],and(represents(ACCOUNT,EVENT),earlier(uWhenFn(EVENT),uWhenFn(ACCOUNT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375286).
lisp_trans(genls(cwBiography,tSumoHistoricalAccount),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375457).
lisp_trans(documentation(cwBiography,vEnglishLanguage,s("A","#$HistoricalAccount","which","is","concerned","with","the","life","of","a","single","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375496).
lisp_trans(=>(cwBiography(B),exists([H],and(tSumoHuman(H),refers(B,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375617).
lisp_trans(genls(tSumoFinancialText,tSumoReport),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375722).
lisp_trans(documentation(tSumoFinancialText,vEnglishLanguage,s("A","#$Report","about","monetary","figures",".","This","class","covers","#$FinancialBills",",","balance","sheets",",","account","statements",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375754).
lisp_trans(genls(tSumoFinancialBill,tSumoFinancialText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375917).
lisp_trans(documentation(tSumoFinancialBill,vEnglishLanguage,s("A","brief","statement","that","the","stated","amount","of","money","is","owed","by","the","person","to","whom","the","bill","is","delivered",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':375956).
lisp_trans(genls(tSumoReferenceBook,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376109).
lisp_trans(genls(tSumoReferenceBook,tSumoFactualText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376139).
lisp_trans(documentation(tSumoReferenceBook,vEnglishLanguage,s("A","#$Book","which","is","not","intended","to","be","read","from","cover","to","cover",",","but","which","is","meant","to","be","consulted","to","answer","specific","factual","questions",",","e",".","g",".","about","the","meaning","of","a","word",",","the","location","of","a","country",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376176).
lisp_trans(genls(cwDictionary,tSumoReferenceBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376430).
lisp_trans(documentation(cwDictionary,vEnglishLanguage,s("A","#$ReferenceBook","which","specifies","the","meanings","of","the","#$Words","of","a","#$Language",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376466).
lisp_trans(genls(tSumoNarrativeText,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376592).
lisp_trans(sumo_partition(tSumoNarrativeText,tSumoFictionalText,tSumoHistoricalAccount),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376622).
lisp_trans(documentation(tSumoNarrativeText,vEnglishLanguage,s("Any","#$Text","that","tells","a","story",",","whether","true","or","false",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376680).
lisp_trans(genls(cwShortStory,tSumoFictionalText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376784).
lisp_trans(genls(cwShortStory,tSumoArticle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376820).
lisp_trans(documentation(cwShortStory,vEnglishLanguage,s("A","brief","work","of","fiction",",","often","bound","with","other","short","stories","in","a","#$Book","or","#$Periodical",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376850).
lisp_trans(genls(tSumoMysteryStory,tSumoFictionalText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':376988).
lisp_trans(documentation(tSumoMysteryStory,vEnglishLanguage,s("A","#$FictionalText","whose","central","plot","element","is","a","crime","of","some","sort",",","usually","a","murder",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377026).
lisp_trans(=>(tSumoMysteryStory(S),exists([C],and(actCriminalAction(C),refers(S,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377163).
lisp_trans(genls(tSumoNovel,tSumoFictionalText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377280).
lisp_trans(genls(tSumoNovel,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377311).
lisp_trans(documentation(tSumoNovel,vEnglishLanguage,s("A","#$FictionalText","that","is","larger","than","a","#$ShortStory","and","that","is","bound","independently","(","i",".","e",".","it","is","a","#$Book",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377333).
lisp_trans(genls(tSumoDramaticPlay,tSumoFictionalText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377483).
lisp_trans(documentation(tSumoDramaticPlay,vEnglishLanguage,s("A","#$FictionalText","that","is","intended","to","be","realized","as","#$DramaticActing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377521).
lisp_trans(=>(tSumoDramaticPlay(PLAY),hasPurpose(PLAY,exists([ACT,PROP],and(actDramaticActing(ACT),containsInformation(PLAY,PROP),realization(ACT,PROP))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377641).
lisp_trans(genls(tSumoOpera,tSumoDramaticPlay),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377925).
lisp_trans(documentation(tSumoOpera,vEnglishLanguage,s("A","#$DramaticPlay","that","is","set","to","#$MakingMusic",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':377955).
lisp_trans(=>(and(tSumoOpera(OPERA),realization(ACT,OPERA)),tSumoMakingMusic(ACT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378043).
lisp_trans(xtSpokenHumanLanguage(iFrenchLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378151).
lisp_trans(tNaturalLanguage(iFrenchLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378197).
lisp_trans(documentation(iFrenchLanguage,vEnglishLanguage,s("A","#$Romance","language","that","is","the","official","language","of","France","and","Belgium",",","and","is","widely","spoken","in","Africa",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378239).
lisp_trans(xtSpokenHumanLanguage(iGermanLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378396).
lisp_trans(tNaturalLanguage(iGermanLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378442).
lisp_trans(documentation(iGermanLanguage,vEnglishLanguage,s("A","#$Germanic","language","that","is","spoken","primarily","in","Germany","and","Austria",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378484).
lisp_trans(xtSpokenHumanLanguage(xtGreekLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378606).
lisp_trans(tNaturalLanguage(xtGreekLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378651).
lisp_trans(documentation(xtGreekLanguage,vEnglishLanguage,s("An","Indo","-","European","language","that","is","spoken","in","#$Greece",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378692).
lisp_trans(xtSpokenHumanLanguage(iLatinLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378795).
lisp_trans(tNaturalLanguage(iLatinLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378840).
lisp_trans(documentation(iLatinLanguage,vEnglishLanguage,s("A","#$Language","that","was","spoken","in","ancient","#$Rome","and","is","still","the","official","language","of","the","#$Vatican",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':378881).
lisp_trans(xtSpokenHumanLanguage(iRussianLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379031).
lisp_trans(tNaturalLanguage(iRussianLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379078).
lisp_trans(documentation(iRussianLanguage,vEnglishLanguage,s("A","Slavic","language","that","is","spoken","in","#$Russia",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379121).
lisp_trans(xtSpokenHumanLanguage(iSpanishLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379218).
lisp_trans(tNaturalLanguage(iSpanishLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379265).
lisp_trans(documentation(iSpanishLanguage,vEnglishLanguage,s("A","#$Romance","language","that","is","the","official","language","of","Spain",",","Mexico",",","and","many","Central","and","South","American","countries",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379308).
lisp_trans(<=>(sumoAttribute(H,vtLiteracyAttribute),and(hasSkill(actReading,H),hasSkill(actWriting,H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379476).
lisp_trans(genls(vtLiteracyAttribute,vtTraitAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379577).
lisp_trans(documentation(vtLiteracyAttribute,vEnglishLanguage,s("If","an","individual","has","the","#$attribute","#$LiteracyAttribute",",","that","individual","is","able","to","read","and","write",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379621).
lisp_trans(genls(tSumoIndustry,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379776).
lisp_trans(documentation(tSumoIndustry,vEnglishLanguage,s("The","class","of","#$Collections","of","#$Corporations","which","are","in","the","same","line","of","business",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379807).
lisp_trans(=>(tSumoIndustry(INDUSTRY),=>(and(member(MEMB1,INDUSTRY),member(MEMB2,INDUSTRY)),exists([CLASS],and(genls(CLASS,actCorporation),nearestIsa(MEMB1,CLASS),nearestIsa(MEMB2,CLASS))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':379937).
lisp_trans(genls(tObjectChimney,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380239).
lisp_trans(genls(tObjectChimney,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380277).
lisp_trans(documentation(tObjectChimney,vEnglishLanguage,s("A","thin","passageway","through","which","#$Smoke","from","a","controlled","fire","is","conducted","#$Outside","of","a","#$Building","or","#$Room",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380303).
lisp_trans(=>(tObjectChimney(C),hasPurpose(C,exists([S,R],and(tSmoke(S),actRemoving(R),instrument(R,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380459).
lisp_trans(genls(tObjectCurb,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380627).
lisp_trans(documentation(tObjectCurb,vEnglishLanguage,s("A","raised","concrete","or","asphalt","structure","that","connects","a","#$Sidewalk","with","a","#$Roadway",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380662).
lisp_trans(=>(tObjectCurb(C),exists([S,R],and(tPlaceLikeSidewalk(S),tPlaceLikeRoadway(R),connects(C,S,R)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380786).
lisp_trans(vtSumoAttribute(tPaved),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380925).
lisp_trans(vtSumoAttribute(tSumoUnpaved),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380952).
lisp_trans(genls(tPlaceLikeStairway,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':380994).
lisp_trans(documentation(tPlaceLikeStairway,vEnglishLanguage,s("A","#$StationaryArtifact","which","allows","one","to","climb",",","step","by","step",",","from","one","level","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381033).
lisp_trans(=>(tPlaceLikeStairway(S),and(capability(tSumoMotionUpward,instrument,S),capability(tSumoMotionDownward,instrument,S))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381169).
lisp_trans(=>(and(tPlaceLikeStairway(S),part(S,B),tPlaceLikeBuilding(B)),hasPurpose(S,exists([L1,L2],and(tSumoBuildingLevel(L1),tSumoBuildingLevel(L2),part(L1,B),part(L2,B),connects(S,L1,L2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381298).
lisp_trans(genls(tSumoSteps,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381584).
lisp_trans(documentation(tSumoSteps,vEnglishLanguage,s("A","#$StationaryArtifact","which","allows","one","to","climb",",","step","by","step",",","from","one","level","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381620).
lisp_trans(=>(tSumoSteps(STEPS),and(capability(tSumoMotionUpward,instrument,STEPS),capability(tSumoMotionDownward,instrument,STEPS))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381753).
lisp_trans(=>(and(tSumoBuildingLevel(LEVEL1),tSumoBuildingLevel(LEVEL2),tPlaceLikeBuilding(BUILDING),part(LEVEL1,BUILDING),part(LEVEL2,BUILDING)),exists([STEPS],and(tSumoSteps(STEPS),connects(STEPS,LEVEL1,LEVEL2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':381897).
lisp_trans(genls(tObjectLadder,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382200).
lisp_trans(documentation(tObjectLadder,vEnglishLanguage,s("An","#$Artifact","which","consists","of","two","parallel","supports","connected","by","a","series","of","rungs","which","can","be","used","to","ascend","or","descend",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382227).
lisp_trans(=>(tObjectLadder(LADDER),and(capability(tSumoMotionUpward,instrument,LADDER),capability(tSumoMotionDownward,instrument,LADDER))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382395).
lisp_trans(vtInternalAttribute(tTransparent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382543).
lisp_trans(documentation(tTransparent,vEnglishLanguage,s("A","Transparent","material","is","one","through","which","it","is","possible","to","have","#$Seeing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382584).
lisp_trans(=>(sumoAttribute(O,tTransparent),modalAttribute(exists([S],and(actSeeing(S),agent(S,A),destination(S,D),cycBetween(O,A,D))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382707).
lisp_trans(genls(tSumoCurtain,tPartTypeWindowCovering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382913).
lisp_trans(genls(tSumoCurtain,tSumoFabric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382947).
lisp_trans(documentation(tSumoCurtain,vEnglishLanguage,s("A","piece","of","#$Fabric","whose","purpose","is","#$Covering","a","#$Window","so","as","to","keep","out","the","light","or","prevent","people","from","seeing","inside",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':382973).
lisp_trans(genls(tSumoWindow,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383142).
lisp_trans(documentation(tSumoWindow,vEnglishLanguage,s("An","#$Artifact","composed","of","transparent","material","that","admits","light","(","and","possibly","air",")","into","a","#$Room",",","#$Building","or","#$Vehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383169).
lisp_trans(=>(tSumoWindow(W),exists([A],and(part(W,A),or(tPlaceLikeBuilding(A),tSumoRoom(A),tSumoVehicle(A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383336).
lisp_trans(=>(tSumoWindow(W),sumoAttribute(W,tTransparent)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383509).
lisp_trans(genls(tSumoSkylight,tSumoWindow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383567).
lisp_trans(documentation(tSumoSkylight,vEnglishLanguage,s("A","#$Window","that","is","part","of","the","#$Ceiling","of","a","#$Room",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383594).
lisp_trans(=>(tSumoSkylight(W),exists([C],and(actCeiling(C),part(W,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383693).
lisp_trans(genls(tSumoRearWindow,tSumoVehicleWindow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383797).
lisp_trans(documentation(tSumoRearWindow,vEnglishLanguage,s("Any","#$VehicleWindow","which","is","located","at","the","back","of","an","#$RoadVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383833).
lisp_trans(=>(tSumoRearWindow(W),exists([A],and(tObjectRoadVehicle(A),part(W,uBackFn(A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':383950).
lisp_trans(genls(tPartTypeWindowCovering,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384070).
lisp_trans(documentation(tPartTypeWindowCovering,vEnglishLanguage,s("An","#$Artifact","that","is","used","to","cover","Windows",".","Note","that","this","class","includes","blinds",",","drapes",",","shutters",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384105).
lisp_trans(=>(tPartTypeWindowCovering(WC),hasPurpose(WC,exists([C,W],and(actCovering(C),patient(C,W),tSumoWindow(W),instrument(C,WC))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384263).
lisp_trans(vtRelationalAttribute(tSumoAdjoiningRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384466).
lisp_trans(documentation(tSumoAdjoiningRoom,vEnglishLanguage,'AdjoiningRoom describes a #$Room that has another Room #$Adjacent to it, and a doorway existing on their common wall to allow access from one room to another'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384511).
lisp_trans(termFormat(vEnglishLanguage,tSumoAdjoiningRoom,s("adjoining","room")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384719).
lisp_trans(=>(sumoAttribute(X,tSumoAdjoiningRoom),tSumoRoom(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384780).
lisp_trans(=>(sumoAttribute(X,tSumoAdjoiningRoom),exists([ROOM,WALL,DOOR],and(sumoAttribute(ROOM,tSumoAdjoiningRoom),not(equal(ROOM,X)),orientation(X,ROOM,tSumoAdjacent),iWall(WALL),part(WALL,ROOM),part(WALL,X),tSumoDoor(DOOR),part(DOOR,WALL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':384840).
lisp_trans(genls(tSumoTransitwayObstacle,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385157).
lisp_trans(documentation(tSumoTransitwayObstacle,vEnglishLanguage,'TransitwayObstacle is the general  class of #$Objects that can act as obstacles to #$Motion along a  #$Transitway.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385194).
lisp_trans(genls(tSumoDoor,tSumoTransitwayObstacle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385371).
lisp_trans(genls(tSumoDoor,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385406).
lisp_trans(documentation(tSumoDoor,vEnglishLanguage,s("An","#$Artifact","that","restricts","and","permits","access","to","a","#$StationaryArtifact","(","e",".","g",".","#$Building","or","#$Room",")","depending","on","whether","the","#$Door","is","open","or","locked",".","Note","that","the","class","#$Door","also","covers","gates",",","because","it","is","not","possible","to","define","objective","criteria","that","reliably","distinguish","doors","from","gates",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385517).
lisp_trans(=>(tSumoDoor(DOOR),exists([WAY],and(part(DOOR,WAY),tPlaceLikeDoorway(WAY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385861).
lisp_trans(genls(tSumoHinge,tSumoEngineeringComponent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':385983).
lisp_trans(documentation(tSumoHinge,vEnglishLanguage,s("An","#$EngineeringComponent","that","connects","one","thing","to","another","in","such","a","way","that","they","can","move","relative","to","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386021).
lisp_trans(=>(tSumoHinge(HINGE),hasPurpose(HINGE,exists([OBJ1,OBJ2],and(connects(HINGE,OBJ1,OBJ2),or(capability(actRotating,patient,OBJ1),capability(actRotating,patient,OBJ2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386181).
lisp_trans(genls(tPlaceLikeDoorway,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386405).
lisp_trans(documentation(tPlaceLikeDoorway,vEnglishLanguage,s("A","#$StationaryArtifact","consisting","of","a","frame","that","holds","a","#$Door",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386443).
lisp_trans(=>(tPlaceLikeDoorway(WAY),exists([ARTIFACT],and(part(WAY,ARTIFACT),or(tPlaceLikeBuilding(ARTIFACT),tSumoRoom(ARTIFACT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386553).
lisp_trans(=>(tSumoDoor(DOOR),exists([ARTIFACT],and(part(DOOR,ARTIFACT),or(tPlaceLikeBuilding(ARTIFACT),tSumoRoom(ARTIFACT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386747).
lisp_trans(genls(iWall,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386940).
lisp_trans(documentation(iWall,vEnglishLanguage,s("A","#$StationaryArtifact","that","supports","a","#$Building","or","partitions","it","into","#$Rooms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':386975).
lisp_trans(=>(iWall(WALL),exists([ARTIFACT],and(part(WALL,ARTIFACT),or(tPlaceLikeBuilding(ARTIFACT),tSumoRoom(ARTIFACT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387097).
lisp_trans(genls(tSumoFloor,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387290).
lisp_trans(documentation(tSumoFloor,vEnglishLanguage,s("A","#$StationaryArtifact","that","is","the","bottom","surface","of","a","#$Room",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387326).
lisp_trans(=>(tSumoFloor(FLOOR),exists([ARTIFACT],and(part(FLOOR,ARTIFACT),tSumoRoom(ARTIFACT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387431).
lisp_trans(genls(actCeiling,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387568).
lisp_trans(documentation(actCeiling,vEnglishLanguage,s("A","#$StationaryArtifact","that","is","the","top","surface","of","a","#$Room",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387606).
lisp_trans(=>(actCeiling(C),exists([R],and(top(C,R),tSumoRoom(R)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387709).
lisp_trans(genls(tSumoRoof,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387808).
lisp_trans(documentation(tSumoRoof,vEnglishLanguage,s("The","#$top","of","a","#$Building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387843).
lisp_trans(=>(tSumoRoof(ROOF),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),top(ROOF,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':387910).
lisp_trans(genls(tPartTypeFireplace,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388047).
lisp_trans(genls(tPartTypeFireplace,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388087).
lisp_trans(documentation(tPartTypeFireplace,vEnglishLanguage,s("A","#$Device","in","a","#$Building","which","is","used","for","burning","wood",",","coal",",","etc","for","heat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388115).
lisp_trans(=>(tPartTypeFireplace(F),hasPurpose(F,exists([C],and(actCombustion(C),eventLocated(C,F))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388239).
lisp_trans(=>(tPartTypeFireplace(F),exists([C],and(tObjectChimney(C),connected(F,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388382).
lisp_trans(=>(tPartTypeFireplace(F),exists([B],and(tPlaceLikeBuilding(B),part(F,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388499).
lisp_trans(genls(tSumoBalcony,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388606).
lisp_trans(documentation(tSumoBalcony,vEnglishLanguage,s("A","#$Balcony","is","a","platform","projecting","from","the","wall","of","a","building",",","surrounded","by","some","type","of","railing")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388644).
lisp_trans(termFormat(vEnglishLanguage,tSumoBalcony,"balcony"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388787).
lisp_trans(=>(tSumoBalcony(BALCONY),exists([WALL,LANDAREA],and(meetsSpatially(WALL,BALCONY),tSumoLandArea(LANDAREA),located(WALL,LANDAREA),orientation(BALCONY,LANDAREA,tSumoAbove)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':388835).
lisp_trans(genls(tSumoBuildingLevel,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389074).
lisp_trans(documentation(tSumoBuildingLevel,vEnglishLanguage,s("The","story","or","level","of","a","building",",","e",".","g",".","the","#$Basement",",","the","#$Attic",",","the","ground","level",",","the","fourteenth","floor",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389118).
lisp_trans(=>(tSumoBuildingLevel(LEVEL),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),part(LEVEL,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389281).
lisp_trans(genls(tSumoBasement,tSumoBuildingLevel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389430).
lisp_trans(documentation(tSumoBasement,vEnglishLanguage,s("A","#$BuildingLevel","which","satisfies","two","conditions",",","viz",".","it","is","lower","than","all","of","the","other","#$BuildingLevels","in","the","same","#$Building","and","it","is","below","ground","level",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389464).
lisp_trans(=>(tSumoBasement(BASEMENT),not(exists([LEVEL,BUILDING],and(tSumoBuildingLevel(LEVEL),tPlaceLikeBuilding(BUILDING),part(LEVEL,BUILDING),part(BASEMENT,BUILDING),not(equal(LEVEL,BASEMENT)),orientation(LEVEL,BASEMENT,tSumoBelow))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389669).
lisp_trans(genls(tPartTypeElevator,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':389992).
lisp_trans(documentation(tPartTypeElevator,vEnglishLanguage,s("A","#$TransportationDevice","consisting","of","a","car","that","moves","up","and","down","in","a","vertical","shaft","so","that","people","or","objects","can","move","from","one","floor","to","another","in","a","building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390033).
lisp_trans(=>(tPartTypeElevator(E),hasPurpose(E,exists([T,L1,L2,B],and(actTransportation(T),origin(T,L1),tSumoBuildingLevel(L1),destination(T,L2),tSumoBuildingLevel(L2),not(equal(L1,L2)),part(L1,B),part(L2,B),tPlaceLikeBuilding(B))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390242).
lisp_trans(=>(tPartTypeElevator(E),and(capability(tSumoMotionUpward,instrument,E),capability(tSumoMotionDownward,instrument,E))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390602).
lisp_trans(genls(tSumoPump,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390731).
lisp_trans(documentation(tSumoPump,vEnglishLanguage,s("A","#$Device","that","moves","#$Fluids","by","means","of","pressure","or","suction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390768).
lisp_trans(=>(and(actTransportation(T),instrument(T,D),tSumoPump(D)),exists([F],and(instrument(T,F),sumoAttribute(F,tSumoFluid)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':390872).
lisp_trans(genls(tObjectOar,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391044).
lisp_trans(documentation(tObjectOar,vEnglishLanguage,s("A","#$Device","consisting","of","a","flat",",","broad","surface","attached","to","a","handle","that","is","used","as","an","instrument","in","#$Rowing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391080).
lisp_trans(=>(tObjectOar(O),hasPurpose(O,exists([R],and(actRowing(R),instrument(R,O))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391231).
lisp_trans(genls(tPlaceLikeGarage,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391362).
lisp_trans(documentation(tPlaceLikeGarage,vEnglishLanguage,s("A","#$Building","or","part","of","a","#$Building","which","is","intended","to","house","one","or","more","#$RoadVehicle","when","they","are","not","in","use","or","are","under","repair",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391399).
lisp_trans(=>(tPlaceLikeGarage(GARAGE),hasPurpose(GARAGE,exists([AUTO],and(tObjectRoadVehicle(AUTO),contains(GARAGE,Automobile))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391578).
lisp_trans(=>(tPlaceLikeGarage(GARAGE),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),part(GARAGE,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391744).
lisp_trans(genls(tPartTypeBathroom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391888).
lisp_trans(documentation(tPartTypeBathroom,vEnglishLanguage,s("A","#$Room","that","contains","a","#$WashBasin","and","possibly","a","#$Toilet",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':391913).
lisp_trans(=>(tPartTypeBathroom(B),exists([W],and(tSumoWashBasin(W),located(W,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392020).
lisp_trans(genls(tPartTypeCloset,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392129).
lisp_trans(documentation(tPartTypeCloset,vEnglishLanguage,s("A","relatively","small","#$Room","used","for","storage",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392152).
lisp_trans(=>(tPartTypeCloset(R),hasPurpose(R,exists([K,O],and(actKeeping(K),patient(K,O),located(O,R))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392237).
lisp_trans(genls(tPartTypeDressingRoom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392396).
lisp_trans(documentation(tPartTypeDressingRoom,vEnglishLanguage,s("Any","#$Room","which","is","intended","for","#$ChangingClothing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392425).
lisp_trans(=>(tPartTypeDressingRoom(R),hasPurpose(R,exists([C],and(actChangingClothing(C),eventLocated(C,R))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392526).
lisp_trans(genls(tSumoSittingArea,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392678).
lisp_trans(documentation(tSumoSittingArea,vEnglishLanguage,'SittingArea refers to a #$Region, either #$Indoor (like a Living Room) or #$Outdoor (like a Garden sitting area) where people normally sit and entertain guests'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392708).
lisp_trans(termFormat(vEnglishLanguage,tSumoSittingArea,s("sitting","area")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392916).
lisp_trans(=>(tSumoSittingArea(AREA),exists([SEAT],and(tSumoSeat(SEAT),located(SEAT,AREA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':392973).
lisp_trans(genls(tSumoKitchenArea,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393103).
lisp_trans(documentation(tSumoKitchenArea,vEnglishLanguage,s("a","#$KitchenArea","refers","to","a","#$Region",",","either","#$Outdoors","or","#$Indoors",",","that","is","intended","for","#$Cooking")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393133).
lisp_trans(termFormat(vEnglishLanguage,tSumoKitchenArea,s("kitchen","area")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393281).
lisp_trans(=>(tSumoKitchenArea(K),hasPurpose(K,exists([C],and(actCooking(C),eventLocated(C,K))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393338).
lisp_trans(genls(tPartTypeKitchen,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393488).
lisp_trans(genls(tPartTypeKitchen,tSumoKitchenArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393512).
lisp_trans(documentation(tPartTypeKitchen,vEnglishLanguage,s("A","#$Room","intended","for","#$Cooking",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393543).
lisp_trans(=>(tPartTypeKitchen(ROOM),hasPurpose(ROOM,exists([COOK],and(actCooking(COOK),located(COOK,ROOM))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393619).
lisp_trans(genls(tSumoDiningArea,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393823).
lisp_trans(documentation(tSumoDiningArea,vEnglishLanguage,s("a","#$DiningArea","refers","to","a","#$Region",",","either","#$Outdoors","or","#$Indoors",",","that","is","intended","for","#$Eating")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393852).
lisp_trans(termFormat(vEnglishLanguage,tSumoDiningArea,s("dining","area")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':393997).
lisp_trans(=>(tSumoDiningArea(D),hasPurpose(D,exists([E],and(actEating(E),eventLocated(E,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394052).
lisp_trans(genls(tPartTypeDiningRoom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394273).
lisp_trans(genls(tPartTypeDiningRoom,tSumoDiningArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394300).
lisp_trans(documentation(tPartTypeDiningRoom,vEnglishLanguage,s("A","#$Room","intended","primarily","for","#$Eating",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394333).
lisp_trans(genls(tPartTypeBedroom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394421).
lisp_trans(documentation(tPartTypeBedroom,vEnglishLanguage,s("A","#$Room","intended","primarily","for","sleeping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394445).
lisp_trans(=>(tPartTypeBedroom(ROOM),exists([BED],and(tSumoBed(BED),located(BED,ROOM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394530).
lisp_trans(genls(tPartTypeClassroom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394654).
lisp_trans(documentation(tPartTypeClassroom,vEnglishLanguage,s("Any","Room","in","a","#$School","where","education","takes","place",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394680).
lisp_trans(=>(tPartTypeClassroom(R),exists([S],and(tSumoSchool(S),part(R,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394777).
lisp_trans(=>(tPartTypeClassroom(R),hasPurpose(R,exists([E],and(actEducationalProcess(E),eventLocated(E,R))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':394881).
lisp_trans(genls(tPartTypePorch,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395032).
lisp_trans(documentation(tPartTypePorch,vEnglishLanguage,s("A","#$StationaryArtifact","which","is","#$connected","to","a","#$Building","and","which","provides","some","shelter","in","entering","or","leaving","the","#$Building","or","in","sitting","outside",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395068).
lisp_trans(=>(tPartTypePorch(PORCH),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),connected(PORCH,BUILDING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395264).
lisp_trans(genls(tPlaceLikeSidewalk,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395411).
lisp_trans(documentation(tPlaceLikeSidewalk,vEnglishLanguage,s("A","prepared","path","for","pedestrians","alongside","a","#$Roadway",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395450).
lisp_trans(=>(tPlaceLikeSidewalk(SIDE),hasPurpose(SIDE,exists([WALK],and(actWalking(WALK),path(WALK,SIDE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395549).
lisp_trans(=>(tPlaceLikeSidewalk(SIDE),exists([ROAD],and(tPlaceLikeRoadway(ROAD),orientation(SIDE,ROAD,tSumoNear)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395751).
lisp_trans(genls(tPlaceLikeFence,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395892).
lisp_trans(documentation(tPlaceLikeFence,vEnglishLanguage,s("A","#$StationaryArtifact","that","serves","to","demarcate","or","to","prevent","access","to","or","from","the","area","that","the","#$Fence","surrounds",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':395928).
lisp_trans(genls(tSumoSportsGround,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396086).
lisp_trans(documentation(tSumoSportsGround,vEnglishLanguage,s("A","specially","designated","and","maintained","area","where","#$Sports","are","played",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396129).
lisp_trans(=>(tSumoSportsGround(GROUND),hasPurpose(GROUND,exists([SPORT],and(tSport(SPORT),eventLocated(SPORT,GROUND))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396248).
lisp_trans(genls(tSumoIndustrialPlant,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396476).
lisp_trans(documentation(tSumoIndustrialPlant,vEnglishLanguage,s("A","#$Building","or","part","of","a","#$Building","or","group","of","#$Buildings","whose","purpose","is","to","#$Manufacture","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396522).
lisp_trans(=>(tSumoIndustrialPlant(PLANT),or(tPlaceLikeBuilding(PLANT),exists([BUILDING],and(tPlaceLikeBuilding(BUILDING),located(BUILDING,PLANT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396680).
lisp_trans(=>(tSumoIndustrialPlant(PLANT),hasPurpose(PLANT,exists([MANUFACTURE],and(tSumoManufacture(MANUFACTURE),eventLocated(MANUFACTURE,PLANT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':396887).
lisp_trans(genls(tPlaceLikeLaboratory,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397135).
lisp_trans(documentation(tPlaceLikeLaboratory,vEnglishLanguage,s("A","#$Building",",","#$Room","or","suite","of","#$Rooms","where","scientific","research",",","i",".","e",".","#$Experimenting",",","is","conducted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397176).
lisp_trans(=>(tPlaceLikeLaboratory(LAB),exists([EXPERIMENT],and(actExperimenting(EXPERIMENT),eventLocated(EXPERIMENT,LAB)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397327).
lisp_trans(documentation(experimentalControl,vEnglishLanguage,s("(","experimentalControl","?","EXPERIMENT","?","OBJ",")","means","that","the","Object","?","OBJ","serves","as","a","control","in","the","instance","of","#$Experimenting","?","EXPERIMENT",",","i",".","e",".","?","OBJ","is","the","standard","against","which","something","else","in","the","experiment","can","be","compared",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397488).
lisp_trans(rtCaseRole(experimentalControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397769).
lisp_trans(argIsa(experimentalControl,1,actExperimenting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397809).
lisp_trans(argIsa(experimentalControl,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397854).
lisp_trans(genlPreds(experimentalControl,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397892).
lisp_trans(genls(actMilitaryInstallation,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397935).
lisp_trans(genls(actMilitaryInstallation,tSumoMilitaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':397986).
lisp_trans(documentation(actMilitaryInstallation,vEnglishLanguage,s("A","#$StationaryArtifact","consisting","of","grounds","and","#$Buildings","that","is","intended","to","be","used","by","a","#$MilitaryOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398035).
lisp_trans(genls(tSumoFarm,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398210).
lisp_trans(documentation(tSumoFarm,vEnglishLanguage,s("A","#$StationaryArtifact","consisting","of","a","cultivated","#$LandArea","and","#$Buildings","for","maintaining","the","land","and","/","or","the","#$Animals","on","the","land",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398245).
lisp_trans(genls(tPlaceLikeBarn,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398424).
lisp_trans(disjointWith(tPlaceLikeBarn,tPlaceLikeResidentialBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398449).
lisp_trans(documentation(tPlaceLikeBarn,vEnglishLanguage,s("A","#$Building","on","a","#$Farm","that","is","used","for","keeping","#$DomesticAnimals",",","#$Fodder","or","harvested","crops",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398485).
lisp_trans(=>(tPlaceLikeBarn(BARN),exists([FARM],and(tSumoFarm(FARM),located(BARN,FARM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398624).
lisp_trans(genls(tSumoPerformanceStage,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398749).
lisp_trans(documentation(tSumoPerformanceStage,vEnglishLanguage,s("A","large","platform","for","theatrical","plays",",","lectures",",","dances",",","music","recitals",",","etc",",","which","can","be","observed","by","an","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398796).
lisp_trans(=>(tSumoPerformanceStage(STAGE),hasPurpose(STAGE,exists([PERF],and(actDemonstrating(PERF),eventLocated(PERF,STAGE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':398965).
lisp_trans(=>(tSumoPerformanceStage(STAGE),exists([AUDITORIUM],and(tSumoAuditorium(AUDITORIUM),part(STAGE,AUDITORIUM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399139).
lisp_trans(genls(actPerformanceStageWing,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399289).
lisp_trans(documentation(actPerformanceStageWing,vEnglishLanguage,s("A","part","of","the","#$PerformanceStage","that","is","not","visible","to","members","of","the","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399340).
lisp_trans(=>(actPerformanceStageWing(W),exists([S],and(tSumoPerformanceStage(S),part(W,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399478).
lisp_trans(genls(tSumoMagnetism,tSumoRadiatingElectromagnetic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399604).
lisp_trans(documentation(tSumoMagnetism,vEnglishLanguage,s("Any","instance","of","#$RadiatingElectromagnetic","which","involves","the","attraction","of","#$Iron",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399650).
lisp_trans(genls(tSumoRadioEmission,tSumoRadiatingElectromagnetic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399780).
lisp_trans(documentation(tSumoRadioEmission,vEnglishLanguage,s("Any","instance","of","#$RadiatingElectromagnetic","where","the","waves","have","a","wavelength","between","5","milimeters","and","30",",","0","meters",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399830).
lisp_trans(genls(actBroadcasting,actDisseminating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':399997).
lisp_trans(genls(actBroadcasting,tSumoRadioEmission),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400035).
lisp_trans(documentation(actBroadcasting,vEnglishLanguage,'Disseminating information by using a  #$CommunicationDevice that radiates #$RadioEmissions.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400073).
lisp_trans(=>(actBroadcasting(BROADCAST),exists([DEVICE],and(tObjectCommunicationDevice(DEVICE),instrument(BROADCAST,DEVICE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400215).
lisp_trans(genls(actRadioBroadcasting,actBroadcasting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400382).
lisp_trans(documentation(actRadioBroadcasting,vEnglishLanguage,s("Any","instance","of","#$Broadcasting","which","is","intended","to","be","received","by","a","#$RadioReceiver",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400424).
lisp_trans(=>(tPartTypeRadioReceiver(RADIO),capability(actRadioBroadcasting,patient,RADIO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400564).
lisp_trans(genls(actTelevisionBroadcasting,actBroadcasting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400652).
lisp_trans(documentation(actTelevisionBroadcasting,vEnglishLanguage,s("Any","instance","of","#$Broadcasting","which","is","intended","to","be","received","by","a","#$Television",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':400699).
lisp_trans(genls(tSumoPeriodicalPublisher,tSumoPublisher),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401036).
lisp_trans(documentation(tSumoPeriodicalPublisher,vEnglishLanguage,s("Any","#$Publisher","that","publishes","#$Periodicals",",","e",".","g",".","newspaper","and","magazine","publishing","houses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401077).
lisp_trans(=>(tSumoPeriodicalPublisher(C),exists([PUBLISH,PERIODICAL],and(actPublication(PUBLISH),agent(PUBLISH,C),patient(PUBLISH,PERIODICAL),iboPeriodicalCopy(PERIODICAL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401226).
lisp_trans(genls(tPartTypeAntenna,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401453).
lisp_trans(documentation(tPartTypeAntenna,vEnglishLanguage,s("A","#$CommunicationDevice","which","enables","or","improves","the","reception","of","#$RadioEmissions","by","another","#$CommunicationDevice","(","the","radio","or","television","receiver",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401492).
lisp_trans(=>(tPartTypeAntenna(ANTENNA),capability(tSumoRadioEmission,instrument,ANTENNA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401690).
lisp_trans(genls(eventExplosion,actRadiating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401777).
lisp_trans(documentation(eventExplosion,vEnglishLanguage,s("Any","sudden","and","massive","release","of","energy","that","is","the","product","of","a","chemical","reaction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401808).
lisp_trans(=>(eventExplosion(EXPLOSION),exists([PROC],and(eventChemicalProcess(PROC),causes(PROC,EXPLOSION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':401939).
lisp_trans(=>(eventExplosion(EXPLOSION),capability(actDamaging,instrument,EXPLOSION)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402089).
lisp_trans(genls(tSumoPerformance,actDemonstrating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402177).
lisp_trans(documentation(tSumoPerformance,vEnglishLanguage,s("A","#$Demonstrating","which","includes","#$DramaticActing","and","/","or","#$MakingMusic","and","which","is","intended","to","entertain","the","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402214).
lisp_trans(=>(tSumoPerformance(PERFORMANCE),exists([SUB],and(subProcess(SUB,PERFORMANCE),or(actDramaticActing(SUB),tSumoMakingMusic(SUB))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402382).
lisp_trans(=>(tSumoPerformance(PERFORMANCE),exists([STAGE],and(tSumoPerformanceStage(STAGE),eventLocated(PERFORMANCE,STAGE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402595).
lisp_trans(genls(tSumoPerformanceAct,tSumoPerformance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402761).
lisp_trans(documentation(tSumoPerformanceAct,vEnglishLanguage,s("A","discrete","#$subProcess","of","a","#$Performance",",","e",".","g",".","an","act","of","a","play",",","a","movement","of","a","performance","of","a","symphony",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402799).
lisp_trans(genls(tSumoLecture,actDemonstrating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402965).
lisp_trans(genls(tSumoLecture,actSpeaking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':402998).
lisp_trans(documentation(tSumoLecture,vEnglishLanguage,s("Any","instance","of","#$Speaking","which","is","done","before","an","assembled","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403026).
lisp_trans(genls(actProclaiming,tSumoLecture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403141).
lisp_trans(genls(actProclaiming,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403172).
lisp_trans(documentation(actProclaiming,vEnglishLanguage,s("Any","instance","of","#$Speaking","before","an","assembled","audience","that","effects","an","institutional","change",",","e",".","g",".","a","change","in","the","laws","of","the","government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403205).
lisp_trans(genls(actCommenting,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403393).
lisp_trans(documentation(actCommenting,vEnglishLanguage,s("Commenting","is","an","#$IntentionalProcess","where","an","#$Agent","speaks","about","a","#$Process","it","is","#$Looking","at",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403434).
lisp_trans(termFormat(vEnglishLanguage,actCommenting,"commenting"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403580).
lisp_trans(=>(and(actCommenting(COMMENTING),actProcess(PROCESS),patient(COMMENTING,PROCESS)),exists([AGENT,SPEAKING,LOOKING],and(tAgent(AGENT),actSpeaking(SPEAKING),actLooking(LOOKING),agent(SPEAKING,AGENT),agent(LOOKING,AGENT),patient(LOOKING,PROCESS),refers(SPEAKING,PROCESS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':403634).
lisp_trans(rtBinaryPredicate(commentator),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404037).
lisp_trans(argIsa(commentator,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404076).
lisp_trans(argIsa(commentator,2,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404105).
lisp_trans(documentation(commentator,vEnglishLanguage,s("(","commentator","?","AGENT","?","PROCESS",")","means","that","some","#$Agent","?","AGENT","is","#$Looking","at","some","#$Process","?","PROCESS","and","#$Speaking","about","it","simultaneously",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404136).
lisp_trans(termFormat(vEnglishLanguage,commentator,"commentator"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404324).
lisp_trans(=>(commentator(AGENT,PROCESS),exists([COMMENTING],and(actCommenting(COMMENTING),agent(COMMENTING,AGENT),patient(COMMENTING,PROCESS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404379).
lisp_trans(genls(actReciting,actSpeaking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404569).
lisp_trans(documentation(actReciting,vEnglishLanguage,s("Any","instance","of","#$Speaking","where","what","is","uttered","is","contained","within","a","#$Text",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404598).
lisp_trans(=>(actReciting(R),exists([P,T],and(realization(R,P),containsInformation(T,P),tSumoText(T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404722).
lisp_trans(genls(actMusicalPerformance,tSumoPerformance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404867).
lisp_trans(documentation(actMusicalPerformance,vEnglishLanguage,s("A","#$Performance","that","consists","exclusively","of","#$MakingMusic",",","e",".","g",".","an","orchestra","playing","a","symphony","to","an","assembled","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':404909).
lisp_trans(=>(and(actMusicalPerformance(P),subProcess(M,P)),tSumoMakingMusic(M)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405087).
lisp_trans(genls(actSermon,tSumoLecture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405189).
lisp_trans(documentation(actSermon,vEnglishLanguage,s("A","#$Lecture","that","is","part","of","a","#$ReligiousService",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405215).
lisp_trans(=>(actSermon(SERMON),exists([SERVICE],and(tSumoReligiousService(SERVICE),subProcess(SERMON,SERVICE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405307).
lisp_trans(genls(actDramaticActing,actPretending),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405462).
lisp_trans(documentation(actDramaticActing,vEnglishLanguage,s("Playing","a","character","in","a","#$Performance",",","#$MotionPicture",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405499).
lisp_trans(genls(actDramaticPerformance,tSumoPerformance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405613).
lisp_trans(documentation(actDramaticPerformance,vEnglishLanguage,s("A","#$Performance","that","consists","exclusively","of","#$DramaticActing",",","e",".","g",".","a","live","performance","of","Death","_","of","_","a","_","Salesman","in","front","of","an","audience",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405656).
lisp_trans(=>(and(actDramaticPerformance(P),subProcess(A,P)),actDramaticActing(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405847).
lisp_trans(genls(tSumoDramaticCast,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405953).
lisp_trans(documentation(tSumoDramaticCast,vEnglishLanguage,s("The","#$GroupOfPeople","who","engage","in","#$DramaticActing","as","part","of","the","realization","of","a","single","#$FictionalText",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':405991).
lisp_trans(=>(tSumoDramaticCast(CAST),exists([TEXT,PROP,PROC],and(tSumoFictionalText(TEXT),containsInformation(TEXT,PROP),realization(PROC,PROP),all([MEMBER],=>(member(MEMBER,CAST),exists([SUB],and(actDramaticActing(SUB),agent(SUB,MEMBER),subProcess(SUB,PROC)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406147).
lisp_trans(genls(tSumoSocialParty,actMeeting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406625).
lisp_trans(genls(tSumoSocialParty,tSumoRecreationOrExercise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406656).
lisp_trans(documentation(tSumoSocialParty,vEnglishLanguage,s("Any","#$Meeting","where","the","intent","is","primarily","to","socialize","and","be","entertained",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406700).
lisp_trans(genls(actFormalMeeting,actMeeting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406825).
lisp_trans(disjointWith(actFormalMeeting,tSumoSocialParty),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406858).
lisp_trans(documentation(actFormalMeeting,vEnglishLanguage,s("Any","#$Meeting","which","is","the","result","of","#$Planning","and","whose","purpose","is","not","socializing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':406895).
lisp_trans(=>(actFormalMeeting(MEETING),exists([PLANNING],and(actPlanning(PLANNING),result(PLANNING,MEETING),earlier(uWhenFn(PLANNING),uWhenFn(MEETING))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407031).
lisp_trans(genls(actFuneral,actCeremony),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407243).
lisp_trans(genls(actFuneral,actFormalMeeting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407271).
lisp_trans(documentation(actFuneral,vEnglishLanguage,s("A","#$FormalMeeting","whose","purpose","is","to","commemorate","the","#$Death","of","someone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407304).
lisp_trans(=>(actFuneral(F),exists([D],and(tSumoDeath(D),refers(F,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407421).
lisp_trans(genls(tSumoBurial,actFuneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407530).
lisp_trans(documentation(tSumoBurial,vEnglishLanguage,s("A","#$Funeral","where","the","person","being","commemorated","or","an","#$Object","representing","the","person","is","placed","into","the","ground",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407556).
lisp_trans(=>(tSumoBurial(BURIAL),exists([SP],and(actBurying(SP),subProcess(SP,BURIAL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407712).
lisp_trans(genls(tSumoReligiousFuneral,actFuneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407839).
lisp_trans(genls(tSumoReligiousFuneral,actReligiousProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407875).
lisp_trans(documentation(tSumoReligiousFuneral,vEnglishLanguage,s("A","#$ReligiousFuneral","is","a","#$Funeral","with","specifically","religious","rites",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':407920).
lisp_trans(=>(tSumoReligiousFuneral(RF),exists([S],and(tSumoReligiousService(S),subProcess(S,RF)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408043).
lisp_trans(genls(tSumoReligiousBurial,tSumoReligiousFuneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408178).
lisp_trans(genls(tSumoReligiousBurial,tSumoBurial),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408222).
lisp_trans(documentation(tSumoReligiousBurial,vEnglishLanguage,s("A","religious","burial","is","the","burial","of","a","deceased","person","with","specifically","religious","rites",";","typically",",","in","consecrated","ground",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408256).
lisp_trans(genls(actInterviewing,actFormalMeeting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408430).
lisp_trans(documentation(actInterviewing,vEnglishLanguage,s("A","#$FormalMeeting","whose","purpose","is","to","acquire","information","from","the","interviewee","that","can","be","used","in","a","media","report",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408468).
lisp_trans(genls(actChoreographing,actPlanning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408632).
lisp_trans(documentation(actChoreographing,vEnglishLanguage,'Planning that results in a sequence of dance  steps that are executed as part of a #$Performance.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408667).
lisp_trans(=>(and(actChoreographing(G),result(G,P),realization(D,P)),actDancing(D)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408816).
lisp_trans(genls(vtResolutionEmotion,actDeciding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408931).
lisp_trans(documentation(vtResolutionEmotion,vEnglishLanguage,s("Any","instance","of","#$Deciding","which","is","conducted","at","a","#$FormalMeeting","and","where","the","#$agent","is","an","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':408962).
lisp_trans(=>(vtResolutionEmotion(RESOLUTION),exists([AGENT,MEETING],and(tGroupedOrganization(AGENT),agent(RESOLUTION,AGENT),subProcess(RESOLUTION,MEETING),actFormalMeeting(MEETING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409120).
lisp_trans(genls(actSmoking,tSumoRecreationOrExercise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409367).
lisp_trans(documentation(actSmoking,vEnglishLanguage,s("Inhaling","and","exhaling","#$Smoke","produced","by","a","#$CigarOrCigarette",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409407).
lisp_trans(=>(actSmoking(SMOKING),exists([BURN,CIGAR,BREATHE,SMOKE],and(subProcess(BURN,SMOKING),actCombustion(BURN),resource(BURN,CIGAR),tSumoCigarOrCigarette(CIGAR),result(BURN,SMOKE),patient(BREATHE,SMOKE),actBreathing(BREATHE),subProcess(BREATHE,SMOKING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409515).
lisp_trans(genls(tGroupedJury,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409906).
lisp_trans(documentation(tGroupedJury,vEnglishLanguage,s("A","#$GroupOfPeople","who","are","given","the","duty","of","rendering","a","verdict","with","respect","to","a","#$LegalAction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':409936).
lisp_trans(=>(tGroupedJury(JURY),holdsRight(exists([DECISION],and(tSumoLegalDecision(DECISION),agent(DECISION,JURY))),JURY)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410074).
lisp_trans(genls(tSumoCriminalGang,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410273).
lisp_trans(documentation(tSumoCriminalGang,vEnglishLanguage,s("A","#$GroupOfPeople","which","exists","(","partially","or","wholly",")","for","the","purpose","of","CriminalAction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410311).
lisp_trans(=>(tSumoCriminalGang(G),hasPurpose(G,exists([A],and(actCriminalAction(A),agent(A,G))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410447).
lisp_trans(genls(tSumoLegalCharge,actLegalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410590).
lisp_trans(documentation(tSumoLegalCharge,vEnglishLanguage,s("Any","#$LegalAction","of","which","a","#$Government","is","the","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410625).
lisp_trans(=>(tSumoLegalCharge(CHARGE),exists([GOV],and(tSumoGovernment(GOV),agent(CHARGE,GOV)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410731).
lisp_trans(genls(actLegalAppeal,actRequesting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410871).
lisp_trans(genls(actLegalAppeal,actJudicialProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410905).
lisp_trans(documentation(actLegalAppeal,vEnglishLanguage,s("Asking","that","a","higher","court","reconsider","a","#$LegalDecision","of","a","lower","court",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':410944).
lisp_trans(genls(actPleading,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411066).
lisp_trans(documentation(actPleading,vEnglishLanguage,'Stating in a court of law a claim about whether or  not one is guilty of the crime of which one has been accused.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411094).
lisp_trans(=>(actPleading(P),exists([J],and(actJudicialProcess(J),subProcess(P,J)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411254).
lisp_trans(=>(actPleading(P),exists([C],and(actCriminalAction(C),refers(P,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411372).
lisp_trans(rtBinaryPredicate(describes),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411485).
lisp_trans(argIsa(describes,1,ftFormula),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411522).
lisp_trans(argIsa(describes,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411551).
lisp_trans(documentation(describes,vEnglishLanguage,s("(","describes","?","FORMULA","?","OBJECT",")","means","that","some","#$Formula","?","FORMULA",",","as","said","by","some","#$Agent",",","is","a","statement","regarding","some","#$Object","?","OBJECT")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411579).
lisp_trans(termFormat(vEnglishLanguage,describes,"describes"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411761).
lisp_trans(=>(describes(FORMULA,OBJECT),exists([STATING,AGENT],and(actStating(STATING),agent(STATING,AGENT),patient(STATING,FORMULA),refers(STATING,OBJECT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':411818).
lisp_trans(genls(actTestifying,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412036).
lisp_trans(documentation(actTestifying,vEnglishLanguage,s("Giving","testimony","as","part","of","a","#$JudicialProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412066).
lisp_trans(=>(actTestifying(TESTIFY),exists([PROC],and(actJudicialProcess(PROC),subProcess(TESTIFY,PROC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412161).
lisp_trans(genls(tSumoCourtRoom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412312).
lisp_trans(documentation(tSumoCourtRoom,vEnglishLanguage,s("Any","#$Room","whose","purpose","is","to","realize","#$JudicialProcesses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412338).
lisp_trans(=>(actJudicialProcess(PROCESS),exists([ROOM],and(tSumoCourtRoom(ROOM),eventLocated(PROCESS,ROOM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412444).
lisp_trans(genls(tSumoLegalOpinion,tSumoArgument),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412596).
lisp_trans(documentation(tSumoLegalOpinion,vEnglishLanguage,s("An","#$Argument","that","explains","the","reasoning","behind","a","#$LegalDecision",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412629).
lisp_trans(=>(tSumoLegalOpinion(OPINION),exists([DECISION,TEXT,PROPOSITION],and(tSumoLegalDecision(DECISION),result(DECISION,TEXT),containsInformation(TEXT,PROPOSITION),conclusion(PROPOSITION,OPINION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':412746).
lisp_trans(genls(tSumoLegalAward,tSumoLegalDecision),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413015).
lisp_trans(documentation(tSumoLegalAward,vEnglishLanguage,s("Any","#$LegalDecision","which","gives","to","the","plaintiff","of","the","corresponding","#$LegalAction","some","amount","of","monetary","compensation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413051).
lisp_trans(=>(and(tSumoLegalAward(AWARD),refers(AWARD,ACTION),actLegalAction(ACTION),agent(ACTION,PLAINTIFF)),confersRight(exists([GET,OBJ,VALUE],and(actGetting(GET),experiencer(GET,PLAINTIFF),patient(GET,OBJ),monetaryValue(OBJ,VALUE))),AWARD,PLAINTIFF)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413220).
lisp_trans(genls(actLegalConviction,tSumoLegalDecision),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413654).
lisp_trans(documentation(actLegalConviction,vEnglishLanguage,s("Any","#$LegalDecision","where","the","defendant","is","found","guilty","of","the","crime","for","which","the","corresponding","trial","was","held",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413695).
lisp_trans(genls(tSumoLegalDismissal,tSumoLegalDecision),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413860).
lisp_trans(documentation(tSumoLegalDismissal,vEnglishLanguage,s("Any","#$LegalDecision","where","the","#$LegalAction","of","the","plaintiff","is","dismissed","by","the","court",",","e",".","g",".","for","lack","of","merit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':413900).
lisp_trans(genls(tSumoLegalSummons,actOrdering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414063).
lisp_trans(genls(tSumoLegalSummons,actJudicialProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414096).
lisp_trans(documentation(tSumoLegalSummons,vEnglishLanguage,s("An","official","order","that","a","person","appear","at","a","#$CourtRoom","at","a","specified","time",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414136).
lisp_trans(=>(and(tSumoLegalSummons(S),patient(S,O),destination(S,P)),exists([C,T],and(tSumoCourtRoom(C),containsInformation(O,modalAttribute(holdsDuring(T,located(P,C)),cwLaw))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414262).
lisp_trans(genls(tSumoLegalAquittal,tSumoLegalDecision),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414519).
lisp_trans(documentation(tSumoLegalAquittal,vEnglishLanguage,s("Any","#$LegalDecision","where","the","defendant","is","found","not","to","be","guilty","of","the","crime","for","which","the","corresponding","trial","was","held",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414558).
lisp_trans(genls(actSentencing,tSumoLegalDecision),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414731).
lisp_trans(documentation(actSentencing,vEnglishLanguage,s("Any","#$LegalDecision","where","the","defendant","is","assigned","a","punishment","for","a","#$CriminalAction","which","was","the","subject","of","an","earlier","#$LegalConviction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414767).
lisp_trans(=>(and(actSentencing(S),patient(S,P)),exists([C],and(causes(C,S),actLegalConviction(C),patient(C,P),earlier(uWhenFn(C),uWhenFn(S))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':414958).
lisp_trans(documentation(defendant,vEnglishLanguage,s("(","defendant","?","AGENT","?","ACTION",")","means","the","#$LegalAction","?","ACTION","makes","a","legal","claim","against","?","AGENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415166).
lisp_trans(argIsa(defendant,1,actLegalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415306).
lisp_trans(argIsa(defendant,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415339).
lisp_trans(genlPreds(defendant,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415375).
lisp_trans(rtCaseRole(defendant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415407).
lisp_trans(documentation(plaintiff,vEnglishLanguage,s("(","plaintiff","?","ACTION","?","AGENT",")","means","that","?","AGENT","is","responsible","for","initiating","the","#$LegalAction","?","ACTION",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415438).
lisp_trans(argIsa(plaintiff,1,actLegalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415585).
lisp_trans(argIsa(plaintiff,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415618).
lisp_trans(genlPreds(plaintiff,agent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415654).
lisp_trans(rtCaseRole(plaintiff),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415684).
lisp_trans(genls(tSumoGameCall,actDeciding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415715).
lisp_trans(genls(tSumoGameCall,actDeclaring),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415744).
lisp_trans(documentation(tSumoGameCall,vEnglishLanguage,s("A","decision","issued","by","an","official","referee","in","a","#$Game",".","Note","that","#$GameCall","is","a","subclass","of","#$Declaring",",","because","these","decisions","have","binding",",","normative","force",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415774).
lisp_trans(=>(tSumoGameCall(CALL),exists([GAME],and(tGame(GAME),refers(CALL,GAME)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':415981).
lisp_trans(genls(tSumoBeginningOperations,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416109).
lisp_trans(disjointWith(tSumoBeginningOperations,tSumoCeasingOperations),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416162).
lisp_trans(documentation(tSumoBeginningOperations,vEnglishLanguage,s("The","process","of","an","#$Organization","commencing","operations",".","In","the","case","of","a","#$Corporation",",","this","would","be","the","process","of","going","into","business",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416211).
lisp_trans(=>(and(tSumoBeginningOperations(OP),tGroupedOrganization(ORG),agent(OP,ORG)),starts(OP,uWhenFn(ORG))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416407).
lisp_trans(genls(actOrganizationalMerging,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416551).
lisp_trans(documentation(actOrganizationalMerging,vEnglishLanguage,s("The","process","of","two","or","more","#$Organizations","merging","into","a","single","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416606).
lisp_trans(=>(and(actOrganizationalMerging(M),patient(M,ORG1),patient(M,ORG2),not(equal(ORG1,ORG2))),and(holdsDuring(uBeginFn(uWhenFn(M)),not(exists([S1],and(subOrganization(ORG1,S1),subOrganization(ORG2,S1))))),holdsDuring(iTimeOf_EndFn(uWhenFn(M)),exists([S2],and(subOrganization(ORG1,S2),subOrganization(ORG2,S2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':416745).
lisp_trans(genls(tSumoCeasingOperations,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417224).
lisp_trans(documentation(tSumoCeasingOperations,vEnglishLanguage,s("The","process","of","an","#$Organization","ceasing","operations",",","i",".","e",".","its","folding","or","going","out","of","business","in","some","other","fashion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417275).
lisp_trans(=>(and(tSumoCeasingOperations(OP),tGroupedOrganization(ORG),agent(OP,ORG)),finishes(OP,uWhenFn(ORG))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417448).
lisp_trans(genls(tSumoBecomingDrunk,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417592).
lisp_trans(disjointWith(tSumoBecomingDrunk,tSumoSoberingUp),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417638).
lisp_trans(documentation(tSumoBecomingDrunk,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Sober","to","a","state","of","being","#$Drunk",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417674).
lisp_trans(=>(and(tSumoBecomingDrunk(B),experiencer(B,A)),and(holdsDuring(uBeginFn(uWhenFn(B)),sumoAttribute(A,tSumoSober)),holdsDuring(iTimeOf_EndFn(uWhenFn(B)),sumoAttribute(A,mobDrunk)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':417811).
lisp_trans(vtConsciousnessAttribute(tSumoSober),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418037).
lisp_trans(documentation(tSumoSober,vEnglishLanguage,s("The","#$ConsciousnessAttribute","of","someone","whose","motor","and","cognitive","faculties","are","not","significantly","impaired","by","a","#$BiologicallyActiveSubstance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418077).
lisp_trans(genls(tSumoSoberingUp,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418261).
lisp_trans(documentation(tSumoSoberingUp,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Drunk","to","a","state","of","being","#$Sober",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418304).
lisp_trans(=>(and(tSumoSoberingUp(B),experiencer(B,A)),and(holdsDuring(uBeginFn(uWhenFn(B)),sumoAttribute(A,mobDrunk)),holdsDuring(iTimeOf_EndFn(uWhenFn(B)),sumoAttribute(A,tSumoSober)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418439).
lisp_trans(genls(tSumoFallingAsleep,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418663).
lisp_trans(disjointWith(tSumoFallingAsleep,tSumoWakingUp),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418709).
lisp_trans(documentation(tSumoFallingAsleep,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Awake","to","a","state","of","being","#$Asleep",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418743).
lisp_trans(=>(and(tSumoFallingAsleep(FALL),experiencer(FALL,AGENT)),exists([START,FINISH],and(starts(START,uWhenFn(FALL)),finishes(FINISH,uWhenFn(FALL)),holdsDuring(START,sumoAttribute(AGENT,mobAwake)),holdsDuring(FINISH,sumoAttribute(AGENT,mobAsleep))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':418882).
lisp_trans(genls(tSumoWakingUp,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419204).
lisp_trans(documentation(tSumoWakingUp,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Asleep","to","a","state","of","being","#$Awake",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419245).
lisp_trans(=>(and(tSumoWakingUp(WAKE),experiencer(WAKE,AGENT)),exists([START,FINISH],and(starts(START,uWhenFn(WAKE)),finishes(FINISH,uWhenFn(WAKE)),holdsDuring(START,sumoAttribute(AGENT,mobAsleep)),holdsDuring(FINISH,sumoAttribute(AGENT,mobAwake))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419379).
lisp_trans(genls(tSumoGainingConsciousness,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419696).
lisp_trans(documentation(tSumoGainingConsciousness,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Unconscious","to","a","state","of","being","#$Awake",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419749).
lisp_trans(=>(and(tSumoGainingConsciousness(G),experiencer(G,A)),and(holdsDuring(uBeginFn(uWhenFn(G)),sumoAttribute(A,mobUnconscious)),holdsDuring(iTimeOf_EndFn(uWhenFn(G)),sumoAttribute(A,mobAwake)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':419899).
lisp_trans(genls(tSumoLosingConsciousness,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420157).
lisp_trans(disjointWith(tSumoLosingConsciousness,tSumoGainingConsciousness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420209).
lisp_trans(documentation(tSumoLosingConsciousness,vEnglishLanguage,s("The","process","of","transitioning","from","a","state","of","being","#$Awake","to","a","state","of","being","#$Unconscious",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420261).
lisp_trans(=>(and(tSumoLosingConsciousness(L),experiencer(L,A)),and(holdsDuring(uBeginFn(uWhenFn(L)),sumoAttribute(A,mobAwake)),holdsDuring(iTimeOf_EndFn(uWhenFn(L)),sumoAttribute(A,mobUnconscious)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420411).
lisp_trans(rtBinaryPredicate(issuedBy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420649).
lisp_trans(argIsa(issuedBy,1,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420685).
lisp_trans(argIsa(issuedBy,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420717).
lisp_trans(documentation(issuedBy,vEnglishLanguage,s("(","#$issuedBy","?","Certificate","?","Agent",")","means","that","a","#$Certificate","?","Certificate","is","produced","and","offered","by","?","Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420752).
lisp_trans(=>(issuedBy(CERT,AGENT),exists([P],and(actIntentionalProcess(P),agent(P,AGENT),result(P,CERT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':420905).
lisp_trans(genls(vtAcademicDegree,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421056).
lisp_trans(documentation(vtAcademicDegree,vEnglishLanguage,s("A","#$Certificate","that","demonstrates","that","the","holder","of","the","#$Certificate","has","successfully","completed","an","#$EducationalProgram",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421094).
lisp_trans(=>(and(vtAcademicDegree(DEGREE),possesses(AGENT,DEGREE)),exists([PROGRAM,STUDY],and(tSumoEducationalProgram(PROGRAM),realization(STUDY,PROGRAM),experiencer(STUDY,AGENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421268).
lisp_trans(genls(tSumoLicense,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421522).
lisp_trans(documentation(tSumoLicense,vEnglishLanguage,s("License","is","the","subclass","of","#$Certificates","that","are","granted","by","a","#$GovernmentOrganization","and","that","authorize","the","performance","of","a","kind","of","action",",","e",".","g",".",",","driving",",","exporting",",","travelling","to","another","country",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421553).
lisp_trans(=>(tSumoLicense(L),exists([ORG],and(actGovernmentOrganization(ORG),issuedBy(L,ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421806).
lisp_trans(genls(tObjectTicket,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421934).
lisp_trans(documentation(tObjectTicket,vEnglishLanguage,s("A","#$Certificate","that","allows","the","holder","to","perform","a","specified","act","once",",","e",".","g",".","ride","a","bus",",","attend","a","concert",",","obtain","a","prize",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':421964).
lisp_trans(=>(and(issuedBy(TICKET,AGENT),tObjectTicket(TICKET),possesses(CUST,TICKET)),confersNorm(AGENT,exists([T],holdsDuring(T,exists([P],and(actProcess(P),agent(P,AGENT),experiencer(P,CUST))))),cwPermission)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':422440).
lisp_trans(genls(tObjectPassport,tSumoLicense),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':422767).
lisp_trans(documentation(tObjectPassport,vEnglishLanguage,s("A","#$License","which","identifies","the","holder","and","permits","travel","between","different","countries",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':422795).
lisp_trans(=>(and(tObjectPassport(P),possesses(A,P)),confersNorm(P,exists([T,N1,N2],and(eventTranslocation(T),agent(T,A),origin(T,N1),destination(T,N2),actNation(N1),actNation(N2),not(equal(N1,N2)))),cwPermission)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':422928).
lisp_trans(genls(tSumoPassCertificate,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423256).
lisp_trans(documentation(tSumoPassCertificate,vEnglishLanguage,s("A","#$Certificate","that","allows","the","holder","to","be","at","or","away","from","a","specified","location",",","e",".","g",".","a","pass","for","a","leave","of","absence",",","a","hall","pass",",","a","pass","to","enter","a","cleared","facility",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423295).
lisp_trans(=>(and(tSumoPassCertificate(P),possesses(A,P)),exists([L],confersNorm(P,located(A,L),cwPermission))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423521).
lisp_trans(genls(tSumoTestament,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423669).
lisp_trans(documentation(tSumoTestament,vEnglishLanguage,s("A","#$Certificate","that","describes","how","a","person","'s","property","is","to","be","distributed","after","the","death","of","the","person",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423702).
lisp_trans(=>(tSumoTestament(T),exists([B],and(actBequeathing(B),refers(T,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423855).
lisp_trans(documentation(registeredItem,vEnglishLanguage,s("(","registeredItem","?","DOCUMENT","?","ITEM",")","means","that","the","#$Text","?","DOCUMENT","contains","an","official","record","of","the","#$Physical","thing","?","ITEM",".","The","registered","item","could","be","an","object","or","an","event",",","e",".","g",".",",","an","automobile",",","a","ship",",","a","marriage",",","an","adoption",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':423966).
lisp_trans(rtBinaryPredicate(registeredItem),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424249).
lisp_trans(argIsa(registeredItem,1,tSumoText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424291).
lisp_trans(argIsa(registeredItem,2,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424322).
lisp_trans(genlPreds(registeredItem,refers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424357).
lisp_trans(genls(tSumoEducationalProgram,cwPlan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424394).
lisp_trans(documentation(tSumoEducationalProgram,vEnglishLanguage,s("A","series","of","#$EducationalCourses","that","must","be","completed","to","receive","an","#$AcademicDegree","or","other","#$Certificate",".","Note","that","an","#$EducationalProgram",",","unlike","an","#$EducationalCourse",",","may","be","realized","at","more","than","one","#$EducationalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424429).
lisp_trans(=>(tSumoEducationalProgram(PROGRAM),exists([COURSE1,COURSE2],and(tSumoEducationalCourse(COURSE1),tSumoEducationalCourse(COURSE2),not(equal(COURSE1,COURSE2)),subPlan(COURSE1,PROGRAM),subPlan(COURSE2,PROGRAM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':424724).
lisp_trans(genls(tSumoEducationalCourse,tSumoEducationalProgram),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425025).
lisp_trans(documentation(tSumoEducationalCourse,vEnglishLanguage,s("A","schedule","of","class","meetings","offered","by","an","#$EducationalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425073).
lisp_trans(=>(tSumoEducationalCourse(COURSE),exists([CLASS,ORG],and(realization(CLASS,COURSE),actEducationalProcess(CLASS),eventLocated(CLASS,ORG),tGroupedEducationalOrganization(ORG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425197).
lisp_trans(genls(tSumoSportsPlay,cwPlan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425452).
lisp_trans(documentation(tSumoSportsPlay,vEnglishLanguage,s("A","#$Plan","for","a","#$Maneuver","within","a","#$TeamSport",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425479).
lisp_trans(=>(and(tSumoSportsPlay(SP),realization(P,SP)),exists([S],and(tTeamSport(S),tSumoManeuver(P),subProcess(P,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425573).
lisp_trans(genls(tSumoSchool,tGroupedEducationalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425752).
lisp_trans(documentation(tSumoSchool,vEnglishLanguage,s("An","#$EducationalOrganization","with","a","curriculum",",","teachers",",","and","students",".","Most","#$Schools","are","housed","in","a","#$Building","dedicated","to","the","#$EducationalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425794).
lisp_trans(genls(tSumoPublicSchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':425997).
lisp_trans(genls(tSumoPublicSchool,actGovernmentOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426028).
lisp_trans(documentation(tSumoPublicSchool,vEnglishLanguage,s("A","#$School","which","is","financed","primarily","by","taxes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426075).
lisp_trans(genls(tSumoPrivateSchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426172).
lisp_trans(disjointWith(tSumoPrivateSchool,actGovernmentOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426204).
lisp_trans(documentation(tSumoPrivateSchool,vEnglishLanguage,s("A","#$School","which","is","not","publicly","owned",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426252).
lisp_trans(genls(tGroupedHighSchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426341).
lisp_trans(documentation(tGroupedHighSchool,vEnglishLanguage,s("A","#$School","which","admits","#$students","who","have","graduated","from","a","middle","school","and","which","normally","covers","the","ninth","through","twelfth","grades",".","A","#$HighSchool","confers","a","high","school","diploma",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426370).
lisp_trans(=>(and(actMatriculation(ENTER),agent(ENTER,COLLEGE),patient(ENTER,STUDENT),tGroupedCollege(COLLEGE)),exists([GRAD,SCHOOL],and(actGraduation(GRAD),agent(GRAD,SCHOOL),patient(GRAD,STUDENT),tGroupedHighSchool(SCHOOL),earlier(uWhenFn(GRAD),uWhenFn(ENTER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426600).
lisp_trans(genls(tSumoSecondarySchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':426980).
lisp_trans(documentation(tSumoSecondarySchool,vEnglishLanguage,s("A","#$School","which","admits","students","who","have","graduated","from","a","middle","school","and","which","normally","covers","the","ninth","through","twelfth","grades",".","A","#$SecondarySchool","confers","a","high","school","diploma",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':427014).
lisp_trans(=>(and(actMatriculation(E),agent(E,C),patient(E,P),tGroupedCollege(C)),exists([G,S],and(actGraduation(G),agent(G,S),patient(G,P),tSumoSecondarySchool(S),earlier(uWhenFn(G),uWhenFn(E))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':427252).
lisp_trans(genls(tSumoVocationalSchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':427540).
lisp_trans(documentation(tSumoVocationalSchool,vEnglishLanguage,s("Any","#$School","whose","aim","is","to","teach","students","an","#$OccupationalTrade",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':427575).
lisp_trans(=>(tSumoVocationalSchool(VS),hasPurpose(VS,exists([P,S,T],and(actEducationalProcess(P),eventLocated(P,VS),student(S,VS),experiencer(P,S),tSumoOccupationalTrade(T),holdsDuring(iTimeOf_EndFn(uWhenFn(P)),sumoAttribute(S,T)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':427696).
lisp_trans(genls(tSumoPostSecondarySchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428017).
lisp_trans(sumo_partition(tSumoPostSecondarySchool,tSumoJuniorCollege,tGroupedCollege,tGroupedUniversity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428055).
lisp_trans(documentation(tSumoPostSecondarySchool,vEnglishLanguage,s("The","class","of","#$Schools","that","offer","an","associate","'s","degree","or","a","bachelor","'s","degree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428120).
lisp_trans(genls(tSumoJuniorCollege,tSumoPostSecondarySchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428256).
lisp_trans(documentation(tSumoJuniorCollege,vEnglishLanguage,s("The","class","of","#$PostSecondarySchools","that","offer","an","associate","'s","degree","and","do","not","offer","a","bachelor","'s","degree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428301).
lisp_trans(genls(tGroupedCollege,tSumoPostSecondarySchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428461).
lisp_trans(documentation(tGroupedCollege,vEnglishLanguage,s("A","#$School","which","admits","#$students","who","have","graduated","from","high","school","and","which","confers","a","bachelor","'s","degree",",","normally","requiring","four","years","of","study",".","Note","that","a","#$College","does","not","confer","any","graduate","degrees",".","For","institutions","that","confer","both","bachelor","'s","and","graduate","degrees",",","the","concept","#$University","should","be","used",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428500).
lisp_trans(genls(tGroupedUniversity,tSumoPostSecondarySchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428869).
lisp_trans(documentation(tGroupedUniversity,vEnglishLanguage,s("A","#$School","which","admits","#$students","that","have","graduated","from","high","school","(","known","as","undergraduate","students",")","and","#$students","who","have","received","a","bachelor","'s","degree","(","known","as","graduate","students",")",".","A","#$University","confers","both","bachelor","'s","and","graduate","degrees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':428911).
lisp_trans(genls(tGroupedGraduateSchool,tSumoPostSecondarySchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429212).
lisp_trans(documentation(tGroupedGraduateSchool,vEnglishLanguage,s("A","#$School","which","is","devoted","to","a","specific","subject","area",",","which","admits","students","that","have","a","bachelor","'s","degree",",","which","grants","masters","and","/","or","doctorate","degrees",",","and","which","is","part","of","a","#$University",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429258).
lisp_trans(=>(tGroupedGraduateSchool(S),exists([U],and(tGroupedUniversity(U),part(S,U)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429502).
lisp_trans(genls(tGroupedMedicalSchool,tGroupedGraduateSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429615).
lisp_trans(documentation(tGroupedMedicalSchool,vEnglishLanguage,s("A","#$GraduateSchool","that","is","devoted","to","#$MedicalScience","and","that","grants","the","degree","of","doctor","of","medicine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429655).
lisp_trans(genls(tSumoArtSchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429810).
lisp_trans(documentation(tSumoArtSchool,vEnglishLanguage,s("Any","#$School","whose","aim","is","to","teach","students","how","to","create","#$ArtWorks",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429838).
lisp_trans(=>(and(tSumoArtSchool(AS),actEducationalProcess(P),eventLocated(P,AS)),exists([M,ART],and(actMaking(M),patient(M,ART),tSumoArtWork(ART),refers(P,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':429953).
lisp_trans(genls(tSumoDaySchool,tSumoSchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430214).
lisp_trans(documentation(tSumoDaySchool,vEnglishLanguage,s("A","#$School","that","does","not","board","its","students",",","i",".","e",".","students","attend","classes","during","the","day","and","then","return","to","a","private","residence","for","the","night",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430242).
lisp_trans(=>(tSumoDaySchool(DS),not(exists([S],and(student(S,DS),home(S,DS))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430431).
lisp_trans(genlPreds(student,member),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430550).
lisp_trans(argIsa(student,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430579).
lisp_trans(argIsa(student,2,tGroupedEducationalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430604).
lisp_trans(documentation(student,vEnglishLanguage,s("(","#$student","?","AGENT","?","ORG",")","means","that","?","AGENT","is","enrolled","in","the","#$EducationalOrganization","?","ORG",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430647).
lisp_trans(=>(student(AGENT,ORG),exists([PROCESS],and(actEducationalProcess(PROCESS),eventLocated(PROCESS,ORG),destination(PROCESS,AGENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430784).
lisp_trans(documentation(almamater,vEnglishLanguage,s("(","almamater","?","PERSON","?","ORG",")","means","that","?","PERSON","enrolled","for","a","higher","degree","at","insititution","?","ORG",",","in","principle","to","complete","an","academic","degree",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':430962).
lisp_trans(argIsa(almamater,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431146).
lisp_trans(argIsa(almamater,2,tSumoPostSecondarySchool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431174).
lisp_trans(rtBinaryPredicate(almamater),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431218).
lisp_trans(=>(almamater(PERSON,SCHOOL),exists([EV],and(actEducationalProcess(EV),destination(EV,PERSON),eventLocated(EV,SCHOOL),holdsDuring(uWhenFn(EV),sumoAttribute(PERSON,mobStudent))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431256).
lisp_trans(genlPreds(teacher,member),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431501).
lisp_trans(argIsa(teacher,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431530).
lisp_trans(argIsa(teacher,2,tGroupedEducationalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431555).
lisp_trans(documentation(teacher,vEnglishLanguage,s("(","#$teacher","?","AGENT","?","ORG",")","means","that","?","AGENT","is","a","teacher","at","the","#$EducationalOrganization","?","ORG",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431598).
lisp_trans(=>(teacher(AGENT,ORG),exists([PROCESS],and(actEducationalProcess(PROCESS),eventLocated(PROCESS,ORG),agent(PROCESS,AGENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431736).
lisp_trans(genls(tSumoDriversLicense,tSumoLicense),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431914).
lisp_trans(documentation(tSumoDriversLicense,vEnglishLanguage,s("A","#$License","which","identifies","the","holder","and","indicates","that","he","has","the","right","to","drive","a","certain","class","of","#$RoadVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':431948).
lisp_trans(=>(and(tSumoDriversLicense(L),possesses(A,L)),confersNorm(L,exists([D,V],and(actDriving(D),agent(D,A),patient(D,V),tObjectRoadVehicle(V))),cwPermission)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432117).
lisp_trans(genls(tSumoInsurancePolicy,tSumoCertificate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432370).
lisp_trans(documentation(tSumoInsurancePolicy,vEnglishLanguage,s("A","#$Certificate","that","states","the","terms","of","an","insurance","contract",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432409).
lisp_trans(genls(rtEconomicRelation,rtBinaryRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432525).
lisp_trans(documentation(rtEconomicRelation,vEnglishLanguage,s("A","class","of","#$Relations","which","are","used","to","specify","various","economic","measures",",","e",".","g",".","the","GDP",",","the","consumer","price","index",",","and","the","trade","deficit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432568).
lisp_trans(=>(and(rtEconomicRelation(REL),argIsa(REL,1,CLASS)),genls(CLASS,tSumoGeopoliticalArea)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432761).
lisp_trans(genls(actLaborStriking,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432882).
lisp_trans(documentation(actLaborStriking,vEnglishLanguage,s("A","#$Process","in","which","some","or","all","of","the","employees","of","an","#$Organization","refuse","to","work","until","their","pay","is","increased","or","their","working","conditions","are","improved","in","some","respect",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':432929).
lisp_trans(=>(and(actLaborStriking(STRIKE),agent(STRIKE,PERSON),tSumoHuman(PERSON),patient(STRIKE,ORG),tGroupedOrganization(ORG)),employs(ORG,PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433153).
lisp_trans(genls(actEmploymentFiring,tSumoTerminatingEmployment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433358).
lisp_trans(documentation(actEmploymentFiring,vEnglishLanguage,s("Involuntarily","ending","one","'s","employment",".","Note","that","this","covers","termination","due","to","inadequate","performance",",","as","well","as","layoffs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433408).
lisp_trans(genls(actResigning,tSumoTerminatingEmployment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433587).
lisp_trans(documentation(actResigning,vEnglishLanguage,s("Voluntarily","ending","one","'s","employment",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433630).
lisp_trans(=>(and(actResigning(R),agent(R,A)),wants(A,R)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433712).
lisp_trans(genls(actRetiring,actResigning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433788).
lisp_trans(documentation(actRetiring,vEnglishLanguage,s("Voluntarily","leaving","employment","at","the","end","of","one","'s","career","in","order","to","take","time","off","in","the","later","years","of","one","'s","life",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433818).
lisp_trans(genls(actTransferringPosition,actOrganizationalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':433981).
lisp_trans(documentation(actTransferringPosition,vEnglishLanguage,s("Any","process","within","an","#$Organization","where","a","person","is","moved","from","one","#$Position","to","another",",","e",".","g",".","the","promotion","or","demotion","of","an","employee",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434035).
lisp_trans(=>(and(actTransferringPosition(T),experiencer(T,H)),exists([P1,P2,ORG],and(holdsDuring(uBeginFn(uWhenFn(T)),occupiesPosition(H,P1,ORG)),holdsDuring(iTimeOf_EndFn(uWhenFn(T)),occupiesPosition(H,P2,ORG)),not(equal(P1,P2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434233).
lisp_trans(rtQuaternaryPredicate(monetaryWage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434549).
lisp_trans(argIsa(monetaryWage,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434593).
lisp_trans(argIsa(monetaryWage,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434630).
lisp_trans(argIsa(monetaryWage,3,timeTimeDuration),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434660).
lisp_trans(argIsa(monetaryWage,4,vtCurrencyMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434697).
lisp_trans(documentation(monetaryWage,vEnglishLanguage,s("(","#$monetaryWage","?","ORG","?","PERSON","?","TIME","?","MONEY",")","means","that","the","#$Organization","employs","?","PERSON","and","pays","him","/","her","the","amount","of","money","?","MONEY","per","#$TimeDuration","?","TIME",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434737).
lisp_trans(=>(monetaryWage(ORG,PERSON,TIME,MONEY),employs(ORG,PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':434947).
lisp_trans(genls(tSumoGameArtifact,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435023).
lisp_trans(disjointDecomposition(tSumoGameArtifact,tObjectGameBoard,tSumoGamePiece),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435056).
lisp_trans(documentation(tSumoGameArtifact,vEnglishLanguage,s("An","#$Artifact","that","is","designed","to","be","used","as","an","#$instrument","in","a","#$Game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435113).
lisp_trans(=>(tSumoGameArtifact(ARTIFACT),exists([GAME],and(genls(GAME,tGame),capability(GAME,instrument,ARTIFACT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435236).
lisp_trans(genls(tObjectGameBoard,tSumoGameArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435391).
lisp_trans(documentation(tObjectGameBoard,vEnglishLanguage,s("A","#$GameArtifact","which","is","intended","to","be","used","as","the","game","area","for","playing","a","particular","game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435425).
lisp_trans(=>(tObjectGameBoard(BOARD),hasPurpose(BOARD,exists([GAME],and(tGame(GAME),eventLocated(GAME,BOARD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435565).
lisp_trans(genls(tSumoGamePiece,tSumoGameArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435779).
lisp_trans(documentation(tSumoGamePiece,vEnglishLanguage,s("A","#$GameArtifact","that","is","moved","around","in","a","game","area",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435813).
lisp_trans(genls(tSumoGameDie,tSumoGamePiece),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435913).
lisp_trans(documentation(tSumoGameDie,vEnglishLanguage,s("A","small","cube","with","1","to","6","dots","on","each","face","that","is","used","to","generate","numbers","at","random","in","a","#$Game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':435942).
lisp_trans(genls(tObjectBall,tSumoGamePiece),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436085).
lisp_trans(documentation(tObjectBall,vEnglishLanguage,s("Any","#$GamePiece","which","has","the","shape","of","a","sphere",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436111).
lisp_trans(=>(tObjectBall(B),sumoAttribute(B,tSphere)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436199).
lisp_trans(genls(tSumoShotBall,tObjectBall),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436250).
lisp_trans(documentation(tSumoShotBall,vEnglishLanguage,s("A","solid","metal","#$Ball","that","is","used","in","the","sport","of","shotput",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436275).
lisp_trans(genls(tSumoGameShot,actImpelling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436379).
lisp_trans(genls(tSumoGameShot,tSumoManeuver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436409).
lisp_trans(documentation(tSumoGameShot,vEnglishLanguage,s("Impelling","a","#$GamePiece","for","the","purpose","of","scoring","a","point","or","preventing","the","opposing","player","or","team","from","scoring","a","point",".","Note","that","this","class","does","not","cover","shots","which","are","disallowed","by","the","rules","of","the","game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436438).
lisp_trans(=>(tSumoGameShot(SHOT),exists([PIECE],and(tSumoGamePiece(PIECE),patient(SHOT,PIECE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436698).
lisp_trans(=>(tSumoGameShot(SHOT),exists([GAME],and(tGame(GAME),subProcess(SHOT,GAME)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436835).
lisp_trans(=>(tSumoGameShot(SHOT),hasPurpose(SHOT,tSumoScore(SHOT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':436967).
lisp_trans(genls(tSumoScore,tSumoGameShot),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437047).
lisp_trans(documentation(tSumoScore,vEnglishLanguage,s("A","successful","attempt","to","score","a","point","in","a","#$Game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437073).
lisp_trans(genls(tSumoGameGoal,tSumoGameArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437165).
lisp_trans(documentation(tSumoGameGoal,vEnglishLanguage,s("The","location","where","a","#$GameShot","must","end","up","if","it","is","to","constitute","a","#$Score",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437198).
lisp_trans(=>(and(tSumoGameGoal(GOAL),instrument(GAME,GOAL),tGame(GAME),subProcess(SCORE,GAME),tSumoScore(SCORE)),exists([PIECE,TIME],and(tSumoGamePiece(PIECE),patient(SCORE,PIECE),temporalPart(TIME,uWhenFn(SCORE)),holdsDuring(TIME,located(PIECE,GOAL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437321).
lisp_trans(genls(tSumoSportServe,tSumoGameShot),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437696).
lisp_trans(documentation(tSumoSportServe,vEnglishLanguage,s("A","#$GameShot","which","is","part","of","a","#$Sport","and","which","serves","to","start","the","#$Sport",",","e",".","g",".","the","beginning","shot","in","#$Tennis",",","#$Badminton","or","#$Squash",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437727).
lisp_trans(=>(tSumoSportServe(SS),exists([S],and(tSport(S),subProcess(SS,S),starts(uWhenFn(SS),uWhenFn(S))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':437916).
lisp_trans(genls(actThrowing,actImpelling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438068).
lisp_trans(genls(actThrowing,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438098).
lisp_trans(documentation(actThrowing,vEnglishLanguage,s("Any","instance","of","#$Impelling","where","the","#$instrument","is","an","#$Arm",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438129).
lisp_trans(=>(actThrowing(THROW),exists([ARM],and(tPartTypeArm(ARM),instrument(THROW,ARM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438238).
lisp_trans(genls(actPitching,actThrowing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438368).
lisp_trans(genls(actPitching,tSumoGameShot),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438397).
lisp_trans(documentation(actPitching,vEnglishLanguage,'Throwing a #$Ball to the batter in a game of  #$Baseball or softball.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438426).
lisp_trans(=>(and(actPitching(PITCH),patient(PITCH,BALL)),tObjectBall(BALL)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438542).
lisp_trans(genls(actCatching,actTouching),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438644).
lisp_trans(genls(actCatching,tSumoManeuver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438673).
lisp_trans(documentation(actCatching,vEnglishLanguage,s("Any","#$Maneuver","in","a","#$Game","which","results","in","a","situation","where","the","#$agent","#$grasps","the","#$Ball",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438702).
lisp_trans(=>(and(actCatching(CATCH),patient(CATCH,BALL)),tObjectBall(CATCH)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438842).
lisp_trans(=>(and(actCatching(CATCH),agent(CATCH,AGENT),patient(CATCH,BALL)),holdsDuring(iTimeOf_EndFn(uWhenFn(CATCH)),grasps(AGENT,BALL))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':438946).
lisp_trans(genls(actSign,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':439977).
lisp_trans(genls(actSign,tSumoDisplayArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440020).
lisp_trans(documentation(actSign,vEnglishLanguage,s("A","Sign","is","a","#$DisplayArtifact","that","displays","any","range","of","information")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440052).
lisp_trans(termFormat(vEnglishLanguage,actSign,"Sign"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440160).
lisp_trans(genls(tObjectPlayingCard,tSumoGameArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440202).
lisp_trans(genls(tObjectPlayingCard,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440238).
lisp_trans(documentation(tObjectPlayingCard,vEnglishLanguage,s("A","small","piece","of","stiff","paper","with","markings","which","is","intended","to","be","used","for","playing","card","games",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440282).
lisp_trans(=>(tObjectPlayingCard(C),material(tObjectPaper,C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440426).
lisp_trans(genls(actStretching,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440482).
lisp_trans(documentation(actStretching,vEnglishLanguage,s("Moving","two","sides","of","an","object","in","opposite","directions","so","that","the","object","becomes","both","longer","and","thinner",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440511).
lisp_trans(genls(actStretching,actLengthening),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440662).
lisp_trans(genls(actAccelerating,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440697).
lisp_trans(genls(actAccelerating,actIncreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440735).
lisp_trans(documentation(actAccelerating,vEnglishLanguage,s("Increasing","the","speed","with","which","someone","or","something","is","moving",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440770).
lisp_trans(=>(and(actAccelerating(ACCELERATE),agent(ACCELERATE,AGENT)),exists([LENGTH1,LENGTH2,TIME1,TIME2],and(holdsDuring(uBeginFn(uWhenFn(ACCELERATE)),measure(AGENT,vSpeedFn(LENGTH1,TIME1))),holdsDuring(iTimeOf_EndFn(uWhenFn(ACCELERATE)),measure(AGENT,vSpeedFn(LENGTH2,TIME2))),or(greaterThan(LENGTH2,LENGTH1),greaterThan(TIME2,TIME1))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':440883).
lisp_trans(genls(actDecelerating,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':441322).
lisp_trans(genls(actDecelerating,actDecreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':441360).
lisp_trans(documentation(actDecelerating,vEnglishLanguage,s("Decreasing","the","speed","with","which","someone","or","something","is","moving",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':441395).
lisp_trans(=>(and(actDecelerating(D),agent(D,A)),exists([L1,L2,T1,T2],and(holdsDuring(uBeginFn(uWhenFn(D)),measure(A,vSpeedFn(L1,T1))),holdsDuring(iTimeOf_EndFn(uWhenFn(D)),measure(A,vSpeedFn(L2,T2))),or(greaterThan(L1,L2),greaterThan(T1,T2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':441507).
lisp_trans(=>(and(actAccelerating(A),equal(T,uWhenFn(A)),experiencer(A,E)),not(exists([D],and(actDecelerating(D),experiencer(D,E),equal(T,uWhenFn(D)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':441861).
lisp_trans(genls(actShortening,actDecreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442089).
lisp_trans(documentation(actShortening,vEnglishLanguage,s("Decreasing","the","length","of","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442122).
lisp_trans(=>(and(actShortening(S),patient(S,O)),exists([L1,L2],and(holdsDuring(uBeginFn(uWhenFn(S)),length(O,L1)),holdsDuring(iTimeOf_EndFn(uWhenFn(S)),length(O,L2)),greaterThan(L1,L2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442204).
lisp_trans(genls(eventFlying,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442462).
lisp_trans(documentation(eventFlying,vEnglishLanguage,s("Any","instance","of","#$Translocation","which","is","through","an","#$AtmosphericRegion","and","which","is","powered","by","the","wings","of","an","#$Animal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442494).
lisp_trans(=>(eventFlying(FLY),exists([REGION],and(tSumoAtmosphericRegion(REGION),eventLocated(FLY,REGION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442659).
lisp_trans(genls(tSumoTakingOff,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442808).
lisp_trans(documentation(tSumoTakingOff,vEnglishLanguage,s("Any","instance","of","#$Translocation","which","starts","on","something","other","than","an","#$AtmosphericRegion","and","which","has","an","instance","of","#$Flying","as","a","#$subProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':442843).
lisp_trans(=>(tSumoTakingOff(OFF),exists([REGION,FLYING],and(not(tSumoAtmosphericRegion(REGION)),holdsDuring(uBeginFn(uWhenFn(OFF)),eventLocated(OFF,REGION)),subProcess(FLYING,OFF),eventFlying(FLYING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443038).
lisp_trans(genls(actLanding,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443312).
lisp_trans(documentation(actLanding,vEnglishLanguage,s("Any","instance","of","#$Translocation","which","ends","up","on","something","other","than","an","#$AtmosphericRegion","and","which","has","an","instance","of","#$Flying","as","a","#$subProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443345).
lisp_trans(=>(actLanding(LAND),exists([REGION,FLYING],and(not(tSumoAtmosphericRegion(REGION)),holdsDuring(iTimeOf_EndFn(uWhenFn(LAND)),eventLocated(LAND,REGION)),subProcess(FLYING,LAND),eventFlying(FLYING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443539).
lisp_trans(genls(actReturning,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443813).
lisp_trans(documentation(actReturning,vEnglishLanguage,s("Any","instance","of","#$Translocation","where","the","#$agent","goes","to","a","location","where","he","/","she","had","been","before","the","#$Translocation","took","place",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':443848).
lisp_trans(=>(and(actReturning(RETURN),experiencer(RETURN,AGENT),destination(RETURN,DEST)),exists([TIME],and(earlier(TIME,uWhenFn(RETURN)),holdsDuring(TIME,located(AGENT,DEST))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444024).
lisp_trans(genls(actEscaping,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444269).
lisp_trans(documentation(actEscaping,vEnglishLanguage,s("Any","instance","of","#$Translocation","where","the","#$agent","brings","it","about","that","he","/","she","is","no","longer","confined","without","having","the","right","to","do","so",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444303).
lisp_trans(=>(and(actEscaping(ESCAPE),agent(ESCAPE,AGENT)),exists([CONFINE],and(actConfining(CONFINE),patient(CONFINE,AGENT),meetsTemporally(uWhenFn(CONFINE),uWhenFn(ESCAPE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444484).
lisp_trans(=>(actEscaping(ESCAPE),not(holdsRight(agent(ESCAPE,AGENT),AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444733).
lisp_trans(genls(actLeaving,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444825).
lisp_trans(documentation(actLeaving,vEnglishLanguage,s("The","initial","part","of","any","instance","of","#$Translocation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444858).
lisp_trans(=>(actLeaving(LEAVE),exists([GO],and(eventTranslocation(GO),subProcess(LEAVE,GO),starts(uWhenFn(LEAVE),uWhenFn(GO))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':444954).
lisp_trans(genls(actArriving,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445137).
lisp_trans(documentation(actArriving,vEnglishLanguage,s("The","final","part","of","any","instance","of","#$Translocation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445171).
lisp_trans(=>(actArriving(ARRIVE),exists([GO],and(eventTranslocation(GO),subProcess(ARRIVE,GO),finishes(uWhenFn(ARRIVE),uWhenFn(GO))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445266).
lisp_trans(genls(actDisappearing,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445455).
lisp_trans(documentation(actDisappearing,vEnglishLanguage,s("A","#$Translocation","of","an","#$Object","?","OBJ","after","which","a","#$Searching","of","the","?","OBJ","occurs","but","for","a","#$TimeInterval","?","TIME","it","is","not","possible","for","the","#$Agent","of","the","search","to","discover","the","?","OBJ")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445493).
lisp_trans(=>(actDisappearing(D),exists([OBJ,AGENT,SEARCH,TIME],and(actSearching(SEARCH),earlier(uWhenFn(D),uWhenFn(SEARCH)),agent(SEARCH,AGENT),tSumoObject(OBJ),patient(D,OBJ),patient(SEARCH,OBJ),timeOfTimeInterval(TIME),temporalPart(TIME,uWhenFn(SEARCH)),holdsDuring(TIME,not(modalAttribute(exists([DISC],and(actDiscovering(DISC),agent(DISC,AGENT),patient(DISC,OBJ))),tSumoPossibility)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':445725).
lisp_trans(genls(actImmigrating,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':446349).
lisp_trans(documentation(actImmigrating,vEnglishLanguage,s("Any","#$Translocation","by","a","Human","from","one","#$Nation","to","another","#$Nation","where","the","person","is","not","a","citizen","for","the","purpose","of","taking","up","residence",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':446386).
lisp_trans(=>(and(actImmigrating(I),agent(I,A)),exists([N1,N2],and(actNation(N1),actNation(N2),origin(I,N1),destination(I,N2),not(equal(N1,N2)),member(A,uCitizenryFn(N1)),not(member(A,uCitizenryFn(N2))),hasPurpose(I,inhabits(A,N2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':446578).
lisp_trans(=>(and(actImmigrating(I),agent(I,A)),tSumoHuman(A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':446949).
lisp_trans(genls(actBoarding,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447033).
lisp_trans(documentation(actBoarding,vEnglishLanguage,s("Getting","on","a","#$Vehicle",",","e",".","g",".","getting","into","an","#$Automobile",",","boarding","an","#$Aircraft",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447067).
lisp_trans(=>(and(actBoarding(B),patient(B,V)),tSumoVehicle(V)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447199).
lisp_trans(=>(and(actBoarding(B),agent(B,AGENT),patient(B,V)),and(holdsDuring(uBeginFn(uWhenFn(B)),not(onboard(A,V))),holdsDuring(iTimeOf_EndFn(uWhenFn(B)),onboard(A,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447284).
lisp_trans(documentation(onboard,vEnglishLanguage,s("(","onboard","?","OBJ","?","VEHICLE",")","means","that","the","#$SelfConnectedObject","?","OBJ","is","inside","the","#$Vehicle","?","VEHICLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447519).
lisp_trans(argIsa(onboard,1,tSumoSelfConnectedObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447662).
lisp_trans(argIsa(onboard,2,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447701).
lisp_trans(genlPreds(onboard,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447728).
lisp_trans(=>(onboard(O,V),contains(V,O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447759).
lisp_trans(=>(and(onboard(O,V),instrument(T,V),actTransportation(T)),patient(T,O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447802).
lisp_trans(genls(actDeboarding,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447910).
lisp_trans(relatedInternalConcept(actBoarding,actDeboarding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447946).
lisp_trans(documentation(actDeboarding,vEnglishLanguage,s("Getting","off","a","#$Vehicle",",","e",".","g",".","getting","out","of","an","Automobile",",","deplaning",",","getting","off","a","#$WaterVehicle",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':447991).
lisp_trans(=>(and(actDeboarding(B),patient(B,VEHICLE)),tSumoVehicle(VEHICLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448143).
lisp_trans(=>(and(actDeboarding(B),agent(B,A),patient(B,V)),and(holdsDuring(uBeginFn(uWhenFn(B)),onboard(A,V)),holdsDuring(iTimeOf_EndFn(uWhenFn(B)),not(onboard(A,V))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448242).
lisp_trans(genls(actRotating,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448484).
lisp_trans(documentation(actRotating,vEnglishLanguage,'Motion that begins and ends at the same point,  because the trajectory of the #$Motion is circular.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448511).
lisp_trans(=>(and(actRotating(R),patient(R,A)),exists([L],and(holdsDuring(uBeginFn(uWhenFn(R)),located(A,L)),holdsDuring(iTimeOf_EndFn(uWhenFn(R)),located(A,L))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448657).
lisp_trans(genls(tSumoTremor,actRotating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448880).
lisp_trans(documentation(tSumoTremor,vEnglishLanguage,'Motion that involves rapidly #$Rotating between  two positions.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':448907).
lisp_trans(rtBinaryPredicate(axis),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449015).
lisp_trans(documentation(axis,vEnglishLanguage,s("(","axis","?","A","?","OBJ",")","means","that","a","#$part","?","A","of","an","#$Object","?","OBJ","is","the","axis","of","rotation","in","a","#$Rotating",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449047).
lisp_trans(argIsa(axis,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449185).
lisp_trans(argIsa(axis,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449208).
lisp_trans(=>(axis(AXIS,OBJ),exists([R],and(actRotating(R),part(AXIS,OBJ),experiencer(R,OBJ),not(exists([R2],and(actRotating(R2),subProcess(R2,R),experiencer(R2,AXIS))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449232).
lisp_trans(genls(actCentrifugalMotion,actRotating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449520).
lisp_trans(disjointWith(actCentrifugalMotion,actCentripetalMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449558).
lisp_trans(documentation(actCentrifugalMotion,vEnglishLanguage,s("Any","instance","of","#$Rotating","where","there","is","#$Motion","away","from","the","center","of","the","#$Rotating",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449605).
lisp_trans(=>(actCentrifugalMotion(CM),exists([R,A,O1,O2],and(actRotating(R),axis(A,O1),origin(CM,A),experiencer(R,O1),experiencer(CM,O2),causes(R,CM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449749).
lisp_trans(genls(actCentripetalMotion,actRotating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':449975).
lisp_trans(documentation(actCentripetalMotion,vEnglishLanguage,s("Any","instance","of","#$Rotating","where","there","is","#$Motion","towards","the","center","of","the","#$Rotating",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450013).
lisp_trans(=>(actCentripetalMotion(CM),exists([R,A,O1,O2],and(actRotating(R),axis(A,O1),destination(CM,A),experiencer(R,O1),experiencer(CM,O2),causes(R,CM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450155).
lisp_trans(genls(actReversing,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450386).
lisp_trans(documentation(actReversing,vEnglishLanguage,s("Moving","something","in","such","a","way","that","its","#$top","becomes","its","#$bottom","and","vice","versa",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450414).
lisp_trans(=>(and(actReversing(REVERSE),patient(REVERSE,OBJ),holdsDuring(uBeginFn(uWhenFn(REVERSE)),and(top(TOP,OBJ),bottom(BOTTOM,OBJ)))),holdsDuring(iTimeOf_EndFn(uWhenFn(REVERSE)),and(top(BOTTOM,OBJ),bottom(TOP,OBJ)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450543).
lisp_trans(genls(actDripping,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450803).
lisp_trans(documentation(actDripping,vEnglishLanguage,s("Any","#$LiquidMotion","where","the","#$Liquid","is","moved","drop","by","drop",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450836).
lisp_trans(genls(actStirring,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450942).
lisp_trans(genls(actStirring,actCombining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':450975).
lisp_trans(documentation(actStirring,vEnglishLanguage,s("Any","instance","of","#$LiquidMotion","which","is","also","an","instance","of","#$Combining","two","or","more","#$Liquids",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451005).
lisp_trans(genls(actPouring,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451145).
lisp_trans(genls(actPouring,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451177).
lisp_trans(documentation(actPouring,vEnglishLanguage,s("Any","instance","of","#$Transfer","from","one","#$Container","to","another",",","where","the","thing","transferred","is","a","#$Liquid",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451205).
lisp_trans(=>(actPouring(POUR),exists([LIQUID,CONTAINER1,CONTAINER2],and(origin(POUR,CONTAINER1),destination(POUR,CONTAINER2),tContainer(CONTAINER1),tContainer(CONTAINER2),not(equal(CONTAINER1,CONTAINER2)),patient(POUR,LIQUID),sumoAttribute(LIQUID,tSumoLiquid),tSumoSubstance(LIQUID)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451352).
lisp_trans(genls(tSumoWaterWave,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451759).
lisp_trans(documentation(tSumoWaterWave,vEnglishLanguage,s("A","#$WaterWave","is","a","raised","ridge","of","water","moving","along","the","surface","of","a","body","of","water",".","The","#$WaterWave","moves","in","a","direction","approximately","transverse","to","the","crest","line","of","the","wave",".","The","#$patient","of","the","#$WaterWave","is","successive","regions","of","water",",","which","do","not","travel","in","the","direction","of","the","wave","or","with","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':451793).
lisp_trans(=>(tSumoWaterWave(WAVE),exists([AREA],and(tSumoWaterArea(AREA),eventLocated(WAVE,AREA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452149).
lisp_trans(rtBinaryPredicate(waterDepth),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452289).
lisp_trans(argIsa(waterDepth,1,tSumoWaterArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452327).
lisp_trans(argIsa(waterDepth,2,vtLengthMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452359).
lisp_trans(genlPreds(waterDepth,length),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452395).
lisp_trans(documentation(waterDepth,vEnglishLanguage,s("(","#$waterDepth","?","AREA","?","LENGTH",")","means","that","the","depth","of","water","at","the","#$Region","?","AREA","is","?","LENGTH",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452427).
lisp_trans(=>(waterDepth(AREA,DEPTH),exists([BOTTOM,TOP],and(depth(TOP,BOTTOM,DEPTH),top(TOP,AREA),bottom(BOTTOM,AREA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452567).
lisp_trans(genls(eventFlooding,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452732).
lisp_trans(documentation(eventFlooding,vEnglishLanguage,s("Flooding","is","the","subclass","of","#$LiquidMotion","processes","in","which","the","water","level","of","a","#$Waterway","rises","or","water","spreads","over","a","flood","plain","along","a","#$Waterway",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452765).
lisp_trans(=>(and(eventFlooding(F),eventLocated(F,P)),exists([L1,L2],and(holdsDuring(uBeginFn(uWhenFn(F)),waterDepth(P,L1)),holdsDuring(iTimeOf_EndFn(uWhenFn(F)),waterDepth(P,L2)),greaterThan(L2,L1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':452966).
lisp_trans(genls(eventSpraying,actLiquidMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':453249).
lisp_trans(genls(eventSpraying,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':453282).
lisp_trans(documentation(eventSpraying,vEnglishLanguage,s("Any","instance","of","#$Transfer","of","a","#$Liquid","which","is","accomplished","by","converting","the","#$Liquid","into","a","mist",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':453311).
lisp_trans(genls(actPulling,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':454049).
lisp_trans(documentation(actPulling,vEnglishLanguage,'Pulling describe the exertion of force so as to cause or tend to cause motion towards the agent.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':454075).
lisp_trans(genls(tObjectSubmarine,tSumoWaterVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':455064).
lisp_trans(documentation(tObjectSubmarine,vEnglishLanguage,s("A","#$WaterVehicle","which","is","capable","of","travelling","under","the","water","level","by","filling","tanks","with","water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':455098).
lisp_trans(genls(actAirTransportation,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':456496).
lisp_trans(documentation(actAirTransportation,vEnglishLanguage,s("Any","instance","of","#$Transportation","where","the","#$instrument","is","an","#$Aircraft","and","which","is","through","an","#$AtmosphericRegion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':456540).
lisp_trans(=>(actAirTransportation(TRANSPORT),exists([CRAFT,REGION],and(tSumoAircraft(CRAFT),tSumoAtmosphericRegion(REGION),instrument(TRANSPORT,CRAFT),eventLocated(TRANSPORT,REGION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':456712).
lisp_trans(genls(actSpaceTransportation,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':456951).
lisp_trans(documentation(actSpaceTransportation,vEnglishLanguage,s("Any","instance","of","#$Transportation","where","the","#$instrument","is","a","#$Spacecraft","and","which","is","through","a","#$SpaceRegion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':456997).
lisp_trans(=>(actSpaceTransportation(TRANSPORT),exists([CRAFT,REGION],and(tObjectSpacecraft(CRAFT),tSpaceRegion(REGION),instrument(TRANSPORT,CRAFT),eventLocated(TRANSPORT,REGION)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457165).
lisp_trans(genls(tObjectSpacecraft,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457402).
lisp_trans(documentation(tObjectSpacecraft,vEnglishLanguage,s("Any","#$Vehicle","which","is","capable","of","#$SpaceTransportation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457432).
lisp_trans(=>(tObjectSpacecraft(CRAFT),capability(actSpaceTransportation,instrument,CRAFT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457536).
lisp_trans(genls(tSumoRocket,tObjectSpacecraft),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457628).
lisp_trans(documentation(tSumoRocket,vEnglishLanguage,s("A","#$Spacecraft","which","has","the","shape","of","a","cylinder","with","a","cone","on","top","and","which","is","powered","by","a","jet","engine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457657).
lisp_trans(genls(tObjectMissile,tSumoProjectile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457806).
lisp_trans(genls(tObjectMissile,tObjectSelfPoweredDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457836).
lisp_trans(documentation(tObjectMissile,vEnglishLanguage,s("A","#$Projectile","which","is","propelled","by","a","rocket","and","contains","a","#$Bomb",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457873).
lisp_trans(=>(tObjectMissile(M),exists([B],and(tObjectBomb(B),part(B,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':457987).
lisp_trans(genls(tObjectBallisticMissile,tObjectMissile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458087).
lisp_trans(documentation(tObjectBallisticMissile,vEnglishLanguage,s("A","#$Missile","which","is","guided","for","the","first","stage","of","its","flight","but","then","falls","to","its","target","for","the","second","stage",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458123).
lisp_trans(genls(tWaterTransportation,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458295).
lisp_trans(documentation(tWaterTransportation,vEnglishLanguage,s("Any","instance","of","#$Transportation","where","the","#$instrument","is","a","#$WaterVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458341).
lisp_trans(=>(tWaterTransportation(TRANSPORT),exists([CRAFT,AREA],and(tSumoWaterVehicle(CRAFT),tSumoWaterArea(AREA),instrument(TRANSPORT,CRAFT),eventLocated(TRANSPORT,AREA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458474).
lisp_trans(=>(tSumoWaterVehicle(CRAFT),capability(tWaterTransportation,instrument,CRAFT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458705).
lisp_trans(genls(actRowing,tWaterTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458799).
lisp_trans(documentation(actRowing,vEnglishLanguage,s("Any","instance","of","#$WaterTransportation","where","the","instrument","is","an","#$Oar","that","is","manually","powered",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458837).
lisp_trans(=>(actRowing(R),exists([O],and(tObjectOar(O),instrument(R,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':458977).
lisp_trans(genls(actLandTransportation,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459083).
lisp_trans(documentation(actLandTransportation,vEnglishLanguage,s("Any","instance","of","#$Transportation","where","the","#$instrument","is","a","#$LandVehicle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459128).
lisp_trans(=>(actLandTransportation(LAND),exists([CRAFT,AREA],and(tSumoLandVehicle(CRAFT),tSumoLandArea(AREA),instrument(LAND,CRAFT),located(CRAFT,AREA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459259).
lisp_trans(=>(tSumoLandVehicle(VEHICLE),capability(actLandTransportation,instrument,VEHICLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459468).
lisp_trans(=>(and(actLandTransportation(T),path(T,P)),tSumoLandTransitway(P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459562).
lisp_trans(genls(tSumoTransportViaRoadVehicle,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459661).
lisp_trans(genls(tSumoTransportViaRoadVehicle,actLandTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459711).
lisp_trans(documentation(tSumoTransportViaRoadVehicle,vEnglishLanguage,'TransportViaRoadVehicle is the class of #$Transportation events in which the #$instrument is an instance of #$RoadVehicle.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459765).
lisp_trans(genls(tSumoFlyingAircraft,actDriving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459953).
lisp_trans(documentation(tSumoFlyingAircraft,vEnglishLanguage,s("Controlling","the","direction",",","speed",",","and","altitude","of","an","#$Aircraft")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':459987).
lisp_trans(termFormat(vEnglishLanguage,tSumoFlyingAircraft,"flying"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460101).
lisp_trans(=>(tSumoFlyingAircraft(FLY),exists([CRAFT],and(tSumoAircraft(CRAFT),patient(FLY,CRAFT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460155).
lisp_trans(=>(tSumoFlyingAircraft(FLY),exists([FLIGHT],and(actAirTransportation(FLIGHT),subProcess(FLY,FLIGHT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460285).
lisp_trans(genls(tSumoAircraft,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460440).
lisp_trans(documentation(tSumoAircraft,vEnglishLanguage,s("Any","Vehicle","which","is","capable","of","AirTransportation",".","Note","that","this","class","covers","both","fixed","-","wing","aircraft","and","helicopters",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460468).
lisp_trans(=>(tSumoAircraft(CRAFT),capability(actAirTransportation,instrument,CRAFT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':460635).
lisp_trans(genls(tObjectHelicopter,tSumoAircraft),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':461488).
lisp_trans(documentation(tObjectHelicopter,vEnglishLanguage,s("Any","#$Aircraft","with","rapidly","rotating","wings",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':461519).
lisp_trans(genls(tSumoMilitaryArtifact,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':461609).
lisp_trans(documentation(tSumoMilitaryArtifact,vEnglishLanguage,s("Any","#$Artifact","which","is","made","for","a","#$MilitaryOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':461646).
lisp_trans(=>(tSumoMilitaryArtifact(A),hasPurpose(A,exists([O],and(tGroupedMilitaryOrganization(O),uses(A,O))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':461758).
lisp_trans(genls(tObjectExplosiveDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463185).
lisp_trans(documentation(tObjectExplosiveDevice,vEnglishLanguage,s("A","#$Device","whose","purpose","is","to","explode",".","Note","that","#$ExplosiveDevice","is","not","a","subclass","of","#$Weapon",",","since","explosives","can","be","used","in","demolition","work","and","in","fireworks","displays",",","for","example",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463219).
lisp_trans(=>(tObjectExplosiveDevice(ED),hasPurpose(ED,exists([E,D],and(eventExplosion(E),instrument(E,ED),causes(E,D),actDamaging(D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463459).
lisp_trans(genls(tSumoExplosiveMine,tObjectExplosiveDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463665).
lisp_trans(genls(tSumoExplosiveMine,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463706).
lisp_trans(documentation(tSumoExplosiveMine,vEnglishLanguage,s("An","#$ExplosiveDevice","which","is","designed","to","explode","when","there","is","movement","over","it",",","e",".","g",".","by","a","person","on","foot",",","by","a","#$RoadVehicle",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463738).
lisp_trans(genls(tSumoExplosiveSubstance,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463922).
lisp_trans(documentation(tSumoExplosiveSubstance,vEnglishLanguage,s("Any","#$Substance","which","is","capable","of","exploding",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':463962).
lisp_trans(=>(tSumoExplosiveSubstance(S),capability(eventExplosion,instrument,S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':464062).
lisp_trans(=>(tObjectExplosiveDevice(D),exists([S],and(tSumoExplosiveSubstance(S),part(S,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':464142).
lisp_trans(genls(tPlaceLikeDriveway,tPlaceLikeRoadway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465091).
lisp_trans(documentation(tPlaceLikeDriveway,vEnglishLanguage,s("A","small",",","private","#$Roadway","that","is","used","for","parking","#$Automobiles","or","for","connecting","a","#$Garage","to","a","public","#$Roadway",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465119).
lisp_trans(rtUnaryFunction(uOperatingFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465282).
lisp_trans(documentation(uOperatingFn,vEnglishLanguage,s("(","#$OperatingFn","?","DEVICE",")","denotes","the","class","of","events","in","which","a","#$Device","of","type","?","device","is","operated",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465319).
lisp_trans(argIsa(uOperatingFn,1,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465468).
lisp_trans(resultGenl(uOperatingFn,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':465498).
lisp_trans(genls(actInstalling,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':466658).
lisp_trans(documentation(actInstalling,vEnglishLanguage,'Putting a #$Device in a location and configuring  the #$Device so that it can be used as intended after the installation.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':466688).
lisp_trans(=>(and(actInstalling(INSTALL),patient(INSTALL,DEVICE)),tSumoDevice(DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':466858).
lisp_trans(=>(and(actInstalling(INSTALL),patient(INSTALL,DEVICE),hasPurpose(DEVICE,PURPOSE)),holdsDuring(iTimeOf_EndFn(uWhenFn(INSTALL)),truth(PURPOSE,vTrue))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':466972).
lisp_trans(genls(tSumoRock,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467158).
lisp_trans(documentation(tSumoRock,vEnglishLanguage,'Rock is any naturally formed aggregate of one or more  minerals, consolidated or not, with some degree of mineralogic and chemical  constancy, in popular use the term is usually restricted to those aggregates  that are hard, compact, and coherent.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467184).
lisp_trans(=>(tSumoRock(Rock),sumoAttribute(Rock,tSumoSolid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467475).
lisp_trans(=>(tSumoRock(Rock),exists([Mineral],and(tMineral(Mineral),part(Mineral,Rock)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467531).
lisp_trans(genls(tSumoSoil,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467658).
lisp_trans(documentation(tSumoSoil,vEnglishLanguage,'Soil is a substance composed of fine rock material  disintegrated by geological processes, mixed with humus, the organic remains of decomposed vegetation.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467682).
lisp_trans(=>(tSumoSoil(Soil),exists([Humus,Mineral],and(tSumoHumus(Humus),tMineral(Mineral),part(Humus,Soil),part(Mineral,Soil)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':467879).
lisp_trans(genls(tSumoClay,tSumoSoil),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468066).
lisp_trans(documentation(tSumoClay,vEnglishLanguage,s("Fine","-","grained","soil","consisting","of","mineral","particles",",","not","necessarily","clay","minerals",",","that","are","less","than","0.002","mm","in","their","maximum","dimension",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468087).
lisp_trans(=>(and(part(Particle,Soil),tSumoClay(Soil),diameter(Particle,uMeasureFn(Size,tSumoCentimeter))),greaterThan(0.0002,Size)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468267).
lisp_trans(genls(tSumoHumus,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468417).
lisp_trans(documentation(tSumoHumus,vEnglishLanguage,'Humus is decaying organic matter found in #$Soil  and derived from dead animal and plant material.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468442).
lisp_trans(=>(tSumoHumus(Humus),exists([Soil],and(tSumoSoil(Soil),part(Humus,Soil)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468584).
lisp_trans(genls(actBurying,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468702).
lisp_trans(genls(actBurying,actDigging),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468729).
lisp_trans(documentation(actBurying,vEnglishLanguage,s("Putting","something","in","the","ground","and","then","covering","it","with","#$Soil",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468756).
lisp_trans(=>(actBurying(B),exists([C,S],and(actCovering(C),instrument(C,S),tSumoSoil(S),subProcess(C,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':468865).
lisp_trans(genls(actDigging,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469028).
lisp_trans(genls(actDigging,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469066).
lisp_trans(documentation(actDigging,vEnglishLanguage,s("Any","#$Process","of","removing","or","turning","over","the","#$Soil",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469099).
lisp_trans(=>(actDigging(D),exists([S],and(patient(D,S),tSumoSoil(S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469195).
lisp_trans(genls(actTilling,actDigging),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469298).
lisp_trans(documentation(actTilling,vEnglishLanguage,s("Any","#$Process","of","#$Digging",",","e",".","g",".","breaking","and","turning","over","#$Soil","that","facilitates","#$Agriculture",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469325).
lisp_trans(genls(actTilling,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469466).
lisp_trans(genls(actTilling,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469504).
lisp_trans(=>(and(actTilling(TILL),patient(TILL,SOIL)),tSumoSoil(SOIL)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469538).
lisp_trans(=>(actTilling(T),exists([A],and(actAgriculture(A),subProcess(T,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469637).
lisp_trans(genls(actEntombing,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469750).
lisp_trans(documentation(actEntombing,vEnglishLanguage,s("More","commonly","known","as","burying",",","this","is","the","class","of","processes","of","putting","a","#$HumanCorpse","into","a","Tomb",".","Note","that","this","class","is","not","a","subclass","of","#$Burying",",","since","some","#$Tombs","are","not","covered","with","#$Soil",",","e",".","g",".","those","in","a","mausoleum",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':469779).
lisp_trans(=>(and(actEntombing(E),patient(E,C)),tSumoHumanCorpse(C)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470058).
lisp_trans(=>(and(actEntombing(E),destination(E,T)),tPlaceLikeTomb(T)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470148).
lisp_trans(genls(tSumoMovingResidence,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470235).
lisp_trans(documentation(tSumoMovingResidence,vEnglishLanguage,s("The","process","of","changing","one","'s","residence",",","i",".","e",".","moving","one","'s","belongs","to","a","new","#$home",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470271).
lisp_trans(=>(and(tSumoMovingResidence(MOVE),agent(MOVE,AGENT)),exists([HOME1,HOME2],and(holdsDuring(uBeginFn(uWhenFn(MOVE)),home(AGENT,HOME1)),holdsDuring(iTimeOf_EndFn(uWhenFn(MOVE)),home(AGENT,HOME2)),not(equal(HOME1,HOME2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470407).
lisp_trans(genls(actHarvesting,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470701).
lisp_trans(documentation(actHarvesting,vEnglishLanguage,s("Gathering","the","plant","results","of","#$Agriculture",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470732).
lisp_trans(=>(actHarvesting(H),exists([A],and(actAgriculture(A),subProcess(H,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470824).
lisp_trans(=>(and(actHarvesting(H),result(H,C)),or(tSumoPlantAnatomicalStructure(C),tSumoPlantSubstance(C))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':470941).
lisp_trans(genls(actDrilling,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471086).
lisp_trans(genls(actDrilling,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471125).
lisp_trans(documentation(actDrilling,vEnglishLanguage,s("Any","#$Process","of","producing","a","#$hole","in","a","#$SelfConnectedObject","which","involves","rotating","a","long",",","thin","bit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471159).
lisp_trans(=>(and(actDrilling(DRILL),patient(DRILL,OBJ)),exists([HOLE],and(holdsDuring(uBeginFn(uWhenFn(DRILL)),not(hole(HOLE,OBJ))),holdsDuring(iTimeOf_EndFn(uWhenFn(DRILL)),hole(HOLE,OBJ))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471309).
lisp_trans(genls(tObjectDrill,tObjectCuttingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471555).
lisp_trans(documentation(tObjectDrill,vEnglishLanguage,s("A","#$Device","that","has","the","purpose","of","creating","a","#$Hole",".","This","covers","manual","drills","as","well","as","electric","or","pneumatic","drills",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471586).
lisp_trans(=>(tObjectDrill(D),hasPurpose(D,exists([E,H],and(actCutting(E),tSumoHole(H),result(E,H),instrument(E,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471750).
lisp_trans(genls(tObjectSaw,tObjectCuttingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471937).
lisp_trans(documentation(tObjectSaw,vEnglishLanguage,s("A","#$CuttingDevice","that","uses","linear","#$Motion","of","a","#$Blade",",","#$Chain","or","#$Wire","to","cut",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':471966).
lisp_trans(=>(and(tObjectSaw(SAW),actCutting(CUT),instrument(CUT,SAW),tSumoObject(OBJ),patient(CUT,OBJ)),exists([MOTION,DIR1,DIR2,TIME,T1,T2,PART],and(actMotion(MOTION),subProcess(MOTION,CUT),tObjectCuttingDevice(PART),part(PART,SAW),meetsSpatially(PART,OBJ),patient(MOTION,PART),timeOfTimeInterval(T2),timeOfTimeInterval(T2),equal(uWhenFn(MOTION),TIME),temporalPart(TIME,T1),temporalPart(TIME,T2),vtDirectionalAttribute(DIR1),vtDirectionalAttribute(DIR2),=>(holdsDuring(T1,direction(MOTION,DIR1)),holdsDuring(T2,and(direction(MOTION,DIR2),or(equal(DIR1,DIR2),oppositeDirection(DIR1,DIR2)),not(and(equal(DIR1,DIR2),oppositeDirection(DIR1,DIR2))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':472088).
lisp_trans(genls(tSumoPaperShredder,tObjectCuttingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':473111).
lisp_trans(documentation(tSumoPaperShredder,vEnglishLanguage,s("A","#$CuttingDevice","used","to","cut","#$Paper","into","small","pieces","so","that","the","contained","information","can","not","be","decoded","again",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':473150).
lisp_trans(=>(tSumoPaperShredder(X),hasPurpose(X,exists([CUT,PAPER],and(actCutting(CUT),instrument(CUT,X),tObjectPaper(PAPER),patient(CUT,PAPER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':473315).
lisp_trans(=>(and(tSumoPaperShredder(X),actCutting(CUT),instrument(CUT,X)),hasPurpose(CUT,=>(and(tSumoVisualContentBearingObject(CBO),containsInformation(CBO,INFO),tObjectPaper(PAPER),located(CBO,PAPER)),decreasesLikelihood(patient(CUT,PAPER),exists([READ],and(actInterpreting(READ),patient(READ,INFO),earlier(uWhenFn(CUT),uWhenFn(READ)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':473539).
lisp_trans(genls(actMemorizing,actLearning),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474086).
lisp_trans(documentation(actMemorizing,vEnglishLanguage,s("The","process","of","committing","a","#$Text","to","memory",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474117).
lisp_trans(=>(and(actMemorizing(M),patient(M,T)),tSumoText(T)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474209).
lisp_trans(genls(actImagining,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474293).
lisp_trans(documentation(actImagining,vEnglishLanguage,s("Forming","a","mental","picture","of","something","which","is","not","present",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474335).
lisp_trans(genls(actDreaming,actImagining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474441).
lisp_trans(disjointWith(actDreaming,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474471).
lisp_trans(documentation(actDreaming,vEnglishLanguage,s("A","#$Process","of","producing","metal","images","which","occurs","while","one","is","#$Asleep",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474510).
lisp_trans(=>(and(actDreaming(DREAM),experiencer(DREAM,AGENT)),holdsDuring(uWhenFn(DREAM),sumoAttribute(AGENT,mobAsleep))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474629).
lisp_trans(genls(actFrightening,actPsychologicalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474770).
lisp_trans(documentation(actFrightening,vEnglishLanguage,s("Any","#$PsychologicalProcess","where","the","#$patient","comes","to","feel","#$Anxiety",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474814).
lisp_trans(=>(and(actFrightening(FRIGHTEN),experiencer(FRIGHTEN,AGENT)),and(holdsDuring(uBeginFn(uWhenFn(FRIGHTEN)),not(sumoAttribute(AGENT,tSumoAnxiety))),holdsDuring(iTimeOf_EndFn(uWhenFn(FRIGHTEN)),sumoAttribute(AGENT,tSumoAnxiety)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':474934).
lisp_trans(genls(actExecution,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475190).
lisp_trans(documentation(actExecution,vEnglishLanguage,'Killing of a #$Human by a #$Government for  the commission of a #$CriminalAction.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475219).
lisp_trans(=>(actExecution(E),exists([G],and(tSumoGovernment(G),agent(E,G)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475348).
lisp_trans(=>(actExecution(E),exists([P],and(patient(E,P),tSumoHuman(P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475457).
lisp_trans(genls(actSuicide,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475563).
lisp_trans(documentation(actSuicide,vEnglishLanguage,s("Any","instance","of","#$Killing","where","the","#$agent","and","the","#$experiencer","are","identical",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475590).
lisp_trans(=>(actSuicide(S),exists([A],and(agent(S,A),experiencer(S,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475715).
lisp_trans(genls(actTrespassing,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475817).
lisp_trans(genls(actTrespassing,eventTranslocation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475855).
lisp_trans(documentation(actTrespassing,vEnglishLanguage,s("Entering","property","that","does","not","belong","to","one","and","without","the","permission","of","the","owner","of","the","property",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':475892).
lisp_trans(=>(and(actTrespassing(T),agent(T,H),patient(T,P)),and(not(possesses(H,P)),modalAttribute(located(H,P),tSumoIllegal))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':476247).
lisp_trans(genls(actProtecting,actMaintaining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':476431).
lisp_trans(documentation(actProtecting,vEnglishLanguage,s("An","#$IntentionalProcess","which","purpose","is","to","decrease","likelihood","of","#$Damaging","or","#$CriminalAction","done","to","the","#$patient","of","the","#$Process",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':476465).
lisp_trans(=>(actProtecting(X),hasPurpose(X,exists([OBJ],and(tSumoObject(OBJ),patient(X,tSumoObject),genls(HARM,uKappaFn(H,and(or(actCriminalAction(H),actDamaging(H)),=>(holdsDuring(T,patient(H,OBJ)),not(holdsDuring(T,patient(X,OBJ))))))),or(prevents(X,HARM),hinders(X,HARM)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':476648).
lisp_trans(genls(actMurder,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477225).
lisp_trans(genls(actMurder,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477251).
lisp_trans(documentation(actMurder,vEnglishLanguage,s("Impermissible","#$Killing","of","a","#$Human",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477284).
lisp_trans(=>(actMurder(MURDER),exists([PERSON],and(patient(MURDER,PERSON),tSumoHuman(PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477364).
lisp_trans(genls(actSuffocating,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477502).
lisp_trans(documentation(actSuffocating,vEnglishLanguage,'Killing someone by asphyxiation, i.e. by  depriving them of #$Oxygen.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477533).
lisp_trans(=>(actSuffocating(S),holdsDuring(iTimeOf_EndFn(uWhenFn(H)),and(experiencer(S,P),not(exists([B],and(actBreathing(B),experiencer(B,P))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477652).
lisp_trans(genls(actHanging,actSuffocating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477855).
lisp_trans(documentation(actHanging,vEnglishLanguage,s("Suffocating","someone","by","suspending","him","/","her","from","a","rope","wound","around","the","neck","until","asphyxiation","occurs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':477886).
lisp_trans(=>(actHanging(H),exists([S,N,P],and(tSumoHuman(P),ftString(S),tSumoNeck(N),experiencer(H,P),properPart(N,P),instrument(H,S),holdsDuring(uWhenFn(H),meetsSpatially(S,N))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478032).
lisp_trans(genls(mobStarving,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478311).
lisp_trans(documentation(mobStarving,vEnglishLanguage,'Killing someone by depriving them of food.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478339).
lisp_trans(genls(actMusicalConducting,actGuiding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478428).
lisp_trans(documentation(actMusicalConducting,vEnglishLanguage,s("An","#$instance","of","#$MusicalConducting","is","a","#$Guiding","in","which","the","patient","(","entity","guided",")","is","a","#$Musician","or","a","#$MusicalGroup",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478479).
lisp_trans(=>(actMusicalConducting(CONDUCT),exists([MUSIC],and(actMusicalPerformance(MUSIC),subProcess(CONDUCT,MUSIC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478671).
lisp_trans(=>(and(actMusicalConducting(CONDUCT),patient(CONDUCT,PATIENT),mobMusician(M)),or(tSumoMusicalGroup(PATIENT),holdsDuring(uWhenFn(CONDUCT),sumoAttribute(PATIENT,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':478848).
lisp_trans(genls(actOrchestralConducting,actMusicalConducting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479090).
lisp_trans(documentation(actOrchestralConducting,vEnglishLanguage,'OrchestralConducting is a type of #$MusicalConducting where the patient is an #$Orchestra.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479140).
lisp_trans(=>(and(actOrchestralConducting(CONDUCT),patient(CONDUCT,GRP)),tGroupedOrchestra(CONDUCT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479289).
lisp_trans(genls(tSumoMusicalGroup,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479408).
lisp_trans(documentation(tSumoMusicalGroup,vEnglishLanguage,s("A","#$GroupOfPeople","that","create","#$MakingMusic","together",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479446).
lisp_trans(genls(tGroupedOrchestra,tSumoMusicalGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479873).
lisp_trans(documentation(tGroupedOrchestra,vEnglishLanguage,s("A","#$GroupOfPeople","that","create","#$MakingInstrumentalMusic","together",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':479907).
lisp_trans(=>(tGroupedOrchestra(ORCHESTRA),hasPurpose(ORCHESTRA,exists([MUSIC],and(tSumoMakingInstrumentalMusic(MUSIC),agent(MUSIC,ORCHESTRA))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480019).
lisp_trans(genls(actDramaticDirecting,actGuiding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480204).
lisp_trans(documentation(actDramaticDirecting,vEnglishLanguage,s("The","process","of","directing","a","#$DramaticActing","in","a","#$MotionPicture","or","the","#$Performance","of","a","#$DramaticPlay",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480241).
lisp_trans(=>(and(actDramaticDirecting(DIRECT),patient(DIRECT,ACT)),actDramaticActing(ACT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480402).
lisp_trans(genls(actSharing,tSumoChangeOfPossession),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480516).
lisp_trans(documentation(actSharing,vEnglishLanguage,s("The","subclass","of","#$ChangeOfPossession","where","a","#$properPart","of","the","#$patient","is","given","by","the","#$agent","or","the","#$destination",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480554).
lisp_trans(=>(and(actSharing(SHARE),agent(SHARE,AGENT1),destination(SHARE,AGENT2),patient(SHARE,OBJ)),exists([GIVE,PART],and(actGiving(GIVE),subProcess(GIVE,SHARE),patient(GIVE,PART),properPart(PART,OBJ),agent(GIVE,AGENT1),destination(GIVE,AGENT2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':480719).
lisp_trans(genls(actStealing,actUnilateralGetting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481096).
lisp_trans(genls(actStealing,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481134).
lisp_trans(documentation(actStealing,vEnglishLanguage,s("Any","#$UnilateralGetting","which","is","not","permitted","by","the","#$origin","of","the","#$UnilateralGetting",".","These","cases","of","#$UnilateralGetting","are","distinguished","from","ones","where","the","#$destination","is","the","subject","of","charity","or","other","forms","of","benefaction",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481169).
lisp_trans(=>(and(actStealing(STEAL),destination(STEAL,AGENT),origin(STEAL,VICTIM),mobCognitiveAgent(VICTIM)),not(confersRight(destination(STEAL,AGENT),VICTIM,AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481452).
lisp_trans(genls(actRobbing,actStealing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481671).
lisp_trans(documentation(actRobbing,vEnglishLanguage,s("Any","instance","of","#$Stealing","which","involves","the","threat","of","the","use","of","force",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481699).
lisp_trans(=>(and(actRobbing(R),agent(R,P),patient(R,P2)),exists([T],and(iThreatening(T),subProcess(T,R),patient(T,exists([A],and(tSumoAttack(A),agent(A,P),patient(A,P2))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':481817).
lisp_trans(genls(actInheriting,actUnilateralGetting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482126).
lisp_trans(documentation(actInheriting,vEnglishLanguage,s("Any","#$UnilateralGetting","where","the","#$agent","receives","some","part","of","the","property","of","a","person","upon","the","death","of","the","person",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482166).
lisp_trans(=>(and(actInheriting(INHERIT),agent(INHERIT,HEIR),origin(INHERIT,PERSON),patient(INHERIT,PROPERTY)),exists([DEATH],and(tSumoDeath(DEATH),experiencer(DEATH,PERSON),earlier(uWhenFn(DEATH),uWhenFn(INHERIT)),holdsDuring(uImmediatePastFn(uWhenFn(DEATH)),possesses(PERSON,PROPERTY)),confersRight(possesses(HEIR,PROPERTY),PERSON,HEIR)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482333).
lisp_trans(genls(actAwarding,actUnilateralGiving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482791).
lisp_trans(documentation(actAwarding,vEnglishLanguage,'Giving to any #$Agent for doing some #$Process.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482828).
lisp_trans(termFormat(vEnglishLanguage,actAwarding,"awarding"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482921).
lisp_trans(=>(actAwarding(A),exists([RECIPIENT,GIVER,PROCESS,AWARD],and(tAgent(RECIPIENT),tAgent(GIVER),actProcess(PROCESS),tSumoObject(AWARD),agent(PROCESS,RECIPIENT),agent(A,GIVER),patient(A,AWARD),destination(A,RECIPIENT),causes(PROCESS,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':482970).
lisp_trans(rtBinaryPredicate(hasAward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483332).
lisp_trans(argIsa(hasAward,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483368).
lisp_trans(argIsa(hasAward,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483394).
lisp_trans(documentation(hasAward,vEnglishLanguage,s("(","hasAward","?","RECIPIENT","?","AWARD",")","means","the","#$Agent","?","RECIPIENT","recieved","the","#$Object","?","AWARD","as","an","award","for","some","action","they","did",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483421).
lisp_trans(termFormat(vEnglishLanguage,hasAward,s("has","award")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483590).
lisp_trans(=>(hasAward(RECIPIENT,AWARD),exists([A],and(actAwarding(A),destination(A,RECIPIENT),patient(A,AWARD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483640).
lisp_trans(genls(actBequeathing,actUnilateralGiving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483808).
lisp_trans(documentation(actBequeathing,vEnglishLanguage,s("Any","#$UnilateralGiving","where","the","agent","wills","some","part","of","his","/","her","property","to","someone","else","upon","his","/","her","death",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':483848).
lisp_trans(=>(and(actBequeathing(B),agent(B,P),destination(B,H),patient(I,PROP)),exists([D],and(tSumoDeath(D),experiencer(D,P),earlier(uWhenFn(D),uWhenFn(B)),holdsDuring(uImmediatePastFn(uWhenFn(D)),possesses(P,PROP)),confersNorm(P,possesses(H,PROP),cwPermission)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':484006).
lisp_trans(genls(tSumoSeizingProperty,actUnilateralGetting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':484395).
lisp_trans(documentation(tSumoSeizingProperty,vEnglishLanguage,s("Any","instance","of","#$UnilateralGetting","which","is","done","by","a","#$Government","and","which","is","not","permitted","by","the","origin","of","the","#$UnilateralGetting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':484440).
lisp_trans(=>(and(tSumoSeizingProperty(S),destination(S,A),origin(S,V),mobCognitiveAgent(V)),and(tSumoGovernment(A),not(confersNorm(V,destination(S,A),cwPermission)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':484629).
lisp_trans(contraryAttribute(timeFullTimePosition,timePartTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':484873).
lisp_trans(actPosition(timeFullTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485253).
lisp_trans(documentation(timeFullTimePosition,vEnglishLanguage,s("Any","#$Position","where","the","employee","is","either","salaried","or","paid","for","at","least","40","hour","of","work","per","week",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485290).
lisp_trans(actPosition(timePartTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485443).
lisp_trans(documentation(timePartTimePosition,vEnglishLanguage,s("Any","#$Position","where","the","employee","is","not","salaried","and","is","paid","for","less","than","40","hours","of","work","per","week",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485480).
lisp_trans(actCollegeStudentPosition(tSumoCollegeFreshman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485636).
lisp_trans(documentation(tSumoCollegeFreshman,vEnglishLanguage,s("The","#$Positions","of","a","student","at","a","#$PostSecondarySchool","who","has","completed","less","than","one","year","at","the","school",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485686).
lisp_trans(=>(and(sumoAttribute(P,tSumoCollegeFreshman),occupiesPosition(H,P,ORG)),exists([T],and(holdsDuring(T,student(H,ORG)),lessThan(T,uMeasureFn(1,actYearDuration))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':485846).
lisp_trans(actCollegeStudentPosition(tSumoCollegeJunior),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486052).
lisp_trans(documentation(tSumoCollegeJunior,vEnglishLanguage,s("The","#$Positions","of","a","student","at","a","#$PostSecondarySchool","who","has","completed","at","least","two","years","and","less","than","three","years","at","the","school",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486100).
lisp_trans(=>(and(sumoAttribute(P,tSumoCollegeJunior),occupiesPosition(H,P,ORG)),exists([T],and(holdsDuring(T,student(H,ORG)),greaterThanOrEqualTo(T,uMeasureFn(2,actYearDuration)),lessThan(T,uMeasureFn(3,actYearDuration))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486284).
lisp_trans(actCollegeStudentPosition(tSumoCollegeSenior),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486565).
lisp_trans(documentation(tSumoCollegeSenior,vEnglishLanguage,s("The","#$Positions","of","a","student","at","a","#$PostSecondarySchool","who","has","completed","at","least","three","years","and","less","than","four","years","at","the","school",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486613).
lisp_trans(=>(and(sumoAttribute(P,tSumoCollegeSenior),occupiesPosition(H,P,ORG)),exists([T],and(holdsDuring(T,student(H,ORG)),greaterThanOrEqualTo(T,uMeasureFn(3,actYearDuration)),lessThan(T,uMeasureFn(4,actYearDuration))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':486798).
lisp_trans(actCollegeStudentPosition(tSumoCollegeSophomore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487079).
lisp_trans(documentation(tSumoCollegeSophomore,vEnglishLanguage,s("The","#$Positions","of","a","student","at","a","#$PostSecondarySchool","who","has","completed","at","least","one","year","and","less","than","two","years","at","the","school",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487130).
lisp_trans(=>(and(sumoAttribute(P,tSumoCollegeSophomore),occupiesPosition(H,P,ORG)),exists([T],and(holdsDuring(T,student(H,ORG)),greaterThanOrEqualTo(T,uMeasureFn(1,actYearDuration)),lessThan(T,uMeasureFn(2,actYearDuration))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487314).
lisp_trans(genls(actCollegeStudentPosition,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487598).
lisp_trans(documentation(actCollegeStudentPosition,vEnglishLanguage,s("Any","#$Position","at","a","#$PostSecondarySchool","which","is","occupied","exclusively","by","students",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487641).
lisp_trans(tSumoEntertainmentProfession(tClazzComedian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487785).
lisp_trans(documentation(tClazzComedian,vEnglishLanguage,'Positions which involve performing stand-up comedy, which  is recorded and/or performed in front of live audiences.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487829).
lisp_trans(=>(sumoAttribute(P,tClazzComedian),exists([PERF,L],and(tSumoPerformance(PERF),agent(PREF,P),actLaughing(L),causes(PERF,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':487991).
lisp_trans(tSumoEntertainmentProfession(tClazzActor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488172).
lisp_trans(documentation(tClazzActor,vEnglishLanguage,s("A","#$SkilledOccupation","describing","a","theatrical","%","&","Performer",",","someone","with","expertise","on","#$DramaticActing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488213).
lisp_trans(=>(sumoAttribute(PERSON,tClazzActor),hasSkill(actDramaticActing,PERSON)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488390).
lisp_trans(=>(and(tSumoDramaticCast(GROUP),holdsDuring(T1,member(MEM,GROUP))),holdsDuring(T1,sumoAttribute(MEM,tClazzActor))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488464).
lisp_trans(=>(and(actDramaticPerformance(P),agent(P,A)),holdsDuring(uWhenFn(P),sumoAttribute(A,tClazzActor))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488633).
lisp_trans(tSumoEntertainmentProfession(mobArtist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488791).
lisp_trans(documentation(mobArtist,vEnglishLanguage,s("This","#$RelationalAttribute","describes","an","#$Agent","that","contributes","to","a","#$Performance",",","or","to","some","form","of","#$ContentDevelopment","that","#$results","in","an","#$ArtWork",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':488833).
lisp_trans(=>(and(agent(PROCESS,AGENT),result(PROCESS,WORK),tSumoArtWork(WORK)),holdsDuring(uWhenFn(PROCESS),sumoAttribute(AGENT,mobArtist))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':489032).
lisp_trans(tSumoEntertainmentProfession(tSumoPerformer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':489196).
lisp_trans(subAttribute(tSumoPerformer,mobArtist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':489241).
lisp_trans(documentation(tSumoPerformer,vEnglishLanguage,s("This","#$RelationalAttribute","describes","an","#$agent","of","a","#$Performance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':489273).
lisp_trans(=>(and(tSumoPerformance(P),agent(P,A)),holdsDuring(uWhenFn(P),sumoAttribute(A,tSumoPerformer))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':489386).
lisp_trans(actSkilledOccupation(tSumoTreasurer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':490277).
lisp_trans(documentation(tSumoTreasurer,vEnglishLanguage,s("Any","#$SkilledOccupation","which","involves","receiving","and","disbursing","money",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':490316).
lisp_trans(genls(actSalesPosition,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':491717).
lisp_trans(documentation(actSalesPosition,vEnglishLanguage,s("Any","#$Position","which","involves","#$Selling","or","trying","to","sell","items",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':491760).
lisp_trans(actSkilledOccupation(tSumoClericalSecretary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':491875).
lisp_trans(documentation(tSumoClericalSecretary,vEnglishLanguage,s("The","class","of","#$Positions","where","the","position","holder","is","responsible","for","clerical","duties",",","e",".","g",".","typing","documents",",","answering","phones",",","keeping","schedules",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':491922).
lisp_trans(genls(actServicePosition,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492129).
lisp_trans(documentation(actServicePosition,vEnglishLanguage,s("Any","#$Position","which","involves","working","as","a","waiter","or","servant",",","either","for","an","#$Organization","(","e",".","g",".","a","restaurant",")","or","for","a","person","or","family",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492174).
lisp_trans(tSumoProfession(mobDentist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492365).
lisp_trans(documentation(mobDentist,vEnglishLanguage,s("The","#$Profession","of","being","a","dentist",",","i",".","e",".","diagnosing","and","treating","problems","related","to","the","teeth",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492395).
lisp_trans(=>(sumoAttribute(P,mobDentist),exists([D,T],and(actDiagnosticProcess(D),agent(D,P),tPartTypeTooth(T),patient(D,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492536).
lisp_trans(tSumoProfession(mobPharmacist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492698).
lisp_trans(documentation(mobPharmacist,vEnglishLanguage,s("The","#$Profession","of","being","a","pharmacist",",","i",".","e",".","preparing","and","dispensing","#$BiologicallyActiveSubstances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492731).
lisp_trans(tSumoProfession(mobResearcher),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492880).
lisp_trans(documentation(mobResearcher,vEnglishLanguage,s("The","#$Profession","of","being","a","scientific","researcher",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':492913).
lisp_trans(=>(sumoAttribute(P,mobResearcher),exists([S],and(iScience(S),hasExpertise(P,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493011).
lisp_trans(tSumoProfession(mobTeacher),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493136).
lisp_trans(documentation(mobTeacher,vEnglishLanguage,s("The","#$Profession","of","being","a","teacher",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493166).
lisp_trans(=>(and(sumoAttribute(T,mobTeacher),occupiesPosition(P,T,O)),teacher(T,O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493246).
lisp_trans(=>(sumoAttribute(T,mobTeacher),hasSkill(actEducationalProcess,T)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493337).
lisp_trans(genls(tSumoEntertainmentProfession,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493403).
lisp_trans(documentation(tSumoEntertainmentProfession,vEnglishLanguage,s("Positions","which","involve","creating","content","or","performances","that","are","intended","to","entertain",".","This","class","covers","the","#$TheaterProfession",",","#$FilmMakingProfession",",","being","a","comedian",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493456).
lisp_trans(=>(and(tSumoEntertainmentProfession(EP),sumoAttribute(P,EP)),or(occupation(P,uOccupationFn(tSumoPerformance)),occupation(P,uOccupationFn(tSumoContentDevelopment)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493697).
lisp_trans(genls(actSportsPosition,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493885).
lisp_trans(documentation(actSportsPosition,vEnglishLanguage,s("A","#$Position","which","is","filled","by","someone","on","a","#$SportsTeam","and","which","represents","the","role","played","by","the","person","on","the","team",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':493929).
lisp_trans(=>(and(occupiesPosition(H,P,O),actSportsPosition(P)),tGroupedSportsTeam(O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494102).
lisp_trans(genls(actGovernmentPosition,tSumoProfession),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494211).
lisp_trans(documentation(actGovernmentPosition,vEnglishLanguage,s("Any","#$Profession","where","the","position","occupied","is","within","a","#$GovernmentOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494252).
lisp_trans(=>(and(actGovernmentPosition(O),occupiesPosition(P,O,ORG)),actGovernmentOrganization(ORG)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494389).
lisp_trans(tSumoProfession(tClazzJournalist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494515).
lisp_trans(documentation(tClazzJournalist,vEnglishLanguage,s("The","#$Profession","of","being","a","news","reporter",",","i",".","e",".","investigating","and","reporting",",","in","a","publication","or","broadcast","program",",","current","events",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494548).
lisp_trans(=>(sumoAttribute(P,tClazzJournalist),and(occupation(P,uOccupationFn(tSumoContentDevelopment)),occupation(P,uOccupationFn(actDisseminating)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494728).
lisp_trans(genls(actModellingPosition,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494873).
lisp_trans(documentation(actModellingPosition,vEnglishLanguage,s("Any","#$Position","which","involves","posing","for","an","artist","or","photographer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':494911).
lisp_trans(actGovernmentPosition(mobSoldier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':495047).
lisp_trans(documentation(mobSoldier,vEnglishLanguage,s("This","#$Attribute","describes","someone","serving","in","the","armed","forces","of","a","#$Nation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':495098).
lisp_trans(actGovernmentPosition(tSumoConfederateSoldier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':495650).
lisp_trans(subAttribute(tSumoConfederateSoldier,mobSoldier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':495711).
lisp_trans(documentation(tSumoConfederateSoldier,vEnglishLanguage,s("This","#$Attribute","describes","a","#$Soldier","who","served","on","the","Confederate","side","during","the","American","Civil","War",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':495766).
lisp_trans(actSkilledOccupation(tSumoSailor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496282).
lisp_trans(documentation(tSumoSailor,vEnglishLanguage,s("The","class","of","#$Positions","which","involve","working","on","a","ship",",","whether","a","merchant","ship","or","a","navy","ship",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496318).
lisp_trans(subAttribute(mobShipCaptain,tSumoSailor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496459).
lisp_trans(documentation(mobShipCaptain,vEnglishLanguage,s("The","class","of","#$Positions","which","involve","the","command","of","a","ship",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496493).
lisp_trans(subAttribute(tSumoShipOfficer,tSumoSailor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496603).
lisp_trans(documentation(tSumoShipOfficer,vEnglishLanguage,s("The","class","of","#$Sailors","which","have","a","position","of","responsibility","on","a","#$Ship",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496637).
lisp_trans(subAttribute(tSumoShipMate,tSumoSailor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496761).
lisp_trans(documentation(tSumoShipMate,vEnglishLanguage,s("The","class","of","#$Positions","that","involve","some","responsibility","on","a","ship","and","are","lower","in","rank","than","#$ShipCaptain",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':496792).
lisp_trans(actGovernmentPosition(tSumoMilitaryPrivate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497425).
lisp_trans(subAttribute(tSumoMilitaryPrivate,mobSoldier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497484).
lisp_trans(documentation(tSumoMilitaryPrivate,vEnglishLanguage,s("This","#$Attribute","describes","an","enlisted","#$Soldier","of","the","lowest","rank",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497536).
lisp_trans(subAttribute(mobMilitaryOfficer,mobSoldier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497669).
lisp_trans(actGovernmentPosition(mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497720).
lisp_trans(documentation(mobMilitaryOfficer,vEnglishLanguage,s("This","#$Attribute","describes","a","#$Soldier","who","has","command","authority",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497779).
lisp_trans(=>(sumoAttribute(OFFICER,mobMilitaryOfficer),exists([MANAGE,PATIENT],and(actManaging(MANAGE),agent(MANAGE,OFFICER),patient(MANAGE,PATIENT),or(tGroupedMilitaryOrganization(PATIENT),sumoAttribute(PATIENT,mobSoldier))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':497896).
lisp_trans(subAttribute(tSumoMilitaryGeneral,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498212).
lisp_trans(documentation(tSumoMilitaryGeneral,vEnglishLanguage,'MilitaryGeneral is a generic #$Position  that indicates holding (or having held) the rank of General in some  military force.  An indicator that someone uses the title, without  committing to his or her exact rank or military affiliation.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498342).
lisp_trans(actGovernmentPosition(tSumoAdmiral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498635).
lisp_trans(subAttribute(tSumoAdmiral,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498677).
lisp_trans(documentation(tSumoAdmiral,vEnglishLanguage,s("Admiral","is","the","rank",",","or","part","of","the","name","of","the","ranks",",","of","the","highest","naval","officers",",","ranks","above","a","vice","admiral","and","below","a","fleet","admiral",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498716).
lisp_trans(actGovernmentPosition(tSumoMajor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498899).
lisp_trans(subAttribute(tSumoMajor,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498939).
lisp_trans(documentation(tSumoMajor,vEnglishLanguage,s("In","the","US",",","Major","is","a","field","grade","military","officer","rank","just","above","the","rank","of","captain","and","just","below","the","rank","of","lieutenant","colonel",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':498976).
lisp_trans(subAttribute(tSumoMajorGeneral,tSumoMilitaryGeneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499164).
lisp_trans(actGovernmentPosition(tSumoMajorGeneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499220).
lisp_trans(documentation(tSumoMajorGeneral,vEnglishLanguage,s("A","#$MilitaryGeneral","that","ranks","above","a","#$BrigadierGeneral",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499263).
lisp_trans(subAttribute(tSumoBrigadierGeneral,tSumoMilitaryGeneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499384).
lisp_trans(actGovernmentPosition(tSumoBrigadierGeneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499444).
lisp_trans(documentation(tSumoBrigadierGeneral,vEnglishLanguage,s("A","#$MilitaryGeneral","that","ranks","below","a","#$MajorGeneral",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499491).
lisp_trans(subAttribute(tSumoLieutenant,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499612).
lisp_trans(actGovernmentPosition(tSumoLieutenant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499666).
lisp_trans(documentation(tSumoLieutenant,vEnglishLanguage,s("A","commissioned","#$MilitaryOfficer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499707).
lisp_trans(subAttribute(tSumoCaptainOfficer,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499800).
lisp_trans(actGovernmentPosition(tSumoCaptainOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499858).
lisp_trans(documentation(tSumoCaptainOfficer,vEnglishLanguage,s("A","commissioned","#$MilitaryOfficer","who","ranks","above","a","#$Lieutenant","but","below","a","#$MajorOfficer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':499903).
lisp_trans(subAttribute(tSumoColonel,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500059).
lisp_trans(actGovernmentPosition(tSumoColonel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500110).
lisp_trans(documentation(tSumoColonel,vEnglishLanguage,s("A","commissioned","#$MilitaryOfficer","who","ranks","above","a","lieutenant","colonel","and","below","a","brigadier","general",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500148).
lisp_trans(subAttribute(tSumoSergeant,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500293).
lisp_trans(actGovernmentPosition(tSumoSergeant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500345).
lisp_trans(documentation(tSumoSergeant,vEnglishLanguage,s("A","noncomissioned","#$MilitaryOfficer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500384).
lisp_trans(subAttribute(tSumoCorporal,mobMilitaryOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500477).
lisp_trans(actGovernmentPosition(tSumoCorporal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500529).
lisp_trans(documentation(tSumoCorporal,vEnglishLanguage,s("A","noncomissioned","#$MilitaryOfficer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500568).
lisp_trans(vtUnitOfDuration(actCenturyDuration),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500648).
lisp_trans(documentation(actCenturyDuration,vEnglishLanguage,s("The","#$TimeDuration","of","100","years",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500690).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,actCenturyDuration),uMeasureFn(uMultiplicationFn(NUMBER,100),actYearDuration))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500774).
lisp_trans(vtUnitOfDuration(actDecadeDuration),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500947).
lisp_trans(documentation(actDecadeDuration,vEnglishLanguage,s("The","#$TimeDuration","of","10","years",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':500988).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,actDecadeDuration),uMeasureFn(uMultiplicationFn(NUMBER,10),actYearDuration))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501070).
lisp_trans(vtUnitOfLength(tSumoYardLength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501241).
lisp_trans(documentation(tSumoYardLength,vEnglishLanguage,s("English","unit","of","length",",","equal","to","3","#$FeetLength",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501276).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,tSumoYardLength),uMeasureFn(uMultiplicationFn(3,NUMBER),tSumoFootLength))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501371).
lisp_trans(documentation(tSumoNanometer,vEnglishLanguage,s("Submultiple","of","Meter",".","Symbol",":","nm",".","It","is","a","unit","of","length","in","the","metric","system",",","equal","to","one","billionth","of","a","metre",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501525).
lisp_trans(vtUnitOfLength(tSumoNanometer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501683).
lisp_trans(=>(equal(NUMBER,uMultiplicationFn(1,NUMBER)),equal(uMeasureFn(NUMBER,tSumoNanometer),uMeasureFn(uMultiplicationFn(NUMBER,1.0e-9),vMeterFn))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501717).
lisp_trans(genls(timeNightTime,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501891).
lisp_trans(documentation(timeNightTime,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","#$Sunset","and","end","at","#$Sunrise",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':501925).
lisp_trans(=>(timeNightTime(NIGHT),exists([DAY1,DAY2],and(timeDayTime(DAY1),timeDayTime(DAY2),meetsTemporally(NIGHT,DAY1),meetsTemporally(DAY2,NIGHT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502044).
lisp_trans(=>(timeNightTime(NIGHT),exists([RISE,SET],and(tSunrise(RISE),tSunset(SET),starts(SET,NIGHT),finishes(RISE,NIGHT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502267).
lisp_trans(genls(timeDayTime,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502470).
lisp_trans(documentation(timeDayTime,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","#$Sunrise","and","end","at","#$Sunset",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502502).
lisp_trans(=>(timeDayTime(DAY),exists([NIGHT1,NIGHT2],and(timeNightTime(NIGHT1),timeNightTime(NIGHT2),meetsTemporally(DAY,NIGHT1),meetsTemporally(NIGHT2,DAY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502620).
lisp_trans(=>(timeDayTime(DAY),exists([RISE,SET],and(tSunrise(RISE),tSunset(SET),starts(RISE,DAY),finishes(SET,DAY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':502851).
lisp_trans(genls(tMorning,timeDayTime),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503046).
lisp_trans(documentation(tMorning,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","#$Sunrise","and","end","at","noon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503073).
lisp_trans(=>(tMorning(MORNING),exists([HOUR],and(isa(HOUR,iTimeOf_HourFn(12,DAY)),finishes(HOUR,MORNING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503187).
lisp_trans(genls(tSumoAnteMeridiem,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503334).
lisp_trans(documentation(tSumoAnteMeridiem,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","midnight","and","end","at","noon",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503371).
lisp_trans(=>(tSumoAnteMeridiem(AM),exists([D,HOUR1,HOUR2],and(isa(HOUR1,iTimeOf_HourFn(24,D)),starts(HOUR1,AM),isa(HOUR2,iTimeOf_HourFn(12,D)),finishes(HOUR2,AM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503488).
lisp_trans(genls(tSumoPostMeridiem,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503709).
lisp_trans(documentation(tSumoPostMeridiem,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","noon","and","end","at","midnight",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503746).
lisp_trans(=>(tSumoPostMeridiem(PM),exists([D,HOUR1,HOUR2],and(isa(HOUR1,iTimeOf_HourFn(12,D)),starts(HOUR1,PM),isa(HOUR2,iTimeOf_HourFn(24,D)),finishes(HOUR2,PM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':503863).
lisp_trans(genls(tAfternoon,timeDayTime),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504084).
lisp_trans(documentation(tAfternoon,vEnglishLanguage,s("The","class","of","#$TimeIntervals","that","begin","at","noon","and","end","at","#$Sunset",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504113).
lisp_trans(=>(tAfternoon(AFTERNOON),exists([HOUR],and(isa(HOUR,iTimeOf_HourFn(12,DAY)),starts(HOUR,AFTERNOON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504228).
lisp_trans(genls(tSunrise,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504379).
lisp_trans(documentation(tSunrise,vEnglishLanguage,s("The","#$TimeInterval","of","each","#$Day","when","the","sun","is","rising","and","is","partially","overlapped","by","the","horizon","line",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504411).
lisp_trans(genls(tSunset,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504560).
lisp_trans(documentation(tSunset,vEnglishLanguage,s("The","#$TimeInterval","of","each","#$Day","when","the","sun","is","setting","and","is","partially","overlapped","by","the","horizon","line",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504591).
lisp_trans(genls(tSumoWeekend,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504741).
lisp_trans(documentation(tSumoWeekend,vEnglishLanguage,s("Any","#$Saturday","and","#$Sunday","which","are","contiguous",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504773).
lisp_trans(=>(tSumoWeekend(WEEKEND),exists([SATURDAY,SUNDAY],and(vSaturday(SATURDAY),vSunday(SUNDAY),starts(SATURDAY,WEEKEND),finishes(SUNDAY,WEEKEND),meetsTemporally(SATURDAY,SUNDAY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':504866).
lisp_trans(genls(eventSeasonOfYear,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505140).
lisp_trans(sumo_partition(eventSeasonOfYear,eventWinterSeason,eventSpringSeason,eventSummerSeason,eventFallSeason),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505177).
lisp_trans(documentation(eventSeasonOfYear,vEnglishLanguage,'SeasonOfYear is the class of four  seasons correlated with the calendar #$Year and associated with  changes in the length of daylight and with overall temperature  changes. Depending upon the #$GeographicArea, a #$SeasonOfYear  may also be associated with weather patterns (e.g., rainy, dry,  windy). The characteristics of seasons (cold vs. hot temperatures,  long vs. short days) are reversed from the #$NorthernHemisphere  to the #$SouthernHemisphere.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505252).
lisp_trans(genls(eventWinterSeason,eventSeasonOfYear),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505757).
lisp_trans(documentation(eventWinterSeason,vEnglishLanguage,s("The","#$SeasonOfYear","that","begins","at","the","winter","solstice","and","ends","at","the","spring","equinox",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505794).
lisp_trans(=>(eventWinterSeason(WINTER),exists([SPRING],and(eventSpringSeason(SPRING),meetsTemporally(WINTER,SPRING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':505929).
lisp_trans(=>(eventWinterSeason(WINTER),exists([AUTUMN],and(eventFallSeason(AUTUMN),meetsTemporally(AUTUMN,WINTER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506088).
lisp_trans(genls(eventSpringSeason,eventSeasonOfYear),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506245).
lisp_trans(documentation(eventSpringSeason,vEnglishLanguage,s("The","#$SeasonOfYear","that","begins","at","the","spring","equinox","and","ends","at","the","summer","solstice",".","#$SpringSeason","is","the","class","of","#$TimeIntervals","associated","with","the","calendar","months","of","#$March","through","#$May",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506282).
lisp_trans(=>(eventSpringSeason(SPRING),exists([SUMMER],and(eventSummerSeason(SUMMER),meetsTemporally(SPRING,SUMMER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506528).
lisp_trans(=>(eventSpringSeason(SPRING),exists([WINTER],and(eventWinterSeason(WINTER),meetsTemporally(WINTER,SPRING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506687).
lisp_trans(genls(eventSummerSeason,eventSeasonOfYear),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506846).
lisp_trans(documentation(eventSummerSeason,vEnglishLanguage,s("The","#$SeasonOfYear","that","begins","at","the","summer","solstice","and","ends","at","the","autumnal","equinox",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':506883).
lisp_trans(=>(eventSummerSeason(SUMMER),exists([SPRING],and(eventSpringSeason(SPRING),meetsTemporally(SPRING,SUMMER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507020).
lisp_trans(=>(eventSummerSeason(SUMMER),exists([AUTUMN],and(eventFallSeason(AUTUMN),meetsTemporally(SUMMER,AUTUMN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507179).
lisp_trans(genls(eventFallSeason,eventSeasonOfYear),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507336).
lisp_trans(documentation(eventFallSeason,vEnglishLanguage,s("The","#$SeasonOfYear","that","begins","at","the","autumnal","equinox","and","ends","at","the","winter","solstice",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507371).
lisp_trans(=>(eventFallSeason(AUTUMN),exists([SUMMER],and(eventSummerSeason(SUMMER),meetsTemporally(SUMMER,AUTUMN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507506).
lisp_trans(=>(eventFallSeason(AUTUMN),exists([WINTER],and(eventWinterSeason(WINTER),meetsTemporally(AUTUMN,WINTER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507663).
lisp_trans(vtPositionalAttribute(tSumoUpstairs),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507820).
lisp_trans(documentation(tSumoUpstairs,vEnglishLanguage,s("A","#$PositionalAttribute","to","indicate","that","one","thing","is","one","or","more","floors","above","a","second","thing","in","the","same","building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':507860).
lisp_trans(=>(orientation(OBJ1,OBJ2,tSumoUpstairs),exists([LEVEL1,LEVEL2,BUILDING],and(tSumoBuildingLevel(LEVEL1),tSumoBuildingLevel(LEVEL2),tPlaceLikeBuilding(BUILDING),part(LEVEL1,BUILDING),part(LEVEL2,BUILDING),located(OBJ1,LEVEL1),located(OBJ2,LEVEL2),orientation(LEVEL1,LEVEL2,tSumoAbove)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':508021).
lisp_trans(vtPositionalAttribute(tSumoDownstairs),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':508419).
lisp_trans(documentation(tSumoDownstairs,vEnglishLanguage,s("A","#$PositionalAttribute","to","indicate","that","one","thing","is","one","or","more","floors","below","a","second","thing","in","the","same","building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':508461).
lisp_trans(=>(orientation(OBJ1,OBJ2,tSumoDownstairs),exists([LEVEL1,LEVEL2,BUILDING],and(tSumoBuildingLevel(LEVEL1),tSumoBuildingLevel(LEVEL2),tPlaceLikeBuilding(BUILDING),part(LEVEL1,BUILDING),part(LEVEL2,BUILDING),located(OBJ1,LEVEL1),located(OBJ2,LEVEL2),orientation(LEVEL1,LEVEL2,tSumoBelow)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':508624).
lisp_trans(genls(vtLinguisticAttribute,vtInternalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509024).
lisp_trans(documentation(vtLinguisticAttribute,vEnglishLanguage,s("Any","#$Attribute","that","is","expressed","by","a","#$Language","or","class","of","#$Languages",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509073).
lisp_trans(tSumoEmotionalState(vtHappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509204).
lisp_trans(documentation(vtHappiness,vEnglishLanguage,s("The","state","of","being","happy",",","experiencing","pleasure",",","joy","or","contentment",".","Note","that","this","#$Attribute","covers","both","active","enjoyment",",","as","well","as","the","emotional","state","of","simply","being","free","from","anxiety","or","fear",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509240).
lisp_trans(=>(sumoAttribute(PERSON,vtHappiness),not(exists([PROP],fears(PERSON,PROP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509488).
lisp_trans(subAttribute(vtSatisfaction,vtHappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509584).
lisp_trans(documentation(vtSatisfaction,vEnglishLanguage,s("The","state","of","being","happy","about","a","state","of","affairs","that","occurred","in","the","past",".","In","cases","where","that","state","of","affairs","is","the","product","of","one","'s","own","doing",",","this","is","known","as","pride",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509622).
lisp_trans(subAttribute(tSumoTranquility,vtHappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509845).
lisp_trans(contraryAttribute(tSumoTranquility,tSumoAnxiety),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509882).
lisp_trans(documentation(tSumoTranquility,vEnglishLanguage,s("The","state","of","being","free","from","#$Anxiety",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':509922).
lisp_trans(tSumoEmotionalState(vtUnhappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510009).
lisp_trans(contraryAttribute(vtUnhappiness,vtHappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510048).
lisp_trans(documentation(vtUnhappiness,vEnglishLanguage,s("The","state","of","being","unhappy",",","experiencing","pain",",","sorrow","or","unease",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510090).
lisp_trans(subAttribute(vtExcitement,vtHappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510203).
lisp_trans(documentation(vtExcitement,vEnglishLanguage,s("The","state","of","being","happy","about","a","state","of","affairs","that","might","occur","in","the","future",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510239).
lisp_trans(subAttribute(tSumoAnxiety,vtUnhappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510368).
lisp_trans(documentation(tSumoAnxiety,vEnglishLanguage,s("The","state","of","being","worried",",","troubled","or","uneasy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510403).
lisp_trans(=>(sumoAttribute(PERSON,tSumoAnxiety),exists([PROP],fears(PERSON,PROP))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510494).
lisp_trans(subAttribute(vtAnger,vtUnhappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510579).
lisp_trans(documentation(vtAnger,vEnglishLanguage,s("The","state","of","being","wrathful",",","irate","or","indignant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510612).
lisp_trans(=>(sumoAttribute(PERSON,vtAnger),exists([PROP],disapproves(PERSON,PROP))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510702).
lisp_trans(subAttribute(tSumoPain,vtUnhappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510791).
lisp_trans(documentation(tSumoPain,vEnglishLanguage,s("A","physical","sensation","of","discomfort","which","can","vary","widely","in","intensity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510823).
lisp_trans(subAttribute(stateHeadache,tSumoPain),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510935).
lisp_trans(documentation(stateHeadache,vEnglishLanguage,'Pain that that is restricted to the #$Head.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':510964).
lisp_trans(=>(sumoAttribute(E,stateHeadache),exists([H],and(tSumoHead(H),part(H,E),sumoAttribute(H,tSumoPain)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511054).
lisp_trans(tSumoEmotionalState(vtSurprise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511182).
lisp_trans(documentation(vtSurprise,vEnglishLanguage,s("The","#$EmotionalState","that","one","experiences","when","something","unexpected","and","of","significance","occurs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511217).
lisp_trans(=>(holdsDuring(TIME,sumoAttribute(AGENT,vtSurprise)),exists([PART,PROP],and(temporalPart(PART,tColOfPastFn(TIME)),holdsDuring(PART,expects(AGENT,PROP)),holdsDuring(TIME,truth(PROP,vFalse))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511358).
lisp_trans(rtBinaryPredicate(structure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511599).
lisp_trans(rtIrreflexiveRelation(structure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511636).
lisp_trans(rtAsymmetricRelation(structure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511677).
lisp_trans(genlPreds(structure,sumoAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511717).
lisp_trans(argIsa(structure,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511751).
lisp_trans(argIsa(structure,2,vtStructureAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511779).
lisp_trans(rtBinaryPredicate(color),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':511920).
lisp_trans(genlPreds(color,sumoAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512030).
lisp_trans(argIsa(color,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512060).
lisp_trans(argIsa(color,2,vtColorAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512084).
lisp_trans(=>(and(vtColorAttribute(ATTR),holdsDuring(T1,sumoAttribute(OBJ,ATTR))),holdsDuring(T1,color(OBJ,ATTR))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512154).
lisp_trans(genls(vtSpectralColor,vtColorAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512299).
lisp_trans(documentation(vtSpectralColor,vEnglishLanguage,s("Colors","that","can","be","produced","by","visible","light","of","a","narrow","band","of","wavelengths","(","monochromatic","light",")","are","called","pure","spectral","colors",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512339).
lisp_trans(genls(tSumoSecondaryColor,vtColorAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512521).
lisp_trans(documentation(tSumoSecondaryColor,vEnglishLanguage,s("A","color","that","is","the","product","of","mixing","together","two","or","more","#$PrimaryColors",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512562).
lisp_trans(=>(and(tSumoSecondaryColor(COLOR),sumoAttribute(OBJ,COLOR)),exists([PROCESS,RESOURCE1,RESOURCE2,PRIMARY1,PRIMARY2],and(result(PROCESS,OBJ),resource(PROCESS,RESOURCE1),resource(PROCESS,RESOURCE2),sumoAttribute(RESOURCE1,PRIMARY1),sumoAttribute(RESOURCE2,PRIMARY2),tSumoPrimaryColor(PRIMARY1),tSumoPrimaryColor(PRIMARY2),not(equal(PRIMARY1,PRIMARY2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':512689).
lisp_trans(vtSpectralColor(vVioletColor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513175).
lisp_trans(tSumoSecondaryColor(vVioletColor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513212).
lisp_trans(documentation(vVioletColor,vEnglishLanguage,s("The","#$Attribute","of","being","violet","in","color",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513250).
lisp_trans(tSumoSecondaryColor(vGrayColor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513339).
lisp_trans(documentation(vGrayColor,vEnglishLanguage,s("A","#$SecondaryColor","that","results","from","mixing","#$Black","and","#$White",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513375).
lisp_trans(tSumoSecondaryColor(tSumoPink),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513486).
lisp_trans(documentation(tSumoPink,vEnglishLanguage,s("A","#$SecondaryColor","that","results","from","mixing","#$Red","and","#$White",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513517).
lisp_trans(tSumoSecondaryColor(tSumoBrown),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513621).
lisp_trans(documentation(tSumoBrown,vEnglishLanguage,s("A","#$SecondaryColor","that","resembles","the","color","of","wood","or","of","soil",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513653).
lisp_trans(tSumoSecondaryColor(vOrangeColor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513759).
lisp_trans(vtSpectralColor(vOrangeColor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513797).
lisp_trans(documentation(vOrangeColor,vEnglishLanguage,s("A","#$SecondaryColor","that","results","from","mixing","#$Red","and","#$Yellow","and","resembles","the","color","of","a","ripe","orange","fruit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513834).
lisp_trans(tSumoSecondaryColor(tSumoGreen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':513993).
lisp_trans(vtSpectralColor(tSumoGreen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514025).
lisp_trans(documentation(tSumoGreen,vEnglishLanguage,s("A","#$SecondaryColor","that","resembles","the","color","of","fresh","grass",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514056).
lisp_trans(tSumoSecondaryColor(tSumoPurple),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514158).
lisp_trans(documentation(tSumoPurple,vEnglishLanguage,s("A","#$SecondaryColor","that","results","from","mixing","#$Red","and","#$Blue",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514191).
lisp_trans(vtShapeAttribute(actLineFormation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514296).
lisp_trans(documentation(actLineFormation,vEnglishLanguage,s("A","#$ShapeAttribute","that","applies","to","#$Collections","and","indicates","that","all","of","the","#$members","of","the","#$Collection","are","arrayed","in","a","line",",","i",".","e",".","each","#$member","(","except","possibly","the","first",")","is","behind","or","to","the","side","of","exactly","one","other","#$member",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514336).
lisp_trans(=>(sumoAttribute(COLLECTION,actLineFormation),ttSumoCollection(COLLECTION)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514623).
lisp_trans(vtSoundAttribute(tSumoStressed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514707).
lisp_trans(documentation(tSumoStressed,vEnglishLanguage,s("A","#$SoundAttribute","of","#$Syllables",".","It","denotes","the","quality","of","being","emphasized","over","the","other","#$Syllables","in","the","same","#$Word",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514742).
lisp_trans(=>(sumoAttribute(SYLLABLE,tSumoStressed),tSumoSyllable(SYLLABLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514914).
lisp_trans(=>(and(sumoAttribute(SYLLABLE,tSumoStressed),tSumoWord(WORD),part(SYLLABLE,WORD)),not(exists([SYLLABLE2],and(tSumoSyllable(SYLLABLE2),part(SYLLABLE2,WORD),sumoAttribute(SYLLABLE2,tSumoStressed),not(equal(SYLLABLE2,SYLLABLE)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':514987).
lisp_trans(genls(tSumoSyllable,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515297).
lisp_trans(documentation(tSumoSyllable,vEnglishLanguage,s("A","sequence","of","#$Characters","from","the","same","#$Word","that","denote","a","single","sound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515332).
lisp_trans(=>(tSumoWord(WORD),exists([SYLLABLE],and(tSumoSyllable(SYLLABLE),part(SYLLABLE,WORD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515453).
lisp_trans(genls(tSumoAlphabeticCharacter,ftCharacter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515591).
lisp_trans(documentation(tSumoAlphabeticCharacter,vEnglishLanguage,s("Any","#$Character","that","is","comprised","of","a","single","alphabetical","character",",","e",".","g",".","A",",","B",",","C",",","D",",",".",".",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515632).
lisp_trans(genls(tSumoDigitCharacter,ftCharacter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515779).
lisp_trans(documentation(tSumoDigitCharacter,vEnglishLanguage,s("Any","#$Character","that","is","comprised","of","a","single","digit",",","i",".","e",".","one","of","the","numerals","0",",","1",",","2",",","3",",","4",",","5",",","6",",","7",",","8",",","9",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515815).
lisp_trans(genls(xtConsonant,tSumoAlphabeticCharacter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':515974).
lisp_trans(documentation(xtConsonant,vEnglishLanguage,s("An","#$AlphabeticCharacter","that","denotes","a","speech","sound","that","results","in","audible","friction","when","it","is","pronounced",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516015).
lisp_trans(genls(xtVowel,tSumoAlphabeticCharacter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516170).
lisp_trans(documentation(xtVowel,vEnglishLanguage,s("An","#$AlphabeticCharacter","that","denotes","a","speech","sound","that","does","not","result","in","audible","friction","when","it","is","pronounced",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516207).
lisp_trans(vtContestAttribute(iLost),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516366).
lisp_trans(contraryAttribute(iLost,tSumoWon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516399).
lisp_trans(documentation(iLost,vEnglishLanguage,s("The","#$ContestAttribute","that","applies","to","a","#$Contest","participant","who","has","lost","the","#$Contest",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516428).
lisp_trans(vtContestAttribute(tSumoWon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516560).
lisp_trans(documentation(tSumoWon,vEnglishLanguage,s("The","#$ContestAttribute","that","applies","to","a","#$Contest","participant","who","has","won","the","#$Contest",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516592).
lisp_trans(vtContestAttribute(tSumoTieScore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516722).
lisp_trans(documentation(tSumoTieScore,vEnglishLanguage,s("The","#$ContestAttribute","that","applies","to","all","#$contestParticipants","in","a","#$Contest","when","none","of","them","have","#$Won","or","#$Lost","the","#$Contest",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516759).
lisp_trans(genls(vtGameAttribute,vtContestAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516938).
lisp_trans(documentation(vtGameAttribute,vEnglishLanguage,s("Any","#$ContestAttribute","that","is","specific","to","a","#$Game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':516980).
lisp_trans(=>(and(sumoProperty(THING,ATTR),vtGameAttribute(ATTR)),exists([GAME],and(tGame(GAME),or(agent(GAME,THING),patient(GAME,THING),subProcess(THING,GAME))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517083).
lisp_trans(genls(vtSportsAttribute,vtGameAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517348).
lisp_trans(documentation(vtSportsAttribute,vEnglishLanguage,s("Any","#$GameAttribute","that","is","specific","to","a","#$Sport",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517389).
lisp_trans(=>(and(sumoProperty(THING,ATTR),vtSportsAttribute(ATTR)),exists([SPORT],and(tGame(SPORT),or(agent(SPORT,THING),patient(SPORT,THING),subProcess(THING,SPORT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517492).
lisp_trans(vtSportsAttribute(tSumoFoul),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517764).
lisp_trans(documentation(tSumoFoul,vEnglishLanguage,s("A","#$SportsAttribute","that","indicates","that","the","#$GamePiece","of","a","#$Sport","is","no","longer","in","play","because","it","has","gone","beyond","the","limits","of","the","sports","field",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517796).
lisp_trans(vtSportsAttribute(tSumoSportsOut),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':517987).
lisp_trans(documentation(tSumoSportsOut,vEnglishLanguage,s("A","#$SportsAttribute","that","indicates","that","a","player","in","a","#$Sport","can","no","longer","compete","because","he","has","been","tagged","with","the","#$GamePiece",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518024).
lisp_trans(genls(vtPoliticoEconomicAttribute,vtRelationalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518203).
lisp_trans(sumo_partition(vtPoliticoEconomicAttribute,tSumoFormOfGovernment,vtEconomicAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518260).
lisp_trans(documentation(vtPoliticoEconomicAttribute,vEnglishLanguage,s("Any","#$Attribute","of","a","#$Government","which","specifies","some","aspect","of","the","political","or","economic","system","of","the","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518333).
lisp_trans(=>(and(vtPoliticoEconomicAttribute(ATTRIBUTE),sumoAttribute(GOVERNMENT,ATTRIBUTE)),tSumoGovernment(GOVERNMENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518515).
lisp_trans(genls(vtEconomicAttribute,vtPoliticoEconomicAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518662).
lisp_trans(documentation(vtEconomicAttribute,vEnglishLanguage,'EconomicAttribute is the class  of terms including all #$Attributes used to characterize the  economic systems or development levels of #$Nations or dependent  #$GeopoliticalAreas.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518717).
lisp_trans(genls(tSumoFormOfGovernment,vtPoliticoEconomicAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':518956).
lisp_trans(documentation(tSumoFormOfGovernment,vEnglishLanguage,'FormOfGovernment is a class of  #$Attributes used to describe the characteristics of a government,  especially a #$NationalGovernment.  The concept #$FormOfGovernment is  interpreted broadly enough to include #$Anarchy and #$Factionalism.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519010).
lisp_trans(genls(actChemicalReduction,actChemicalSynthesis),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519303).
lisp_trans(disjointWith(actChemicalReduction,actOxidation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519350).
lisp_trans(documentation(actChemicalReduction,vEnglishLanguage,s("Any","#$ChemicalProcess","where","#$Electrons","are","added","to","the","substance","undergoing","the","#$ChemicalProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519389).
lisp_trans(=>(and(actChemicalReduction(R),patient(R,S),holdsDuring(uBeginFn(uWhenFn(R)),electronNumber(S,L))),and(greaterThan(G,L),holdsDuring(iTimeOf_EndFn(uWhenFn(R)),electronNumber(S,G)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519543).
lisp_trans(genls(actOxidation,eventChemicalDecomposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519797).
lisp_trans(documentation(actOxidation,vEnglishLanguage,s("Any","#$ChemicalProcess","where","#$Electrons","are","removed","from","the","substance","undergoing","the","#$ChemicalProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519840).
lisp_trans(=>(and(actOxidation(O),patient(O,S),holdsDuring(uBeginFn(uWhenFn(O)),electronNumber(S,G))),exists([L],and(lessThan(L,G),holdsDuring(iTimeOf_EndFn(uWhenFn(O)),electronNumber(S,L))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':519991).
lisp_trans(genls(tSumoDialysis,actSeparating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':520253).
lisp_trans(documentation(tSumoDialysis,vEnglishLanguage,s("Any","process","of","#$Separating","a","#$Solution","into","two","or","more","constituent","#$PureSubstances","by","means","of","their","unequal","diffusion","through","membranes","that","are","partially","permeable",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':520284).
lisp_trans(=>(tSumoDialysis(DIALYSIS),exists([SOLUTION,SUBSTANCE1,SUBSTANCE2],and(resource(DIALYSIS,SOLUTION),tSolution(SOLUTION),result(DIALYSIS,SUBSTANCE1),tPureSubstance(SUBSTANCE1),result(DIALYSIS,SUBSTANCE2),tPureSubstance(SUBSTANCE2),not(equal(SUBSTANCE1,SUBSTANCE2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':520501).
lisp_trans(genls(actDiluting,actPutting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':520904).
lisp_trans(documentation(actDiluting,vEnglishLanguage,s("Adding","a","#$Liquid","to","a","#$Solution","to","decrease","the","concentration","of","the","#$Solution",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':520932).
lisp_trans(=>(actDiluting(D),exists([S],and(patient(D,S),tSolution(S),sumoAttribute(S,tSumoLiquid)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521060).
lisp_trans(vtInternalAttribute(eventChemicalEquilibrium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521196).
lisp_trans(documentation(eventChemicalEquilibrium,vEnglishLanguage,s("The","#$Attribute","of","being","in","a","chemically","stable","state",",","i",".","e",".","the","relative","proportions","of","#$resources","and","#$results","will","not","longer","change",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521245).
lisp_trans(=>(sumoProperty(PROCESS,eventChemicalEquilibrium),eventChemicalProcess(PROCESS)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521440).
lisp_trans(=>(sumoProperty(PROCESS,eventChemicalEquilibrium),exists([RATIO],=>(and(holdsDuring(TIME,resource(PROCESS,RESOURCE)),holdsDuring(TIME,result(PROCESS,RESULT))),equal(RATIO,uDivisionFn(RESOURCE,RESULT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521528).
lisp_trans(genls(tSumoChromatography,actSeparating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521799).
lisp_trans(documentation(tSumoChromatography,vEnglishLanguage,'Processes of #$Separating a #$LiquidMixture or  a #$GasMixture into some or all of the #$PureSubstances that comprise it.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':521836).
lisp_trans(=>(tSumoChromatography(C),exists([M],and(resource(C,M),or(tSumoLiquidMixture(M),tSumoGasMixture(M))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522010).
lisp_trans(=>(tSumoChromatography(C),exists([S],and(tPureSubstance(S),result(C,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522176).
lisp_trans(genls(vtBreakabilityAttribute,vtInternalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522294).
lisp_trans(documentation(vtBreakabilityAttribute,vEnglishLanguage,s("A","subclass","of","#$Attributes","for","characterizing","the","breakability","of","#$CorpuscularObjects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522345).
lisp_trans(vtBreakabilityAttribute(tSumoFragile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522491).
lisp_trans(documentation(tSumoFragile,vEnglishLanguage,s("An","#$Attribute","which","indicates","that","the","associated","#$Object","is","very","breakable",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522532).
lisp_trans(vtBreakabilityAttribute(tSumoUnbreakable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522655).
lisp_trans(contraryAttribute(tSumoUnbreakable,tSumoFragile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522700).
lisp_trans(documentation(tSumoUnbreakable,vEnglishLanguage,s("An","#$Attribute","which","indicates","that","the","associated","#$Object","cannot","be","broken","under","normal","usage","conditions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522740).
lisp_trans(genlPreds(contestParticipant,agent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522896).
lisp_trans(rtCaseRole(contestParticipant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522935).
lisp_trans(rtTotalValuedRelation(contestParticipant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':522974).
lisp_trans(argIsa(contestParticipant,1,tSumoContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523024).
lisp_trans(argIsa(contestParticipant,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523062).
lisp_trans(documentation(contestParticipant,vEnglishLanguage,s("(","#$contestParticipant","?","CONTEST","?","AGENT",")","means","that","?","AGENT","is","one","of","the","sides","in","the","#$Contest","?","CONTEST",".","For","example",",","if","the","?","CONTEST","is","a","football","game",",","then","?","AGENT","would","be","one","of","the","opposing","teams",".","For","another","example",",","if","?","CONTEST","is","a","#$Battle",",","then","?","AGENT","would","be","one","of","the","sides","fighting","each","other",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523098).
lisp_trans(genls(actCivilWar,actWar),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523466).
lisp_trans(documentation(actCivilWar,vEnglishLanguage,s("A","#$War","in","which","the","fighting","#$GeopoliticalAreas","are","both","part","of","the","same","#$Nation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523490).
lisp_trans(=>(actCivilWar(WAR),exists([NATION],and(actNation(NATION),all([AGENT],=>(contestParticipant(WAR,AGENT),geopoliticalSubdivision(AGENT,NATION)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523621).
lisp_trans(genls(actDebating,tSumoContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523872).
lisp_trans(genls(actDebating,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523900).
lisp_trans(documentation(actDebating,vEnglishLanguage,s("A","#$Contest","where","each","participant","holds","a","different","view","regarding","some","issue",",","and","each","participant","attempts","to","prove",",","by","rhetoric","or","evidence",",","that","his","/","her","own","views","about","a","particular","matter","are","correct","and","/","or","that","the","views","of","the","other","participants","are","incorrect",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':523944).
lisp_trans(genls(actNegotiating,tSumoContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524260).
lisp_trans(genls(actNegotiating,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524291).
lisp_trans(documentation(actNegotiating,vEnglishLanguage,s("A","#$Contest","where","each","participant","attempts","to","maximize","his","self","-","interest","in","a","#$Promise","that","marks","the","end","of","the","#$Contest",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524338).
lisp_trans(=>(actNegotiating(NEGOTIATE),hasPurpose(NEGOTIATE,exists([COMMIT],and(actCommitting(COMMIT),subProcess(COMMIT,NEGOTIATE),finishes(uWhenFn(COMMIT),uWhenFn(NEGOTIATE)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524512).
lisp_trans(genls(actBusinessCompetition,tSumoContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524842).
lisp_trans(documentation(actBusinessCompetition,vEnglishLanguage,s("Any","#$Contest","where","the","#$contestParticipants","are","#$Corporations","and","the","aim","is","to","win","as","many","customers","as","possible",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':524881).
lisp_trans(=>(and(actBusinessCompetition(CONTEST),contestParticipant(CONTEST,AGENT)),actCorporation(AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':525055).
lisp_trans(genls(vtVisualAcuityAttribute,vtBiologicalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':525192).
lisp_trans(documentation(vtVisualAcuityAttribute,vEnglishLanguage,s("The","#$BiologicalAttributes","in","this","#$Class","describe","the","visual","capabilities","of","an","#$Organism",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':525245).
lisp_trans(vtVisualAcuityAttribute(tSumoColorBlind),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':525396).
lisp_trans(documentation(tSumoColorBlind,vEnglishLanguage,s("This","#$VisualAcuityAttribute","describes","an","#$Organism","that","is","unable","to","perceive","a","distinction","in","color","between","certain","wavelength","ranges","within","the","larger","range","of","typically","visible","electro","-","magnetic","radiation","(","light",")",".","Among","#$Humans",",","there","are","several","forms","and","degrees","of","color","blindness",".","Color","blindness","is","generally","considered","to","be","a","mild","to","moderate","disability","among","#$Humans",",","but","individuals","with","certain","types","of","color","blindness","excel","at","some","visual","pattern","recognition","tasks",",","and","it","'s","not","clear","that","the","condition","should","be","considered","a","#$DiseaseOrSyndrome",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':525440).
lisp_trans(genls(actDisability,tSumoDiseaseOrSyndrome),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526060).
lisp_trans(documentation(actDisability,vEnglishLanguage,'Disability is a class of  #$DiseaseOrSyndrome that describes impairments, activity limitations or participation  restriction that may be physical, cognitive, mental, sensory, emotional,  developmental or some combination'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526143).
lisp_trans(termFormat(vEnglishLanguage,actDisability,"disability"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526411).
lisp_trans(genls(tSumoPhysicalDisability,actDisability),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526465).
lisp_trans(documentation(tSumoPhysicalDisability,vEnglishLanguage,'PhysicalDisability is any  impairment that limits the physical function of limbs or fine or gross motor ability,  or limit the facets of daily living'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526549).
lisp_trans(termFormat(vEnglishLanguage,tSumoPhysicalDisability,s("physical","disability")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526754).
lisp_trans(genls(tSumoSensoryDisability,actDisability),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526825).
lisp_trans(documentation(tSumoSensoryDisability,vEnglishLanguage,'SensoryDisability is any  impairement of one of the five senses'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':526908).
lisp_trans(termFormat(vEnglishLanguage,tSumoSensoryDisability,s("sensory","disability")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527026).
lisp_trans(vtVisualAcuityAttribute(tSumoBlind),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527095).
lisp_trans(tSumoSensoryDisability(tSumoBlind),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527134).
lisp_trans(documentation(tSumoBlind,vEnglishLanguage,s("The","#$Attribute","that","applies","to","#$Animals","and","#$Humans","that","are","unable","to","see",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527287).
lisp_trans(=>(sumoAttribute(AGENT,tSumoBlind),not(capability(actSeeing,agent,AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527408).
lisp_trans(tSumoSensoryDisability(tSumoDeaf),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527600).
lisp_trans(documentation(tSumoDeaf,vEnglishLanguage,s("The","#$Attribute","that","applies","to","#$Animals","and","#$Humans","that","are","unable","to","hear",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527634).
lisp_trans(=>(sumoAttribute(A,tSumoDeaf),not(capability(actHearing,agent,A))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527755).
lisp_trans(vtBiologicalAttribute(mobHungry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527826).
lisp_trans(documentation(mobHungry,vEnglishLanguage,s("The","#$Attribute","that","applies","to","#$Animals","and","#$Humans","when","they","want","food",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527864).
lisp_trans(=>(sumoAttribute(A,mobHungry),desires(A,exists([E],and(actEating(E),agent(E,A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':527983).
lisp_trans(vtBiologicalAttribute(tSumoPregnant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528110).
lisp_trans(documentation(tSumoPregnant,vEnglishLanguage,s("The","#$Attribute","that","applies","to","#$Female","#$Animals","and","#$Humans","that","have","an","embryo","or","fetus","growing","inside","of","them","as","the","result","of","having","one","of","the","#$Female","'s","#$Eggs","fertilized",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528150).
lisp_trans(=>(sumoAttribute(H,tSumoPregnant),sumoAttribute(H,tFemale)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528377).
lisp_trans(subAttribute(actPuberty,tSumoNonFullyFormed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528433).
lisp_trans(documentation(actPuberty,vEnglishLanguage,s("The","#$DevelopmentalAttribute","of","having","functional","sex","glands","which","are","not","fully","mature",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528471).
lisp_trans(actBodyPosition(tPartTypeFist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528604).
lisp_trans(documentation(tPartTypeFist,vEnglishLanguage,s("The","#$BodyPosition","of","having","the","fingers","drawn","into","the","palm","so","that","the","hand","can","be","used","for","striking","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528634).
lisp_trans(=>(sumoAttribute(HAND,tPartTypeFist),tPartTypeHand(HAND)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528789).
lisp_trans(genls(tSumoLyingDown,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528846).
lisp_trans(genls(tSumoLyingDown,tSumoMotionDownward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528878).
lisp_trans(documentation(tSumoLyingDown,vEnglishLanguage,s("The","#$BodyMotion","of","moving","from","a","#$Sitting","to","a","#$Prostrate","position",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':528914).
lisp_trans(=>(and(tSumoLyingDown(LIE),agent(LIE,AGENT)),and(holdsDuring(uBeginFn(uWhenFn(LIE)),sumoAttribute(AGENT,actSitting)),holdsDuring(iTimeOf_EndFn(uWhenFn(LIE)),sumoAttribute(AGENT,tSumoProstrate)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529031).
lisp_trans(actBodyPosition(tSumoHandstand),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529277).
lisp_trans(documentation(tSumoHandstand,vEnglishLanguage,s("The","#$BodyPosition","where","one","rests","on","one","'s","hands","and","extends","one","'s","feet","in","the","air",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529311).
lisp_trans(actBodyPosition(actKneeling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529442).
lisp_trans(documentation(actKneeling,vEnglishLanguage,s("The","#$BodyPosition","of","resting","one","'s","weight","on","one","'s","#$Knees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529475).
lisp_trans(actBodyPosition(eventSplitting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529581).
lisp_trans(documentation(eventSplitting,vEnglishLanguage,s("The","#$BodyPosition","of","extending","one","'s","#$Legs","at","right","angles","to","one","'s","#$Torso",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529615).
lisp_trans(subAttribute(actSquatting,actSitting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529740).
lisp_trans(documentation(actSquatting,vEnglishLanguage,'Sitting on one\'s heels.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529773).
lisp_trans(genls(actSittingDown,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529844).
lisp_trans(genls(actSittingDown,tSumoMotionDownward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529878).
lisp_trans(documentation(actSittingDown,vEnglishLanguage,s("The","#$BodyMotion","of","moving","from","a","#$Standing","to","a","#$Sitting","position",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':529916).
lisp_trans(=>(and(actSittingDown(SIT),agent(SIT,AGENT)),and(holdsDuring(uBeginFn(uWhenFn(SIT)),sumoAttribute(AGENT,actStanding)),holdsDuring(iTimeOf_EndFn(uWhenFn(SIT)),sumoAttribute(AGENT,actSitting)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530034).
lisp_trans(genls(actStandingUp,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530284).
lisp_trans(genls(actStandingUp,tSumoMotionUpward),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530317).
lisp_trans(documentation(actStandingUp,vEnglishLanguage,s("The","#$BodyMotion","of","moving","from","a","#$Sitting","to","a","#$Standing","position",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530352).
lisp_trans(=>(and(actStandingUp(STAND),agent(STAND,AGENT)),and(holdsDuring(uBeginFn(uWhenFn(STAND)),sumoAttribute(AGENT,actSitting)),holdsDuring(iTimeOf_EndFn(uWhenFn(STAND)),sumoAttribute(AGENT,actStanding)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530469).
lisp_trans(genls(actEyeMotion,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530723).
lisp_trans(documentation(actEyeMotion,vEnglishLanguage,s("Any","#$Motion","where","a","patient","is","the","agent","'s","own","#$Eyelid","or","#$Eyelids",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530755).
lisp_trans(=>(and(actEyeMotion(EM),agent(EM,A)),exists([E],and(tPartTypeEyelid(E),part(E,A),patient(EM,E)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':530872).
lisp_trans(genls(tSumoOpeningEyes,actEyeMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531029).
lisp_trans(genls(tSumoOpeningEyes,actOpening),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531062).
lisp_trans(disjointWith(tSumoOpeningEyes,tSumoClosingEyes),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531093).
lisp_trans(documentation(tSumoOpeningEyes,vEnglishLanguage,s("The","#$BodyMotion","of","relaxing","the","eye","lids","so","that","the","corneas","are","exposed","to","light",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531128).
lisp_trans(genls(tSumoClosingEyes,actEyeMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531260).
lisp_trans(genls(tSumoClosingEyes,actClosing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531293).
lisp_trans(documentation(tSumoClosingEyes,vEnglishLanguage,s("The","#$EyeMotion","of","tensing","the","eye","lids","so","that","the","corneas","are","not","exposed","to","light",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531324).
lisp_trans(genls(actWinking,tSumoClosingEyes),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531458).
lisp_trans(genls(actWinking,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531489).
lisp_trans(documentation(actWinking,vEnglishLanguage,s("Any","instance","of","#$ClosingEyes","which","is","intended","to","express","something","to","someone","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531516).
lisp_trans(genls(actShrugging,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531646).
lisp_trans(genls(actShrugging,stateGesture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531678).
lisp_trans(documentation(actShrugging,vEnglishLanguage,s("Moving","the","#$Shoulders","in","such","a","way","that","the","motion","is","intended","to","express","something","to","someone","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531707).
lisp_trans(=>(and(actShrugging(SHRUG),patient(SHRUG,SHOULDER)),tPartTypeShoulder(SHOULDER)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531856).
lisp_trans(genls(actTrembling,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':531971).
lisp_trans(genls(actTrembling,actAutonomicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532003).
lisp_trans(genls(actTrembling,tSumoTremor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532041).
lisp_trans(disjointWith(actTrembling,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532069).
lisp_trans(documentation(actTrembling,vEnglishLanguage,s("Any","#$BodyMotion","which","is","involuntary","and","which","is","repeated","many","times","over","a","short","time","frame",",","e",".","g",".","a","tremor","in","the","hands",",","shivering","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532109).
lisp_trans(genls(actReflexiveProcess,actAutonomicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532295).
lisp_trans(documentation(actReflexiveProcess,vEnglishLanguage,s("Any","#$Muscle","reaction","which","is","a","response","to","a","specific","stimulus","and","which","does","not","reach","the","level","of","consciousness",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532340).
lisp_trans(=>(actReflexiveProcess(P),exists([M],and(tPartTypeMuscle(M),patient(P,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532511).
lisp_trans(genls(actDismounting,actBodyMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532625).
lisp_trans(documentation(actDismounting,vEnglishLanguage,s("Any","#$BodyMotion","which","results","in","not","being","#$On","something","else",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532659).
lisp_trans(=>(and(actDismounting(D),agent(D,A),patient(D,O)),and(holdsDuring(uBeginFn(uWhenFn(D)),orientation(A,O,tSumoOn)),holdsDuring(iTimeOf_EndFn(uWhenFn(D)),not(orientation(A,O,tSumoOn))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':532771).
lisp_trans(genls(tSumoDomesticAnimal,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533028).
lisp_trans(disjointWith(tSumoDomesticAnimal,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533061).
lisp_trans(documentation(tSumoDomesticAnimal,vEnglishLanguage,s("Any","#$Animal","that","is","kept","by","a","#$Human",",","as","a","pet",",","as","livestock",",","for","exhibition",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533093).
lisp_trans(=>(tSumoDomesticAnimal(ANIMAL),exists([KEEP,PERSON],and(actKeeping(KEEP),agent(KEEP,PERSON),tSumoHuman(PERSON),patient(KEEP,ANIMAL)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533229).
lisp_trans(genls(tFodder,uFoodForFn(tSumoDomesticAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533428).
lisp_trans(genls(tFodder,tSumoOrganicObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533473).
lisp_trans(documentation(tFodder,vEnglishLanguage,'Fodder is the class of #$OrganicObjects that  is used as food for #$DomesticAnimals.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533505).
lisp_trans(=>(tFodder(FEED),hasPurpose(FEED,exists([ANIMAL,EAT],and(tSumoDomesticAnimal(ANIMAL),actEating(EAT),agent(EAT,ANIMAL),patient(EAT,FEED))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533633).
lisp_trans(genls(tClazzHerbivore,tClazzMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533858).
lisp_trans(disjointWith(tClazzHerbivore,tClazzCarnivore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533886).
lisp_trans(documentation(tClazzHerbivore,vEnglishLanguage,s("A","plant","-","eating","#$Mammal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533917).
lisp_trans(=>(and(tClazzHerbivore(A),agent(E,A),actEating(E),patient(E,F)),tClazzPlant(F)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':533987).
lisp_trans(genls(tClazzAntelope,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534114).
lisp_trans(documentation(tClazzAntelope,vEnglishLanguage,s("A","#$HoofedMammal","with","long","legs","and","backward","-","facing","horns",".","This","class","includes","gazelles",",","addax",",","blackbucks",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534147).
lisp_trans(genls(tClazzBuffalo,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534306).
lisp_trans(documentation(tClazzBuffalo,vEnglishLanguage,s("A","#$HoofedMammal","with","long","hair","whose","habitat","is","the","plains","of","#$NorthAmerica",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534477).
lisp_trans(genls(tClazzDomesticCat,tSumoDomesticAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534600).
lisp_trans(genls(tClazzDomesticCat,tSumoFeline),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534638).
lisp_trans(documentation(tClazzDomesticCat,vEnglishLanguage,s("A","variety","of","#$Feline","which","has","been","domesticated","by","selective","breeding",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534668).
lisp_trans(genls(tSumoDomesticDog,tSumoDomesticAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534789).
lisp_trans(genls(tSumoDomesticDog,tSumoCanine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534827).
lisp_trans(documentation(tSumoDomesticDog,vEnglishLanguage,s("Canines","which","have","evolved","from","the","common","wolf","by","selective","breeding",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534857).
lisp_trans(genls(tClazzFox,tSumoCanine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534976).
lisp_trans(documentation(tClazzFox,vEnglishLanguage,'Canines with a bushy tail and pointed ears and nose.   #$Foxes tend to be much smaller than most #$DomesticDogs.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':534998).
lisp_trans(genls(tClazzElephant,tClazzHerbivore),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535152).
lisp_trans(documentation(tClazzElephant,vEnglishLanguage,s("A","very","large",",","almost","hairless","#$Herbivore","with","a","long","trunk",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535182).
lisp_trans(documentation(tClazzGoat,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","raised","primarily","for","#$Milk",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535288).
lisp_trans(genls(tClazzHorse,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535396).
lisp_trans(documentation(tClazzHorse,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","used","for","transportation","and","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535455).
lisp_trans(genls(tClazzPig,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535569).
lisp_trans(documentation(tClazzPig,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","raised","for","pork",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535624).
lisp_trans(genls(tClazzDonkey,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535718).
lisp_trans(documentation(tClazzDonkey,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","used","for","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535779).
lisp_trans(genls(tClazzGastropod,tClazzMollusk),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535875).
lisp_trans(documentation(tClazzGastropod,vEnglishLanguage,s("A","#$Mollusk","with","a","distinct","head","that","has","no","shell","(","e",".","g",".","slugs",")","or","a","univalve","shell","(","e",".","g",".","snails",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':535904).
lisp_trans(genls(tClazzMule,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536049).
lisp_trans(genls(tClazzMule,tSumoDomesticAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536078).
lisp_trans(documentation(tClazzMule,vEnglishLanguage,s("The","product","of","a","#$Male","#$Donkey","and","a","#$Female","#$Horse",".","#$Mules","are","always","sterile",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536109).
lisp_trans(=>(tClazzMule(MULE),exists([DONKEY,HORSE],and(father(MULE,DONKEY),tClazzDonkey(DONKEY),mother(MULE,HORSE),tClazzHorse(HORSE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536236).
lisp_trans(=>(tClazzMule(MULE),not(capability(actSexualReproduction,agent,MULE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536423).
lisp_trans(genls(tClazzSheep,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536510).
lisp_trans(genls(tClazzSheep,tSumoDomesticAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536540).
lisp_trans(documentation(tClazzSheep,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","bred","for","its","wool","and","for","its","meat","(","known","as","mutton",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536572).
lisp_trans(genls(tSumoLamb,tClazzSheep),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536706).
lisp_trans(documentation(tSumoLamb,vEnglishLanguage,s("A","young","#$Sheep",",","i",".","e",".","a","#$Sheep","that","is","#$NonFullyFormed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536728).
lisp_trans(<=>(tSumoLamb(L),and(tClazzSheep(L),sumoAttribute(L,tSumoNonFullyFormed))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536826).
lisp_trans(genls(tClazzCow,tSumoHoofedMammal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536920).
lisp_trans(genls(tClazzCow,tSumoDomesticAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536948).
lisp_trans(documentation(tClazzCow,vEnglishLanguage,s("A","domesticated","#$HoofedMammal","that","is","raised","for","milk","and","beef",",","and","is","also","used","for","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':536978).
lisp_trans(genls(tSumoCalf,tClazzCow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537109).
lisp_trans(documentation(tSumoCalf,vEnglishLanguage,s("A","young","#$Cow",",","i",".","e",".","a","#$Cow","that","is","#$NonFullyFormed",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537129).
lisp_trans(<=>(tSumoCalf(C),and(tClazzCow(C),sumoAttribute(C,tSumoNonFullyFormed))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537222).
lisp_trans(genls(tSumoBull,tClazzCow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537314).
lisp_trans(documentation(tSumoBull,vEnglishLanguage,s("A","#$Cow","that","is","#$Male",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537334).
lisp_trans(<=>(tSumoBull(B),and(tClazzCow(B),sumoAttribute(B,tMale))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537397).
lisp_trans(genls(tSumoFemaleCow,tClazzCow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537479).
lisp_trans(documentation(tSumoFemaleCow,vEnglishLanguage,s("A","#$Cow","that","is","#$Female",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537504).
lisp_trans(<=>(tSumoFemaleCow(COW),and(tClazzCow(COW),sumoAttribute(COW,tFemale))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537575).
lisp_trans(genls(mobPoultry,tClazzBird),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537807).
lisp_trans(genls(tClazzChicken,mobPoultry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537831).
lisp_trans(documentation(tClazzChicken,vEnglishLanguage,s("A","subclass","of","#$Bird","that","is","raised","for","its","meat","and","for","its","eggs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537858).
lisp_trans(genls(tSumoHen,tClazzChicken),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537969).
lisp_trans(documentation(tSumoHen,vEnglishLanguage,s("A","#$Female","#$Chicken",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':537992).
lisp_trans(<=>(tSumoHen(H),and(tClazzChicken(H),sumoAttribute(H,tFemale))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538053).
lisp_trans(genls(tSumoRooster,tClazzChicken),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538140).
lisp_trans(documentation(tSumoRooster,vEnglishLanguage,s("A","#$Male","#$Chicken",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538167).
lisp_trans(<=>(tSumoRooster(R),and(tClazzChicken(R),sumoAttribute(R,tMale))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538230).
lisp_trans(documentation(tClazzDuck,vEnglishLanguage,s("A","subclass","of","#$Bird","with","webbed","feet","and","a","large","bill",".","Some","ducks","live","in","the","wild",",","and","some","are","raised","for","meat","and","/","or","eggs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538319).
lisp_trans(genls(tClazzDuck,mobPoultry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538487).
lisp_trans(genls(tSumoGoose,mobPoultry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538512).
lisp_trans(documentation(tSumoGoose,vEnglishLanguage,s("A","subclass","of","#$Bird","with","webbed","feet","and","a","long","neck","and","a","large","body",".","These","#$Birds","are","often","raised","for","their","#$Meat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538537).
lisp_trans(genls(tClazzOwl,tClazzBird),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538701).
lisp_trans(documentation(tClazzOwl,vEnglishLanguage,s("A","nocturnal","bird","of","prey","with","a","large","head","and","forward","-","facing","eyes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538721).
lisp_trans(genls(tClazzPigeon,tClazzBird),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538829).
lisp_trans(documentation(tClazzPigeon,vEnglishLanguage,s("A","subclass","of","#$Bird","with","a","stout","body","and","short","legs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538852).
lisp_trans(genls(tClazzVulture,tClazzBird),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538949).
lisp_trans(documentation(tClazzVulture,vEnglishLanguage,s("A","diurnal","bird","of","prey","with","a","bald","head","that","feeds","on","carrion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':538973).
lisp_trans(genls(tPartTypeFeather,tSumoAnimalAnatomicalStructure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539080).
lisp_trans(genls(tPartTypeFeather,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539125).
lisp_trans(documentation(tPartTypeFeather,vEnglishLanguage,s("Each","instance","of","this","class","is","one","of","the","structures","that","make","up","the","external","covering","of","#$Birds",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539153).
lisp_trans(=>(tPartTypeFeather(F),exists([B],and(tClazzBird(B),part(F,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539296).
lisp_trans(rtBinaryPredicate(meatOfAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539396).
lisp_trans(documentation(meatOfAnimal,vEnglishLanguage,s("(","#$meatOfAnimal","?","MEATCLASS","?","ANIMALCLASS",")","means","that","every","instance","of","?","MEATCLASS","was","once","part","of","some","instance","of","?","ANIMALCLASS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539450).
lisp_trans(argGenl(meatOfAnimal,1,tMeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539626).
lisp_trans(argGenl(meatOfAnimal,2,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':539663).
lisp_trans(=>(and(meatOfAnimal(MEAT,ANIMAL),isa(M,MEAT)),exists([TIME,A],and(isa(A,ANIMAL),finishes(TIME,uWhenFn(A)),holdsDuring(TIME,part(M,A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540090).
lisp_trans(genls(tBeef,tMeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540304).
lisp_trans(documentation(tBeef,vEnglishLanguage,'Meat that was originally part of a #$Cow.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540325).
lisp_trans(meatOfAnimal(tBeef,tClazzCow),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540408).
lisp_trans(documentation(tSumoChickenMeat,vEnglishLanguage,'Meat that was originally part of a #$Chicken.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540433).
lisp_trans(genls(tSumoChickenMeat,tMeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540527).
lisp_trans(meatOfAnimal(tSumoChickenMeat,tClazzChicken),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540555).
lisp_trans(genls(tPork,tMeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540590).
lisp_trans(documentation(tPork,vEnglishLanguage,'Meat that was originally part of a #$Pig.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540611).
lisp_trans(meatOfAnimal(tPork,tClazzPig),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540694).
lisp_trans(genls(tSumoMouse,tClazzRodent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540943).
lisp_trans(documentation(tSumoMouse,vEnglishLanguage,s("A","#$Rodent","that","has","a","hairless","tail","like","a","rat","but","that","is","smaller","than","a","#$Rat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':540967).
lisp_trans(genls(tClazzRat,tClazzRodent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541090).
lisp_trans(documentation(tClazzRat,vEnglishLanguage,s("A","#$Rodent","that","has","a","hairless","tail","like","a","#$Mouse","but","that","is","larger","than","a","#$Mouse",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541112).
lisp_trans(genls(tClazzRabbit,tClazzRodent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541238).
lisp_trans(documentation(tClazzRabbit,vEnglishLanguage,s("A","burrowing","#$Rodent","with","a","short","tail","and","long","ears",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541263).
lisp_trans(genls(tClazzSquirrel,tClazzRodent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541359).
lisp_trans(documentation(tClazzSquirrel,vEnglishLanguage,s("A","tree","-","dwelling","#$Rodent","with","a","bushy","tail",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541386).
lisp_trans(genls(tHay,tFodder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541474).
lisp_trans(documentation(tHay,vEnglishLanguage,'Grass that has been cut and cured for use as #$Fodder.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541496).
lisp_trans(=>(tHay(HAY),exists([MAKE,GRASS],and(actMaking(MAKE),resource(MAKE,GRASS),tSumoGrass(GRASS),result(MAKE,HAY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541592).
lisp_trans(genls(actCopying,actMaking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541788).
lisp_trans(documentation(actCopying,vEnglishLanguage,'Making a #$copy of something.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541814).
lisp_trans(=>(and(actCopying(COPY),resource(COPY,THING1),result(COPY,THING2)),copy(THING1,THING2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':541889).
lisp_trans(genls(actVacationing,tSumoRecreationOrExercise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542021).
lisp_trans(documentation(actVacationing,vEnglishLanguage,s("Taking","time","off","from","#$Working",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542065).
lisp_trans(=>(and(actVacationing(VACATION),actWorking(WORK),agent(VACATION,PERSON),agent(WORK,PERSON),tSumoHuman(PERSON)),not(overlapsTemporally(uWhenFn(VACATION),uWhenFn(WORK)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542144).
lisp_trans(documentation(uOccupationFn,vEnglishLanguage,s("(","OccupationFn","?","PROCESS",")","denotes","the","subclass","of","?","PROCESS","where","instances","of","?","PROCESS","are","performed","as","one","'s","occupation",",","i",".","e",".","as","part","of","a","#$FinancialTransaction","where","one","earns","money","for","the","performance","of","?","PROCESS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542384).
lisp_trans(rtUnaryFunction(uOccupationFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542650).
lisp_trans(argIsa(uOccupationFn,1,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542688).
lisp_trans(resultGenl(uOccupationFn,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542731).
lisp_trans(documentation(occupation,vEnglishLanguage,s("(","occupation","?","PERSON","?","TYPE",")","means","that","the","occupation","of","?","PERSON","is","?","TYPE",".","This","predicate","is","most","often","used","in","combination","with","the","function","#$OccupationFn",",","e",".","g",".","(","#$occupation","PoliceOfficerWilkins","(","#$OccupationFn","#$LawEnforcement",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':542782).
lisp_trans(rtBinaryPredicate(occupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543064).
lisp_trans(argIsa(occupation,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543102).
lisp_trans(argIsa(occupation,2,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543130).
lisp_trans(genls(actWorking,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543174).
lisp_trans(documentation(actWorking,vEnglishLanguage,s("Any","#$FinancialTransaction","where","someone","exchanges","his","/","her","labor","for","an","instance","of","#$CurrencyMeasure",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543214).
lisp_trans(genls(actFarming,actWorking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543361).
lisp_trans(documentation(actFarming,vEnglishLanguage,s("Operating","a","farm",",","e",".","g",".","planting","and","harvesting","crops",",","tending","livestock",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543388).
lisp_trans(=>(and(actFarming(FARMING),agent(FARMING,FARMER)),exists([FARM],and(tSumoFarm(FARM),holdsDuring(uWhenFn(FARMING),located(FARMER,FARM))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543510).
lisp_trans(genls(actServing,actWorking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543718).
lisp_trans(documentation(actServing,vEnglishLanguage,s("Working","as","a","waiter","or","servant",",","either","for","an","#$Organization","(","e",".","g",".","a","#$Restaurant",")","or","for","a","person","or","family",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543745).
lisp_trans(genls(tSumoSales,actWorking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543899).
lisp_trans(documentation(tSumoSales,vEnglishLanguage,s("Any","instance","of","#$Working","that","involves","#$Selling","or","trying","to","sell","items",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':543924).
lisp_trans(subAttribute(tSumoRetired,tSumoUnemployed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544041).
lisp_trans(documentation(tSumoRetired,vEnglishLanguage,s("Voluntary","unemployment","toward","the","end","of","one","'s","life",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544075).
lisp_trans(subAttribute(tSumoHousewife,tSumoUnemployed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544171).
lisp_trans(documentation(tSumoHousewife,vEnglishLanguage,s("A","role","occupied","by","a","wife","who","manages","the","home","while","her","husband","earns","income","for","the","family",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544207).
lisp_trans(=>(sumoAttribute(W,tSumoHousewife),exists([H],wife(W,H))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544347).
lisp_trans(actServicePosition(tSumoWaiter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544413).
lisp_trans(documentation(tSumoWaiter,vEnglishLanguage,'Waiter refers to the #$ServicePosition present in #$Restaurant that brings food from the kitchen to the customer\'s table'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544447).
lisp_trans(termFormat(vEnglishLanguage,tSumoWaiter,"waiter"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544611).
lisp_trans(=>(sumoAttribute(X,tSumoWaiter),tSumoHuman(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544657).
lisp_trans(=>(and(sumoAttribute(X,tSumoWaiter),tSumoHuman(X),employs(REST,X),tSumoRestaurant(REST),customer(CUST,REST),located(CUST,TABLE),tSumoTable(TABLE)),and(possesses(REST,KITCHEN),tSumoKitchenArea(KITCHEN),tSumoDiningArea(DINING),located(TABLE,DINING),hasPurpose(X,and(actCarrying(C),agent(C,X),origin(C,KITCHEN),destination(C,TABLE),patient(C,FOOD),isa(FOOD,uFoodForFn(tSumoHuman)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':544709).
lisp_trans(actServicePosition(mobMaid),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':545277).
lisp_trans(documentation(mobMaid,vEnglishLanguage,s("This","#$Attribute","describes","a","#$Woman","who","works","in","a","#$ServicePosition","that","entails","performing","various","domestic","tasks","(","cleaning",",","cooking",",","child","care",")","for","an","individual","or","family","over","an","extended","period","of","time",",","typically","months","or","years",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':545913).
lisp_trans(=>(holdsDuring(T1,sumoAttribute(MAID,mobMaid)),exists([SERVE],and(during(SERVE,T1),actServing(SERVE),agent(SERVE,MAID)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546294).
lisp_trans(genls(mobJanitor,actUnskilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546471).
lisp_trans(documentation(mobJanitor,vEnglishLanguage,s("Any","#$Position","which","involves","cleaning","a","#$Building","or","some","of","the","#$Rooms","within","a","#$Building",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546510).
lisp_trans(=>(and(mobJanitor(J),sumoAttribute(P,J)),occupation(P,uOccupationFn(actWashing))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546650).
lisp_trans(genls(tSumoTheaterProfession,tSumoEntertainmentProfession),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546819).
lisp_trans(documentation(tSumoTheaterProfession,vEnglishLanguage,s("Instances","of","this","#$Class","describe","the","#$Positions","of","people","whose","work","involves","putting","on","plays","(","theatrical","performanes",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':546886).
lisp_trans(tSumoFilmMakingProfession(tSumoFilmDirector),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547076).
lisp_trans(documentation(tSumoFilmDirector,vEnglishLanguage,s("A","#$Position","that","describes","a","person","who","directs","#$MotionPictures","as","a","profession",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547134).
lisp_trans(genls(actFilmMaking,tSumoContentDevelopment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547265).
lisp_trans(documentation(actFilmMaking,vEnglishLanguage,'ContentDevelopment where the result is a  #$MotionPicture.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547306).
lisp_trans(=>(actFilmMaking(FM),exists([M,F],and(tSumoMotionPicture(M),result(FM,M),tObjectPhotographicFilm(F),resource(FM,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547412).
lisp_trans(genls(tSumoFilmMakingProfession,tSumoEntertainmentProfession),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547592).
lisp_trans(documentation(tSumoFilmMakingProfession,vEnglishLanguage,'Positions which involve #$FilmMaking,  i.e. acting in films, directing films, producing films, etc.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547648).
lisp_trans(=>(and(tSumoFilmMakingProfession(P),sumoAttribute(H,P)),occupation(H,uOccupationFn(actFilmMaking))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547805).
lisp_trans(tSumoFilmMakingProfession(tSumoFilmProducer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547937).
lisp_trans(documentation(tSumoFilmProducer,vEnglishLanguage,s("A","#$Position","that","describes","a","person","who","produces","#$MotionPictures","as","a","profession",",","i",".","e",".",",","who","arranges","the","financing","for","a","#$MotionPicture","and","supervises","its","production",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':547995).
lisp_trans(rtBinaryPredicate(directed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548213).
lisp_trans(argIsa(directed,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548249).
lisp_trans(argIsa(directed,2,tSumoMotionPicture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548275).
lisp_trans(documentation(directed,vEnglishLanguage,s("(","directed","?","DIRECTOR","?","MOVIE",")","means","that","the","#$Human","?","DIRECTOR","was","in","charge","of","the","#$FilmMaking","#$Process","that","produced","the","#$MotionPicture","?","MOVIE")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548309).
lisp_trans(=>(directed(DIRECTOR,MOVIE),exists([FILMMAKING,FILMCREW],and(actFilmMaking(FILMMAKING),tGroupedOrganization(FILMCREW),leader(FILMCREW,DIRECTOR),agent(FILMMAKING,FILMCREW),result(FILMMAKING,MOVIE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548500).
lisp_trans(actSkilledOccupation(tSumoCoach),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548766).
lisp_trans(documentation(tSumoCoach,vEnglishLanguage,s("Any","occupation","that","involves","training","an","athlete","or","a","sports","team",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548801).
lisp_trans(actSkilledOccupation(tSumoGameReferee),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548923).
lisp_trans(documentation(tSumoGameReferee,vEnglishLanguage,s("This","#$Attribute","describes","a","person","who","adjudicates","#$Maneuvers","in","a","#$Game",",","i",".","e",".",",","who","decides","whether","or","not","the","#$Maneuvers","are","permitted","by","the","rules","of","the","#$Game",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':548977).
lisp_trans(tSumoOccupationalTrade(mobCarpenter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549192).
lisp_trans(documentation(mobCarpenter,vEnglishLanguage,s("Any","occupation","that","involves","creating","and","repairing","structural","and","decorative","portions","of","#$Buildings","that","are","made","chiefly","of","#$Wood",".","This","does","not","include","plumbing",",","roofing",",","electrical",",","foundation","and","site","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549231).
lisp_trans(=>(sumoAttribute(P,mobCarpenter),hasSkill(tSumoCarpentry,P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549490).
lisp_trans(genls(tSumoCarpentry,actMaking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549549).
lisp_trans(documentation(tSumoCarpentry,vEnglishLanguage,'Making #$Buildings out of #$Wood.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549577).
lisp_trans(=>(tSumoCarpentry(C),exists([B],and(tPlaceLikeBuilding(B),tWood(W),part(W,B),result(C,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549657).
lisp_trans(rtBinaryPredicate(constructionPeriod),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549809).
lisp_trans(argIsa(constructionPeriod,1,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549855).
lisp_trans(argIsa(constructionPeriod,2,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549904).
lisp_trans(documentation(constructionPeriod,vEnglishLanguage,s("(","constructionPeriod","?","OBJECT","?","INTERVAL",")","means","that","some","#$StationaryArtifact","?","OBJECT","was","built","over","#$TimeInterval","?","INTERVAL")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':549947).
lisp_trans(termFormat(vEnglishLanguage,constructionPeriod,s("construction","period")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550125).
lisp_trans(=>(constructionPeriod(OBJECT,INTERVAL),holdsDuring(INTERVAL,exists([CONSTRUCTING],and(actConstructing(CONSTRUCTING),result(CONSTRUCTING,OBJECT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550195).
lisp_trans(rtBinaryPredicate(contractor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550400).
lisp_trans(argIsa(contractor,1,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550438).
lisp_trans(argIsa(contractor,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550479).
lisp_trans(documentation(contractor,vEnglishLanguage,s("(","contractor","?","BUILDING","?","AGENT",")","means","that","some","#$Agent","?","AGENT","has","a","contract","with","another","?","AGENT","to","build","a","#$StationaryArtifact","for","the","agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550507).
lisp_trans(=>(contractor(BUILDING,CONTRACTOR),exists([CONTRACT,AGENT],and(sumoProperty(CONTRACT,cwContract),partyToAgreement(AGENT,CONTRACT),partyToAgreement(CONTRACTOR,CONTRACT),confersObligation(exists([CONSTRUCT,BUILDING2],and(actConstructing(CONSTRUCT),agent(CONSTRUCT,CONTRACTOR),result(CONSTRUCT,BUILDING2),tObjectStationaryArtifact(BUILDING2))),AGENT,CONTRACTOR)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':550698).
lisp_trans(genls(actAgriculture,actMaintaining),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551205).
lisp_trans(documentation(actAgriculture,vEnglishLanguage,'Agriculture is a class of #$Processes  in which land, plants, or animals are cultivated in order to produce  food or other organic products.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551240).
lisp_trans(=>(actAgriculture(AGRO),exists([GROWTH],and(tSumoGrowth(GROWTH),subProcess(GROWTH,AGRO)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551430).
lisp_trans(tSumoOccupationalTrade(tSumoFarmHand),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551569).
lisp_trans(documentation(tSumoFarmHand,vEnglishLanguage,'OccupationalTrades which involve #$Agriculture.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551607).
lisp_trans(=>(sumoAttribute(P,tSumoFarmHand),exists([F],and(actAgriculture(F),agent(F,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551700).
lisp_trans(tSumoOccupationalTrade(mobPlumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551811).
lisp_trans(documentation(mobPlumber,vEnglishLanguage,s("Any","occupation","that","involves","installing",",","repairing",",","and","replacing","pipes","and","pipe","fixtures",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':551848).
lisp_trans(tSumoOccupationalTrade(mobPotter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552400).
lisp_trans(documentation(mobPotter,vEnglishLanguage,s("Any","occupation","that","involves","the","creation","of","#$Pottery",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552436).
lisp_trans(=>(sumoAttribute(H,mobPotter),exists([M,P],and(tPottery(P),actMaking(M),agent(M,H),result(M,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552534).
lisp_trans(genls(actReligiousPosition,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552689).
lisp_trans(documentation(actReligiousPosition,vEnglishLanguage,s("Any","#$Position","within","a","#$ReligousOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552727).
lisp_trans(=>(and(occupiesPosition(H,P,O),actReligiousPosition(P)),tGroupedReligiousOrganization(O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552828).
lisp_trans(tSumoProfession(mobCleric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552954).
lisp_trans(actReligiousPosition(mobCleric),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':552996).
lisp_trans(documentation(mobCleric,vEnglishLanguage,s("The","profession","of","being","in","charge","of","or","ministering","to","a","#$ReligousOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':553032).
lisp_trans(actReligiousPosition(tSumoDeacon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':553344).
lisp_trans(subAttribute(tSumoDeacon,timePartTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':553380).
lisp_trans(documentation(tSumoDeacon,vEnglishLanguage,s("Any","#$Position","within","a","#$ReligiousOrganization","that","is","held","by","a","layman",",","which","is","part","-","time",",","and","which","involves","assisting","a","#$Cleric",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':553419).
lisp_trans(=>(holdsDuring(TIME,and(occupiesPosition(PERSON,tSumoDeacon,ORG),tGroupedReligiousOrganization(ORG))),exists([C],holdsDuring(TIME,and(occupiesPosition(C,mobCleric,ORG),subordinateInOrganization(ORG,PERSON,C))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':553878).
lisp_trans(actSkilledOccupation(tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554152).
lisp_trans(actGovernmentPosition(tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554195).
lisp_trans(documentation(tSumoPoliceOfficer,vEnglishLanguage,s("The","profession","of","being","a","police","officer",",","i",".","e",".","working","for","a","law","enforcement","agency","that","is","part","of","a","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554239).
lisp_trans(=>(sumoAttribute(P,tSumoPoliceOfficer),hasSkill(tSumoPlacingUnderArrest,P)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554404).
lisp_trans(subAttribute(tSumoPoliceCaptain,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554476).
lisp_trans(documentation(tSumoPoliceCaptain,vEnglishLanguage,s("A","#$PoliceOfficer","who","is","in","charge","of","a","precinct",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554519).
lisp_trans(subAttribute(mobPoliceSergeant,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554618).
lisp_trans(documentation(mobPoliceSergeant,vEnglishLanguage,s("A","#$PoliceOfficer","with","the","rank","of","sergeant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554662).
lisp_trans(subAttribute(mobSheriff,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554757).
lisp_trans(documentation(mobSheriff,vEnglishLanguage,s("A","#$PoliceOfficer","whose","jurisdiction","is","a","#$County",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554794).
lisp_trans(subAttribute(tSumoMarshal,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554889).
lisp_trans(documentation(tSumoMarshal,vEnglishLanguage,s("A","#$PoliceOfficer","whose","responsibility","is","to","enforce","the","decisions","of","a","law","court",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':554926).
lisp_trans(subAttribute(tSumoDeputy,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555053).
lisp_trans(documentation(tSumoDeputy,vEnglishLanguage,s("A","#$Position","which","authorizes","the","holder","of","the","position","to","act","as","the","sheriff","when","the","sheriff","is","not","available",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555089).
lisp_trans(actGovernmentPosition(tSumoCoroner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555246).
lisp_trans(documentation(tSumoCoroner,vEnglishLanguage,s("A","#$GovernmentPosition","who","investigates","deaths","that","are","suspected","of","being","due","to","something","other","than","natural","causes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555284).
lisp_trans(subAttribute(tSumoPoliceDetective,tSumoPoliceOfficer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555446).
lisp_trans(documentation(tSumoPoliceDetective,vEnglishLanguage,s("The","#$Profession","of","being","a","police","detective",",","i",".","e",".","being","a","#$PoliceOfficer","whose","duties","include","the","investigation","of","crimes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555491).
lisp_trans(actSkilledOccupation(tSumoPrivateDetective),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555670).
lisp_trans(contraryAttribute(tSumoPrivateDetective,tSumoPoliceDetective),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555716).
lisp_trans(documentation(tSumoPrivateDetective,vEnglishLanguage,s("The","#$Profession","of","being","a","private","detective",",","i",".","e",".","a","detective","who","can","be","hired","for","a","fee","to","investigate","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555769).
lisp_trans(tSumoProfession(mobLawyer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555939).
lisp_trans(tSumoProfession(tSumoAttorney),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555968).
lisp_trans(subAttribute(tSumoAttorney,mobLawyer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':555999).
lisp_trans(documentation(mobLawyer,vEnglishLanguage,s("This","#$Attribute","describes","a","person","whose","#$Profession","is","the","practice","of","law",",","whether","as","a","#$Judge","or","as","a","legal","advocate",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556305).
lisp_trans(=>(sumoAttribute(P,mobLawyer),hasExpertise(P,tSumoFieldOfLaw)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556470).
lisp_trans(subAttribute(mobAttorneyGeneral,tSumoAttorney),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556531).
lisp_trans(actGovernmentPosition(mobAttorneyGeneral),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556571).
lisp_trans(documentation(mobAttorneyGeneral,vEnglishLanguage,s("This","#$Attribute","designates","the","chief","law","officer","of","a","#$GeopoliticalArea",",","usually","a","#$Nation","or","#$StateOrProvince",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556630).
lisp_trans(subAttribute(tSumoPublicDefender,tSumoAttorney),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556798).
lisp_trans(actGovernmentPosition(tSumoPublicDefender),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556837).
lisp_trans(documentation(tSumoPublicDefender,vEnglishLanguage,s("An","#$Attorney","who","defends","criminal","cases","for","a","#$GovernmentOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':556882).
lisp_trans(subAttribute(tSumoPublicProsecutor,tSumoAttorney),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557006).
lisp_trans(actGovernmentPosition(tSumoPublicProsecutor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557047).
lisp_trans(documentation(tSumoPublicProsecutor,vEnglishLanguage,s("An","#$Attorney","who","prosecutes","criminal","cases","for","a","#$GovernmentOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557094).
lisp_trans(subAttribute(tClazzJudge,tSumoAttorney),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557223).
lisp_trans(actGovernmentPosition(tClazzJudge),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557253).
lisp_trans(documentation(tClazzJudge,vEnglishLanguage,s("An","#$Attorney","who","has","the","power","of","deciding","legal","cases",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557289).
lisp_trans(=>(occupiesPosition(P,tClazzJudge,O),modalAttribute(exists([D],and(tSumoLegalDecision(D),agent(D,P))),cwPermission)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557387).
lisp_trans(=>(occupiesPosition(P,tClazzJudge,O),tGroupedJudicialOrganization(O)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557548).
lisp_trans(subAttribute(mobProfessor,mobTeacher),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557624).
lisp_trans(documentation(mobProfessor,vEnglishLanguage,s("The","#$Profession","of","being","a","#$teacher","at","a","#$PostSecondarySchool",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557657).
lisp_trans(=>(and(mobProfessor(PROF),occupiesPosition(PERSON,PROF,ORG)),and(teacher(PROF,ORG),tSumoPostSecondarySchool(ORG))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557769).
lisp_trans(tSumoProfession(tSumoMedicalDoctor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557940).
lisp_trans(documentation(tSumoMedicalDoctor,vEnglishLanguage,s("The","#$Profession","of","being","a","medical","doctor",",","i",".","e",".","having","attended","medical","school","and","being","licensed","to","practice","medicine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':557976).
lisp_trans(=>(sumoAttribute(DOCTOR,tSumoMedicalDoctor),exists([PROCESS1,PROCESS2],and(genls(PROCESS1,actDiagnosticProcess),genls(PROCESS2,actTherapeuticProcess),capability(PROCESS1,agent,DOCTOR),capability(PROCESS2,agent,DOCTOR)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':558147).
lisp_trans(subAttribute(mobSurgeon,tSumoMedicalDoctor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':558425).
lisp_trans(documentation(mobSurgeon,vEnglishLanguage,s("The","#$Profession","of","being","a","surgeon",",","i",".","e",".","being","a","medical","doctor","who","specializes","in","performing","surgical","operations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':558462).
lisp_trans(documentation(tSumoCircumision,vEnglishLanguage,'Removing the foreskin of the penis.  This is usually performed on infants, but is occasionally performed on adolescents and adults, either for medical reasons, or after religious conversion. It is often conducted as a religious rite, since it is prescribed by both the #$Jewish and #$Muslim religions, although it is prevalent also as a social norm in different nations.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':558622).
lisp_trans(genls(tSumoCircumision,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559041).
lisp_trans(genls(tSumoCircumision,actSurgery),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559073).
lisp_trans(tSumoProfession(tSumoNewsReporter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559105).
lisp_trans(documentation(tSumoNewsReporter,vEnglishLanguage,s("The","#$Profession","of","being","a","news","reporter",",","i",".","e",".","investigating","and","reporting",",","in","a","publication","or","broadcast","program",",","current","events",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559140).
lisp_trans(=>(sumoAttribute(H,tSumoNewsReporter),exists([T,EV],and(actProcess(EV),overlapsTemporally(uWhenFn(EV),uWhenFn(H)),authors(H,T),refers(T,EV)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559321).
lisp_trans(subAttribute(tSumoArtCritic,tClazzJournalist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559530).
lisp_trans(documentation(tSumoArtCritic,vEnglishLanguage,s("The","#$Profession","of","reporting","and","critiquing","current","#$ArtWorks",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559566).
lisp_trans(=>(sumoAttribute(H,tSumoArtCritic),exists([T,AW],and(tSumoArtWork(AW),authors(H,T),refers(T,AW)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559677).
lisp_trans(tSumoProfession(mobAccountant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559813).
lisp_trans(documentation(mobAccountant,vEnglishLanguage,s("The","#$Profession","of","being","an","#$Accountant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559846).
lisp_trans(=>(sumoAttribute(X,mobAccountant),capability(actCalculating,agent,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':559934).
lisp_trans(tFieldOfStudy(tSumoLiterature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561214).
lisp_trans(documentation(tSumoLiterature,vEnglishLanguage,s("The","study","of","literature",",","i",".","e",".","instances","of","#$FictionalText","that","are","regarded","as","having","special","merit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561249).
lisp_trans(tFieldOfStudy(iMathematics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561398).
lisp_trans(documentation(iMathematics,vEnglishLanguage,s("The","#$FieldOfStudy","dealing","with","quantities","and","their","relations","to","one","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561434).
lisp_trans(tFieldOfStudy(tSumoInteriorDesign),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561561).
lisp_trans(documentation(tSumoInteriorDesign,vEnglishLanguage,s("The","#$FieldOfStudy","of","designing","the","interiors","of","#$Buildings",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561600).
lisp_trans(genls(iScience,tFieldOfStudy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561713).
lisp_trans(documentation(iScience,vEnglishLanguage,s("Any","#$FieldOfStudy","which","tests","theories","on","the","basis","of","careful","observations","and","/","or","experiments","and","which","has","a","cumulative","body","of","results",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561745).
lisp_trans(genls(iSocialScience,iScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561930).
lisp_trans(documentation(iSocialScience,vEnglishLanguage,s("Any","#$Science","which","studies","human","behavior",",","either","in","the","aggregate",",","as","do",",","for","example",",","#$Economics","and","#$Linguistics",",","or","with","respect","to","the","individual",",","as","does","#$Psychology",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':561963).
lisp_trans(iSocialScience(iPoliticalScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562191).
lisp_trans(documentation(iPoliticalScience,vEnglishLanguage,s("The","field","of","political","science",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562233).
lisp_trans(iSocialScience(iAnthropology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562317).
lisp_trans(documentation(iAnthropology,vEnglishLanguage,s("The","study","of","humanity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562355).
lisp_trans(iScience(tSumoActuaryScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562426).
lisp_trans(documentation(tSumoActuaryScience,vEnglishLanguage,s("Actuarial","#$Science","is","the","discipline","that","applies","mathematical","(","#$MathematicalMethod",")","and","statistical","methods","to","assess","risk","in","the","insurance","(","#$InsuranceCompany",")","and","finance","(","#$FinancialCompany",")","industries",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562460).
lisp_trans(tFieldOfStudy(tSumoArcheology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562719).
lisp_trans(documentation(tSumoArcheology,vEnglishLanguage,s("Archeology","is","a","#$FieldOfStudy",",","its","#$Arguments","are","refering","to","#$earlier","discoverings","of","old","#$Objects","burried","#$below","the","#$surface","of","#$LandArea","or","a","#$BodyOfWater",".","Note","that","the","minimal","age","of","the","#$Object","is","set","arbitrarily",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':562754).
lisp_trans(=>(and(tSumoArgument(X),eventReasoning(R),subProposition(X,tSumoArcheology),realization(R,X)),exists([D,S,O,T],and(actDiscovering(D),tSumoObject(O),patient(D,O),refers(R,D),earlier(uWhenFn(D),uWhenFn(R)),age(O,T),greaterThan(T,uMeasureFn(50,actYearDuration)),holdsDuring(uImmediatePastFn(uWhenFn(D)),or(and(surface(S,W),tPlaceLikeBodyOfWater(W),orientation(O,S,tSumoBelow)),and(surface(S,L),tSumoLandArea(L),orientation(O,S,tSumoBelow))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':563029).
lisp_trans(tFieldOfStudy(tSumoArchitecture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':563747).
lisp_trans(documentation(tSumoArchitecture,vEnglishLanguage,s("The","#$FieldOfStudy","of","designing","#$Buildings",",","i",".","e",".","creating","#$Blueprints","for","#$Buildings",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':563784).
lisp_trans(=>(hasExpertise(H,tSumoArchitecture),exists([D,P,B],and(tSumoContentDevelopment(D),agent(D,H),result(D,P),tObjectBlueprint(P),represents(P,B),tPlaceLikeBuilding(B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':563922).
lisp_trans(iScience(iAstronomy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564157).
lisp_trans(documentation(iAstronomy,vEnglishLanguage,s("Astronomy","is","a","natural","#$Science","that","deals","with","the","study","of","celestial","objects","(","or","#$AstronomicalBody",")",",","such","as","#$Star","s",",","#$Planet","s",",","comets",",","nebulae",",","star","clusters","and","galaxies","and","phenomena","that","originate","outside","the","(","#$PlanetEarth",")","Earth","'s","#$Atmosphere")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564186).
lisp_trans(iScience(iComputerScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564488).
lisp_trans(documentation(iComputerScience,vEnglishLanguage,'ComputerScience is the study of the theoretical foundations of information and computation and of practical techniques for their implementation and application in computer systems.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564523).
lisp_trans(iSocialScience(iEconomics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564757).
lisp_trans(documentation(iEconomics,vEnglishLanguage,s("The","field","of","economics",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564792).
lisp_trans(iScience(iGeography),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564861).
lisp_trans(documentation(iGeography,vEnglishLanguage,s("Geography","is","the","science","that","studies","the","lands",",","features",",","inhabitants",",","and","phenomena","of","Earth",".","Also","Earth","'s","physical","environment","and","human","habitat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':564890).
lisp_trans(subField(iCartography,iGeography),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565084).
lisp_trans(iScience(iCartography),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565117).
lisp_trans(documentation(iCartography,vEnglishLanguage,s("Cartography","is","the","study","and","practice","of","making","#$Map","s",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565148).
lisp_trans(iScience(iGeology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565252).
lisp_trans(documentation(iGeology,vEnglishLanguage,s("Geology","is","the","science","comprising","the","study","of","solid","(","#$PlanetEarth",")","Earth","and","the","processes","by","which","it","evolves",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565279).
lisp_trans(iScience(iLibraryScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565436).
lisp_trans(documentation(iLibraryScience,vEnglishLanguage,'Library science (or Library and Information science) is an interdisciplinary field that applies the practices, perspectives, and tools of management, information technology, education, and other areas to libraries.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565470).
lisp_trans(iSocialScience(iLinguistics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565834).
lisp_trans(documentation(iLinguistics,vEnglishLanguage,s("The","field","of","linguistics",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565871).
lisp_trans(iSocialScience(iPsychology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565944).
lisp_trans(documentation(iPsychology,vEnglishLanguage,s("The","field","of","psychology",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':565980).
lisp_trans(iScience(iBiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566051).
lisp_trans(documentation(iBiology,vEnglishLanguage,s("The","study","of","the","classification",",","development",",","and","functioning","of","#$Organisms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566078).
lisp_trans(subField(iPhysiology,iBiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566200).
lisp_trans(iScience(iPhysiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566230).
lisp_trans(documentation(iPhysiology,vEnglishLanguage,s("The","part","of","#$Biology","dealing","with","the","functioning","of","#$Organisms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566260).
lisp_trans(subField(tSumoMedicalScience,iBiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566374).
lisp_trans(iScience(tSumoMedicalScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566408).
lisp_trans(documentation(tSumoMedicalScience,vEnglishLanguage,s("The","field","of","medicine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566442).
lisp_trans(subField(tSumoVeterinaryScience,tSumoMedicalScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566515).
lisp_trans(iScience(tSumoVeterinaryScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566559).
lisp_trans(documentation(tSumoVeterinaryScience,vEnglishLanguage,s("is","the","branch","of","science","that","deals","with","the","application","of","medical",",","surgical",",","public","health",",","dental",",","diagnostic",",","and","therapeutic","principles","to","non","-","human","animals",",","including","wildlife","and","domesticated","animals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566596).
lisp_trans(subField(iBotany,iBiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566857).
lisp_trans(iScience(iBotany),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566883).
lisp_trans(documentation(iBotany,vEnglishLanguage,s("Botany",",","plant","science","(","s",")",",","or","plant","biology","is","a","branch","of","#$Biology","that","involves","the","scientific","study","of","plant","life",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':566909).
lisp_trans(subField(iZoology,iBiology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567069).
lisp_trans(iScience(iZoology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567096).
lisp_trans(documentation(iZoology,vEnglishLanguage,s("Zoology","is","the","branch","of","#$Biology","that","relates","to","the","animal","kingdom",",","including","the","structure",",","embryology",",","evolution",",","classification",",","habits",",","and","distribution","of","all","animals",",","both","living","and","extinct",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567123).
lisp_trans(iScience(iBiochemistry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567367).
lisp_trans(iScience(iChemistry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567399).
lisp_trans(documentation(iChemistry,vEnglishLanguage,s("The","study","of","the","compositions",",","properties",",","and","reactions","of","#$Substances",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567428).
lisp_trans(iScience(iPaleontology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567548).
lisp_trans(documentation(iPaleontology,vEnglishLanguage,s("The","earth","science","that","studies","fossil","organisms","and","related","remains",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567580).
lisp_trans(iScience(iPhysics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567697).
lisp_trans(documentation(iPhysics,vEnglishLanguage,s("The","study","of","matter","and","energy","and","their","relations",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567724).
lisp_trans(iScience(actEngineering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567819).
lisp_trans(documentation(actEngineering,vEnglishLanguage,s("The","application","of","instances","of","#$Science","to","the","solution","of","practical","problems",",","i",".","e",".","the","creation","of","various","forms","of","technology",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':567850).
lisp_trans(iSocialScience(iSociology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568029).
lisp_trans(documentation(iSociology,vEnglishLanguage,s("Sociology","is","the","study","of","society",".","It","is","considered","one","of","the","#$SocialScience","s",",","together","with","Political","Science","and","Anthropology",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568064).
lisp_trans(tFieldOfStudy(iStatistics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568242).
lisp_trans(documentation(iStatistics,vEnglishLanguage,s("Statistics","is","the","study","of","the","collection",",","organization",",","analysis",",","and","interpretation","of","data",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568277).
lisp_trans(subField(tSumoElectronics,iPhysics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568418).
lisp_trans(subField(tSumoElectronics,actEngineering),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568449).
lisp_trans(tFieldOfStudy(tSumoElectronics),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568484).
lisp_trans(documentation(tSumoElectronics,vEnglishLanguage,s("The","branch","of","#$Physics","that","deals","with","the","theory","and","applications","of","electron","emissions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568520).
lisp_trans(tFieldOfStudy(iTheology),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568659).
lisp_trans(documentation(iTheology,vEnglishLanguage,s("The","systematic","study","of","religion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568692).
lisp_trans(=>(iTheology(X),exists([Y],and(actReligiousProcess(Y),refers(X,Y)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568769).
lisp_trans(tFieldOfStudy(iMilitaryScience),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568884).
lisp_trans(documentation(iMilitaryScience,vEnglishLanguage,s("The","study","of","the","principles","of","war",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':568924).
lisp_trans(tFieldOfStudy(tSumoHistory),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569011).
lisp_trans(documentation(tSumoHistory,vEnglishLanguage,s("The","recording","and","interpretation","of","past","events","involving","#$Humans",",","including","political","events","and","cultural","practices",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569043).
lisp_trans(tFieldOfStudy(iPhilosophy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569206).
lisp_trans(documentation(iPhilosophy,vEnglishLanguage,s("The","study","of","first","principles",",","including","epistemology",",","metaphysics",",","and","ethics",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569241).
lisp_trans(tFieldOfStudy(tSumoFieldOfLaw),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569368).
lisp_trans(documentation(tSumoFieldOfLaw,vEnglishLanguage,s("The","study","of","legal","principles","and","the","framework","of","national","and","/","or","international","laws",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569403).
lisp_trans(genlPreds(subField,subProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569537).
lisp_trans(rtTransitiveRelation(subField),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569575).
lisp_trans(rtIrreflexiveRelation(subField),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569614).
lisp_trans(argIsa(subField,1,tFieldOfStudy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569654).
lisp_trans(argIsa(subField,2,tFieldOfStudy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569687).
lisp_trans(documentation(subField,vEnglishLanguage,s("(","#$subField","?","FIELD1","?","FIELD2",")","means","that","?","FIELD1","is","a","proper","part","of","the","#$FieldOfStudy","?","FIELD2",".","For","example",",","#$Physiology","is","a","#$subField","of","#$Biology",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569720).
lisp_trans(rtBinaryPredicate(hasExpertise),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569919).
lisp_trans(argIsa(hasExpertise,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569959).
lisp_trans(argIsa(hasExpertise,2,tFieldOfStudy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':569989).
lisp_trans(documentation(hasExpertise,vEnglishLanguage,s("(","#$hasExpertise","?","PERSON","?","FIELD",")","means","that","?","PERSON","has","studied","the","#$FieldOfStudy","?","FIELD","and","is","regarded","as","an","expert",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570026).
lisp_trans(=>(hasExpertise(PERSON,FIELD),exists([LEARN],and(actLearning(LEARN),agent(LEARN,PERSON),realization(LEARN,FIELD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570194).
lisp_trans(rtBinaryPredicate(hasOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570371).
lisp_trans(argIsa(hasOccupation,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570412).
lisp_trans(argGenl(hasOccupation,2,actIntentionalProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570443).
lisp_trans(documentation(hasOccupation,vEnglishLanguage,s("(","#$hasOccupation","?","PERSON","?","WORK",")","means","that","?","PERSON","engages","in","activities","of","the","class","?","WORK","as","a","means","of","earning","a","living",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570495).
lisp_trans(=>(hasOccupation(PERSON,WORK),exists([INST],and(isa(INST,WORK),actWorking(INST),agent(INST,PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570669).
lisp_trans(genls(actBleeding,actAutonomicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570837).
lisp_trans(documentation(actBleeding,vEnglishLanguage,s("The","release","of","#$Blood","from","an","#$Animal","in","response","to","an","#$Injuring","of","some","sort",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':570874).
lisp_trans(=>(actBleeding(BLEED),exists([INJURY],and(actInjuring(INJURY),causes(INJURY,BLEED)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571002).
lisp_trans(=>(and(actBleeding(BLEED),experiencer(BLEED,ANIMAL)),tClazzAnimal(ANIMAL)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571142).
lisp_trans(=>(and(actBleeding(BLEED),experiencer(BLEED,ANIMAL)),exists([BLOOD],and(tPartTypeBlood(BLOOD),holdsDuring(uBeginFn(uWhenFn(BLEED)),part(BLOOD,ANIMAL)),holdsDuring(iTimeOf_EndFn(uWhenFn(BLEED)),not(part(BLOOD,ANIMAL)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571254).
lisp_trans(genls(actBlushing,actAutonomicProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571552).
lisp_trans(documentation(actBlushing,vEnglishLanguage,s("The","process","of","turning","red","in","response","to","a","stimulus","which","has","a","deep","emotional","effect",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571589).
lisp_trans(=>(and(actBlushing(B),experiencer(B,A)),exists([T1,T2,S1,S2],and(tSumoEmotionalState(S1),tSumoEmotionalState(S2),not(equal(S1,S2)),holdsDuring(T1,sumoAttribute(A,S1)),holdsDuring(T2,sumoAttribute(A,S2)),starts(uWhenFn(B),T2),finishes(uWhenFn(B),T1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':571721).
lisp_trans(genls(actAborting,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572099).
lisp_trans(documentation(actAborting,vEnglishLanguage,'Removing a human fetus from a #$Pregnant woman  in such a way that the fetus cannot survive.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572128).
lisp_trans(=>(and(actAborting(A),patient(A,W),tSumoWoman(W)),and(holdsDuring(uBeginFn(uWhenFn(A)),sumoAttribute(W,tSumoPregnant)),holdsDuring(iTimeOf_EndFn(uWhenFn(A)),not(sumoAttribute(W,tSumoPregnant))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572267).
lisp_trans(genls(tSumoClosingContract,actCommitting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572540).
lisp_trans(documentation(tSumoClosingContract,vEnglishLanguage,s("Completing","a","#$Contract","of","some","sort",",","e",".","g",".","the","purchase","of","a","house",",","closing","a","business","deal",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572578).
lisp_trans(=>(and(tSumoClosingContract(CLOSE),agent(CLOSE,AGENT),destination(CLOSE,CONTRACT)),partyToAgreement(CONTRACT,AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':572728).
lisp_trans(genls(actOpening,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573487).
lisp_trans(relatedInternalConcept(actOpening,actClosing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573514).
lisp_trans(documentation(actOpening,vEnglishLanguage,s("The","#$Class","of","#$Processes","where","an","aperture","is","created","in","an","#$Object",".","Note","that","the","aperture","may","be","created","intentionally",",","as","when","one","opens","a","door",",","or","unintentionally",",","as","when","the","ground","ruptures","in","a","seismic","event",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573556).
lisp_trans(genls(actClosing,actMotion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573823).
lisp_trans(documentation(actClosing,vEnglishLanguage,s("The","#$Class","of","#$Processes","where","an","aperture","is","closed","in","an","#$Object",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573850).
lisp_trans(genls(tSumoDiet,cwPlan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573965).
lisp_trans(documentation(tSumoDiet,vEnglishLanguage,s("A","#$Plan","regarding","what","one","is","allowed","to","eat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':573986).
lisp_trans(=>(and(tSumoDiet(D),realization(P,D)),exists([E],and(subProcess(E,P),actEating(E)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574072).
lisp_trans(genls(tPreparedFood,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574211).
lisp_trans(documentation(tPreparedFood,vEnglishLanguage,'PreparedFood refers to anything that  undergoes some process intended to result in an object that has #$Nutrient which can be  ingested by #$Animal, normally metabolized into energy and body tissue.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574243).
lisp_trans(termFormat(vEnglishLanguage,tPreparedFood,"food"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574491).
lisp_trans(=>(tPreparedFood(X),isa(X,uFoodForFn(tSumoOrganism))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574541).
lisp_trans(=>(tPreparedFood(X),exists([PROC],and(actIntentionalProcess(PROC),result(PROC,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574613).
lisp_trans(genls(tSolidFood,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574745).
lisp_trans(documentation(tSolidFood,vEnglishLanguage,'SolidFood refers to #$PreparedFood that  has #$Solid parts.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574779).
lisp_trans(termFormat(vEnglishLanguage,tSolidFood,s("solid","food")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574885).
lisp_trans(=>(tSolidFood(X),exists([ING],and(part(ING,X),sumoAttribute(ING,tSumoSolid)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':574938).
lisp_trans(genls(tSumoLiquidFood,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575048).
lisp_trans(documentation(tSumoLiquidFood,vEnglishLanguage,'LiquidFood refers to #$PreparedFood that  has no #$Solid parts, only #$Liquid parts, therefore this does not cover stews, root beer floats or other combinations of solid and liquid foods.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575083).
lisp_trans(termFormat(vEnglishLanguage,tSumoLiquidFood,s("liquid","food")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575319).
lisp_trans(=>(tSumoLiquidFood(X),not(exists([ING],and(part(ING,X),sumoAttribute(ING,tSumoSolid))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575374).
lisp_trans(genls(tSumoBeverage,tSumoLiquidFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575509).
lisp_trans(genls(tSumoBeverage,tSumoSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575540).
lisp_trans(disjointWith(tMeat,tSumoBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575570).
lisp_trans(documentation(tSumoBeverage,vEnglishLanguage,s("Any","food","that","is","ingested","by","#$Drinking",".","Note","that","this","class","is","disjoint","#$Meat","and","#$FruitOrVegetable",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575595).
lisp_trans(=>(tSumoBeverage(BEV),sumoAttribute(BEV,tSumoLiquid)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575746).
lisp_trans(=>(and(actDrinking(DRINK),patient(DRINK,BEV)),tSumoBeverage(BEV)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':575807).
lisp_trans(vtRelationalAttribute(vtCookedAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576272).
lisp_trans(documentation(vtCookedAttribute,vEnglishLanguage,'CookedAttribute describes how something is a product of #$Cooking.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576319).
lisp_trans(termFormat(vEnglishLanguage,vtCookedAttribute,"cooked"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576438).
lisp_trans(=>(sumoAttribute(FOOD,vtCookedAttribute),exists([PROC],and(actCooking(PROC),result(PROC,FOOD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576493).
lisp_trans(vtRelationalAttribute(vtRawAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576628).
lisp_trans(documentation(vtRawAttribute,vEnglishLanguage,'RawAttribute describes how cooking was not involved in the making of something'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576672).
lisp_trans(termFormat(vEnglishLanguage,vtRawAttribute,"raw"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576800).
lisp_trans(=>(sumoAttribute(FOOD,vtRawAttribute),isa(FOOD,uFoodForFn(tSumoOrganism))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576849).
lisp_trans(=>(sumoAttribute(FOOD,vtRawAttribute),not(exists([PROC],and(actCooking(PROC),result(PROC,FOOD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':576928).
lisp_trans(genls(actBaking,actCooking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577078).
lisp_trans(genls(actBaking,actHeating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577104).
lisp_trans(documentation(actBaking,vEnglishLanguage,s("Any","instance","of","#$Cooking","where","the","instrument","is","an","#$Oven",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577130).
lisp_trans(=>(actBaking(B),exists([O],and(tObjectOven(O),instrument(B,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577233).
lisp_trans(genls(tSumoBreadOrBiscuit,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577344).
lisp_trans(documentation(tSumoBreadOrBiscuit,vEnglishLanguage,s("Food","that","consists","largely","of","grain","flour","and","water",".","Note","that","this","class","covers","crackers",",","cookies",",","as","well","as","any","self","-","connected","instance","of","bread",",","whether","it","is","a","loaf",",","a","slice",",","a","chunk","of","bread",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577383).
lisp_trans(=>(tSumoBreadOrBiscuit(B),exists([D,BAKE],and(tDough(D),actBaking(BAKE),resource(BAKE,D),result(BAKE,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577639).
lisp_trans(genls(tObjectSandwich,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577814).
lisp_trans(documentation(tObjectSandwich,vEnglishLanguage,s("Any","food","which","consists","of","two","or","more","pieces","of","bread","and","some","sort","of","filling","between","the","two","pieces","of","bread",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':577847).
lisp_trans(=>(tObjectSandwich(S),exists([B1,B2,F],and(tSumoBreadOrBiscuit(B1),tSumoBreadOrBiscuit(B2),isa(F,uFoodForFn(tSumoHuman)),cycBetween(B1,F,B2),not(equal(B1,B2)),not(equal(B1,F)),not(equal(B2,F)),part(B1,S),part(B2,S),part(F,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578005).
lisp_trans(genls(tDough,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578348).
lisp_trans(genls(tDough,tMixture),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578378).
lisp_trans(documentation(tDough,vEnglishLanguage,s("A","#$Mixture","of","#$Flour",",","#$Water",",","and","possibly","other","ingredients","(","such","as","#$Butter","and","#$Salt",")",",","which","is","used","in","making","#$BreadOrBiscuits",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578403).
lisp_trans(=>(tDough(D),exists([F,W],and(tSumoFlour(F),tWater(W),part(F,D),part(W,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578583).
lisp_trans(genls(tObjectButter,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578730).
lisp_trans(documentation(tObjectButter,vEnglishLanguage,s("An","emulsion","of","fat","which","is","produced","by","churning","#$Milk",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578855).
lisp_trans(=>(tObjectButter(B),exists([C,M],and(actCooking(C),resource(C,M),tMilk(M),result(C,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':578953).
lisp_trans(genls(tSumoCerealGrain,tPartTypeSeed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579108).
lisp_trans(documentation(tSumoCerealGrain,vEnglishLanguage,s("Any","#$Seed","which","is","produced","by","the","cereal","grasses",",","e",".","g",".","rice",",","corn",",","wheat",",","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579242).
lisp_trans(genls(tSumoRiceGrain,tSumoCerealGrain),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579371).
lisp_trans(documentation(tSumoRiceGrain,vEnglishLanguage,s("A","#$CerealGrain","which","has","short","and","long","grain","varieties","and","which","is","usually","prepared","for","eating","by","steaming",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579404).
lisp_trans(genls(tSumoWheatGrain,tSumoCerealGrain),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579561).
lisp_trans(documentation(tSumoWheatGrain,vEnglishLanguage,s("A","long","#$CerealGrain","which","is","produced","by","certain","grasses","and","which","is","used","to","make","#$BreadOrBiscuits",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579595).
lisp_trans(genls(tSumoPea,tPartTypeSeed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579745).
lisp_trans(genls(tSumoPea,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579765).
lisp_trans(documentation(tSumoPea,vEnglishLanguage,s("The","edible","#$Seed","of","a","pea","plant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':579799).
lisp_trans(genls(tSumoFlour,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580074).
lisp_trans(genls(tSumoFlour,tGroupedPowder),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580104).
lisp_trans(documentation(tSumoFlour,vEnglishLanguage,s("A","#$Powder","that","is","prepared","from","#$CerealGrain",",","e",".","g",".","wheat","flour",",","rice","flour",",","etc",".","Flour","is","most","often","used","in","the","making","of","#$BreadOrBiscuits",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580128).
lisp_trans(=>(tSumoFlour(F),exists([P,C],and(actIntentionalProcess(P),resource(P,C),tSumoCerealGrain(C),result(P,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580315).
lisp_trans(genls(tHoney,tSumoAnimalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580487).
lisp_trans(genls(tHoney,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580520).
lisp_trans(documentation(tHoney,vEnglishLanguage,s("An","edible",",","sweet","#$Substance","produced","by","some","species","of","#$Bees",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580556).
lisp_trans(=>(tHoney(H),exists([P,B],and(actPhysiologicProcess(P),agent(P,B),tClazzBee(B),result(P,H)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580663).
lisp_trans(genls(tSumoCoconut,tSumoFruitOrVegetable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580824).
lisp_trans(genls(tSumoCoconut,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580860).
lisp_trans(documentation(tSumoCoconut,vEnglishLanguage,s("A","#$FruitOrVegetable","that","is","produced","by","a","type","of","palm","and","has","an","edible","white","meat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':580898).
lisp_trans(genls(tSumoMaizeGrain,tSumoCerealGrain),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':581684).
lisp_trans(documentation(tSumoMaizeGrain,vEnglishLanguage,s("A","#$CerealGrain","which","is","found","on","long","ears","of","a","#$Plant","native","to","the","Americas",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':581718).
lisp_trans(genls(tObjectSoupStock,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':581964).
lisp_trans(documentation(tObjectSoupStock,vEnglishLanguage,s("Food","which","is","prepared","by","reducing","#$Meat","and","/","or","#$FruitOrVegetables","to","a","translucent","broth","which","can","be","used","as","a","base","for","soups","or","sauces",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':581998).
lisp_trans(genls(tSumoCoffee,tSumoBeverage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582187).
lisp_trans(genls(tSumoCoffee,tPreparedFood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582214).
lisp_trans(documentation(tSumoCoffee,vEnglishLanguage,s("A","#$Beverage","which","is","prepared","by","infusing","ground",",","roasted","coffee","beans","into","hot","water",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582245).
lisp_trans(genls(tSumoApple,tSumoFruitOrVegetable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582376).
lisp_trans(genls(tSumoApple,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582410).
lisp_trans(documentation(tSumoApple,vEnglishLanguage,s("A","#$FruitOrVegetable","that","has","a","tart","to","sweet","taste","and","a","spherical","shape",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582446).
lisp_trans(genls(timeDateFruit,tSumoFruitOrVegetable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582563).
lisp_trans(genls(timeDateFruit,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582601).
lisp_trans(documentation(timeDateFruit,vEnglishLanguage,s("A","#$FruitOrVegetable","that","is","produced","by","the","date","palm",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582641).
lisp_trans(genls(tSumoPearFruit,tSumoFruitOrVegetable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582743).
lisp_trans(genls(tSumoPearFruit,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582781).
lisp_trans(documentation(tSumoPearFruit,vEnglishLanguage,s("A","#$FruitOrVegetable","that","has","a","thick","skin","and","the","shape","of","a","tear","drop",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582821).
lisp_trans(genls(tSumoAvocado,tSumoFruitOrVegetable),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582940).
lisp_trans(genls(tSumoAvocado,uFoodForFn(tClazzAnimal)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':582976).
lisp_trans(documentation(tSumoAvocado,vEnglishLanguage,s("A","#$FruitOrVegetable","that","is","shaped","like","a","pear","and","has","a","dark","green","skin","and","a","rich","meat",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583014).
lisp_trans(genls(tIon,tPureSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583149).
lisp_trans(documentation(tIon,vEnglishLanguage,s("An","electronically","charged","#$Atom","or","#$Molecule",".","In","other","words",",","a","#$PureSubstance","that","has","lost","one","of","its","#$Electrons",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583178).
lisp_trans(genls(tSumoFreeAtom,tSumoAtomMolecule),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583339).
lisp_trans(documentation(tSumoFreeAtom,vEnglishLanguage,s("Any","#$Atom","which","is","not","part","of","a","#$Molecule",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583364).
lisp_trans(=>(tSumoFreeAtom(A),not(exists([M],and(tMolecule(M),part(A,M))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583453).
lisp_trans(rtBinaryPredicate(protonNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583575).
lisp_trans(rtSingleValuedRelation(protonNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583615).
lisp_trans(rtTotalValuedRelation(protonNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583660).
lisp_trans(argIsa(protonNumber,1,tPureSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583704).
lisp_trans(argIsa(protonNumber,2,ftPositiveInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583742).
lisp_trans(documentation(protonNumber,vEnglishLanguage,s("(","#$protonNumber","?","SUBSTANCE","?","NUMBER",")","means","that","the","#$PureSubstance","?","SUBSTANCE","has","the","number","of","#$Protons","?","NUMBER",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583782).
lisp_trans(=>(protonNumber(SUBSTANCE,NUMBER),=>(and(part(ATOM,SUBSTANCE),or(tSumoAtomMolecule(ATOM),tMolecule(ATOM))),equal(NUMBER,vCardinalityFn(uKappaFn(PROTON,and(part(PROTON,ATOM),tProton(PROTON))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':583946).
lisp_trans(rtBinaryPredicate(electronNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584370).
lisp_trans(rtSingleValuedRelation(electronNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584412).
lisp_trans(rtTotalValuedRelation(electronNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584459).
lisp_trans(argIsa(electronNumber,1,tPureSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584505).
lisp_trans(argIsa(electronNumber,2,ftPositiveInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584545).
lisp_trans(documentation(electronNumber,vEnglishLanguage,s("(","#$electronNumber","?","SUBSTANCE","?","NUMBER",")","means","that","the","#$PureSubstance","?","SUBSTANCE","has","the","number","of","#$Electrons","?","NUMBER",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584587).
lisp_trans(=>(electronNumber(TYPE,NUMBER),=>(and(part(ATOM,SUBSTANCE),or(tSumoAtomMolecule(ATOM),tMolecule(ATOM))),equal(NUMBER,vCardinalityFn(uKappaFn(ELECTRON,and(part(ELECTRON,ATOM),tElectron(ELECTRON))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':584757).
lisp_trans(genls(tSumoAtomicGroup,tSumoCompoundSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585123).
lisp_trans(documentation(tSumoAtomicGroup,vEnglishLanguage,s("Two","or","more","#$Atoms","that","are","bound","together","and","comprise","part","of","a","#$Molecule",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585164).
lisp_trans(=>(tSumoAtomicGroup(G),exists([ATOM1,ATOM2],and(tSumoAtomMolecule(ATOM1),tSumoAtomMolecule(ATOM2),not(equal(ATOM1,ATOM2)),part(ATOM1,G),part(ATOM2,G)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585290).
lisp_trans(=>(tSumoAtomicGroup(G),exists([M],and(tMolecule(M),part(G,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585499).
lisp_trans(genls(tSumoAmbush,tSumoManeuver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585607).
lisp_trans(documentation(tSumoAmbush,vEnglishLanguage,s("Any","#$Maneuver","in","a","#$ViolentContest","where","one","#$contestParticipant","attempts","to","conceal","himself","from","another","contestParticipant","so","that","he","can","#$Attack","the","other","#$contestParticipant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585634).
lisp_trans(=>(and(tSumoAmbush(AMBUSH),agent(AMBUSH,AG)),exists([C],and(actConcealing(C),subProcess(C,AMBUSH),hasPurpose(C,exists([ATTACK],and(tSumoAttack(ATTACK),agent(ATTACK,AG))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':585864).
lisp_trans(genls(tSumoBlockade,tSumoManeuver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':586158).
lisp_trans(documentation(tSumoBlockade,vEnglishLanguage,s("Any","#$Maneuver","in","a","#$Contest","where","one","#$contestParticipant","attempts","to","deny","access","to","something","that","is","wanted","by","another","#$contestParticipant",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':586187).
lisp_trans(=>(and(tSumoBlockade(B),tSumoContest(C),subProcess(B,C),contestParticipant(C,A1),agent(B,A1)),exists([C1,A2],and(prevents(C1,eventTranslocation),isa(B,C1),contestParticipant(C,A2),not(equal(A1,A2)),desires(A2,exists([I],and(isa(I,C1),agent(I,A1),subProcess(I,C))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':586380).
lisp_trans(genls(actMilitaryManeuver,tSumoManeuver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':586832).
lisp_trans(documentation(actMilitaryManeuver,vEnglishLanguage,s("Any","#$Maneuver","which","takes","place","in","a","#$Battle","and","which","is","intended","to","secure","a","tactical","advantage","for","one","of","the","agents","of","the","#$Battle",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':586869).
lisp_trans(=>(actMilitaryManeuver(M),exists([B],and(actBattle(B),subProcess(M,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587062).
lisp_trans(genls(tSumoFire,actCombustion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587179).
lisp_trans(documentation(tSumoFire,vEnglishLanguage,'Fire is the subclass of #$Combustion events in  which flames are present.  Fires are slower combustion processes than  explosions, though some fires may include explosive episodes.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587206).
lisp_trans(genls(actArson,tSumoFire),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587565).
lisp_trans(genls(actArson,actDestruction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587587).
lisp_trans(documentation(actArson,vEnglishLanguage,s("An","act","where","an","agent","sets","something","which","it","does","not","possess","on","fire","in","order","to","destroy","it","or","its","contents",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587616).
lisp_trans(genls(actBombing,actDestruction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587769).
lisp_trans(documentation(actBombing,vEnglishLanguage,s("An","act","of","#$Destruction","where","the","thing","destroyed","is","destroyed","by","means","of","an","explosive","device",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587800).
lisp_trans(genls(tObjectBomb,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587939).
lisp_trans(genls(tObjectBomb,tObjectExplosiveDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587962).
lisp_trans(documentation(tObjectBomb,vEnglishLanguage,s("A","weapon","that","explodes","in","order","to","cause","damage",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':587994).
lisp_trans(=>(actBombing(X),exists([BOMB],and(tObjectBomb(BOMB),instrument(X,BOMB)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588083).
lisp_trans(genls(actCarBombing,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588198).
lisp_trans(documentation(actCarBombing,vEnglishLanguage,s("A","car","bombing","is","an","attack","in","which","a","car","is","used","as","the","delivery","mechanism","for","a","bomb",".","The","car","is","usually","destroyed","in","the","blast","if","the","bomb","detonates","successfully",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588228).
lisp_trans(=>(actCarBombing(X),exists([BOMB,CAR],and(tObjectBomb(BOMB),tObjectTransportationDevice(CAR),instrument(X,CAR),instrument(X,BOMB),connected(CAR,BOMB)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588441).
lisp_trans(genls(actChemicalAttack,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588663).
lisp_trans(documentation(actChemicalAttack,vEnglishLanguage,s("An","attack","against","people","or","property","in","which","a","chemical","agent","is","used","as","the","active","ingredient","of","the","attack",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588704).
lisp_trans(=>(actChemicalAttack(X),exists([CHEM],and(tSumoSubstance(CHEM),instrument(X,CHEM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588865).
lisp_trans(genls(tSumoHandgrenadeAttack,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':588998).
lisp_trans(documentation(tSumoHandgrenadeAttack,vEnglishLanguage,s("An","attack","in","which","a","#$HandGrenade","is","employed","as","an","explosive","device","for","the","purpose","of","#$Destruction",".","A","case","in","which","a","hand","grenade","is","used","as","a","blunt","striking","object","in","an","attack","would","not","be","in","this","class",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589035).
lisp_trans(genls(tObjectHandGrenade,tObjectBomb),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589300).
lisp_trans(documentation(tObjectHandGrenade,vEnglishLanguage,s("A","hand","grenade","is","a","small","explosive","device","with","a","simple","trigger","mechanism",",","usually","lasting","a","few","seconds",",","designed","to","be","propelled","by","a","human","to","its","target",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589328).
lisp_trans(=>(tObjectHandGrenade(X),and(measure(X,uMeasureFn(N,tSumoPoundMass)),lessThan(N,10))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589533).
lisp_trans(=>(tSumoHandgrenadeAttack(X),exists([HG],and(tObjectHandGrenade(HG),instrument(X,HG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589642).
lisp_trans(genls(actHijacking,actRobbing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589774).
lisp_trans(documentation(actHijacking,vEnglishLanguage,'Robbing a #$Vehicle and then driving or piloting it away.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589803).
lisp_trans(=>(actHijacking(H),exists([V],and(tSumoVehicle(V),patient(H,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':589908).
lisp_trans(=>(actHijacking(H),exists([D],and(subProcess(D,H),actDriving(D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':590016).
lisp_trans(=>(actHijacking(X),exists([V,A],and(agent(X,A),tObjectTransportationDevice(V),holdsDuring(uImmediatePastFn(uWhenFn(X)),not(possesses(A,V))),holdsDuring(uWhenFn(X),possesses(A,V))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':590128).
lisp_trans(genls(actHostageTaking,actUnilateralGetting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':590438).
lisp_trans(documentation(actHostageTaking,vEnglishLanguage,s("An","event","in","which","one","agent","keeps","another","against","his","or","her","will",",","in","order","to","force","it","or","a","third","agent","to","accede","to","some","demand",".","The","hostages","are","typically","kept","in","the","place","where","they","are","first","taken","hostage",",","in","contrast","to","a","#$Kidnapping",".","Hostage","taking","often","involves","a","number","of","people","(","although","it","may","be","just","one",")",",","again",",","in","contrast","to","a","#$Kidnapping",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':590481).
lisp_trans(=>(actHostageTaking(X),exists([A],and(mobSentientAgent(A),patient(X,A)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':590893).
lisp_trans(genls(tSumoIncendiaryDeviceAttack,actCombustion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591022).
lisp_trans(genls(tSumoIncendiaryDeviceAttack,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591067).
lisp_trans(documentation(tSumoIncendiaryDeviceAttack,vEnglishLanguage,s("An","attack","in","which","an","agent","uses","a","device","which","causes","fire","in","order","to","destroy","life","or","property",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591116).
lisp_trans(genls(actInfiltration,actJoiningAnOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591272).
lisp_trans(documentation(actInfiltration,vEnglishLanguage,s("An","event","in","which","an","agent","joins","an","organization","under","false","pretenses",".","The","objective","of","such","an","act","is","often","to","gather","information","helpful","to","a","rival","organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591318).
lisp_trans(genls(actKidnapping,actRobbing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591532).
lisp_trans(documentation(actKidnapping,vEnglishLanguage,s("An","event","in","which","one","agent","keeps","another","against","his","or","her","will",",","in","order","to","force","it","or","a","third","agent","to","accede","to","some","demand",".","The","kidnapped","party","is","normally","removed","from","the","location","where","first","attacked",".","In","contrast","to","a","#$HostageTaking",",","a","kidnapping","normally","involves","an","attack","on","one",",","or","a","very","small","number","of","people",",","such","as","a","couple",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591562).
lisp_trans(=>(and(actKidnapping(X),tSumoGroupOfPeople(G),memberCount(G,N),patient(X,G)),lessThan(N,3)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':591958).
lisp_trans(=>(actKidnapping(X),exists([A,LOC1,LOC2],and(mobSentientAgent(A),tSumoGeographicArea(LOC1),tSumoGeographicArea(LOC2),not(equal(LOC1,LOC2)),holdsDuring(uImmediatePastFn(uWhenFn(X)),located(A,LOC1)),holdsDuring(uWhenFn(X),located(A,LOC2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':592101).
lisp_trans(genls(tSumoKnifeAttack,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':592484).
lisp_trans(documentation(tSumoKnifeAttack,vEnglishLanguage,s("An","attack","in","which","a","knife","is","used",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':592522).
lisp_trans(genls(tObjectKnife,tObjectCuttingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':592605).
lisp_trans(documentation(tObjectKnife,vEnglishLanguage,s("A","sharp","object","used","for","cutting",".","The","object","must","have","at","least","single","blade","or","major","protrusion","which","may","be","sharp","at","its","end","as","well",".","It","may","be","sharp","on","both","sides",",","or","just","one",".","Unlike","an","awl","it","has","a","sharp","edge","rather","than","a","point",".","Unlike","scissors",",","it","is","a","single","blade","without","additional","articulated","parts",".","Unlike","an","axe",",","a","knife","is","well","-","designed","for","slicing","rather","than","chopping",",","although","a","heavy","knife","such","as","a","broadsword","can","also","be","used","for","chopping",",","whereas","a","non","-","knife","is","not","well","designed","for","slicing","meat","for","example",".","A","knife","can","be","small","like","a","pocket","knife",",","or","large","like","a","two","-","handed","broadsword",".","A","knife","may","also","include","other","protrusions","such","as","in","the","split","swords","and","trident","-","like","objects","(","that","also","possess","a","long","sharp","edge",")","in","Chinese","weaponry",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':592637).
lisp_trans(genls(tObjectCuttingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593462).
lisp_trans(documentation(tObjectCuttingDevice,vEnglishLanguage,s("Any","#$Device","whose","purpose","is","#$Cutting","something","else",".","This","class","covers","knives","of","all","times",",","axes",",","saws",",","razors",",","chisels","etc",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593494).
lisp_trans(=>(tObjectCuttingDevice(X),capability(actCutting,X,instrument)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593672).
lisp_trans(=>(tSumoKnifeAttack(X),exists([HG],and(tObjectKnife(HG),instrument(X,HG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593745).
lisp_trans(genls(tSumoBlade,tObjectCuttingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593865).
lisp_trans(documentation(tSumoBlade,vEnglishLanguage,s("The","#$Flat","cutting","part","of","a","#$CuttingDevice",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593896).
lisp_trans(=>(tSumoBlade(B),exists([CD],and(tObjectCuttingDevice(CD),part(B,CD)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':593983).
lisp_trans(=>(and(tSumoBlade(B),actCutting(CUT),tSumoObject(OBJ),instrument(CUT,B),patient(CUT,OBJ)),meetsSpatially(B,OBJ)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':594092).
lisp_trans(genls(tSumoLetterBombAttack,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':594261).
lisp_trans(documentation(tSumoLetterBombAttack,vEnglishLanguage,s("An","attack","with","a","bomb","that","is","concealed","in","a","letter","or","package",",","which","is","typically","designed","to","explode","upon","opening",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':594297).
lisp_trans(genls(actLynching,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':594498).
lisp_trans(documentation(actLynching,vEnglishLanguage,s("A","lynching","is","a","form","of","#$Killing","conducted","under","a","thin","guise","of","legitimacy","by","a","vigilante","group",".","It","may","be","a","purge","of","an","individual","from","the","group","who","is","perceived","to","have","gone","astray",",","or","it","may","be","the","summary","execution","of","an","individual","outside","the","group","that","the","group","has","determined","has","violated","some","law","or","code",",","either","of","the","group",",","or","the","larger","society",".","A","lynching","is","distinguished","from","a","legal","execution","in","that","the","laws","of","a","government","are","not","followed","in","carrying","out","the","killing",".","A","lynching","is","distinguished","from","a","murder","in","that","there","is","the","pretense","of","some","process","carried","out","by","a","group","in","the","name","of","their","own","group","or","a","higher","power",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':594526).
lisp_trans(genls(actMortarAttack,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595236).
lisp_trans(documentation(actMortarAttack,vEnglishLanguage,s("An","attack","in","which","a","#$Mortar","weapon","is","used",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595268).
lisp_trans(genls(tSumoMortar,tObjectWeapon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595362).
lisp_trans(documentation(tSumoMortar,vEnglishLanguage,s("A","mortar","is","a","bomb","that","is","shot","at","a","location",".","A","howitzer","is","a","weapon","that","fires","mortars",".","The","mortar","may","not","include","the","propelling","charge","that","provides","the","motive","force","for","delivering","it","to","its","target",",","which","distinguishes","it","from","a","rocket",".","A","mortar","is","distinguished","from","other","bombs","in","that","it","is","propelled","rather","than","exploded","in","place",",","or","dropped",",","or","propelled","by","human","power",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595387).
lisp_trans(=>(actMortarAttack(X),exists([MA],and(tSumoMortar(MA),instrument(X,MA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595821).
lisp_trans(genls(tSumoRocketMissileAttack,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595939).
lisp_trans(documentation(tSumoRocketMissileAttack,vEnglishLanguage,s("An","attack","in","which","a","rocket","or","missile","is","used",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':595978).
lisp_trans(genls(tSumoRocket,tSumoProjectile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596081).
lisp_trans(genls(actStoning,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596130).
lisp_trans(documentation(actStoning,vEnglishLanguage,s("An","act","where","a","victim","or","victims","is","attacked","with","stones",".","The","stones","may","either","be","placed","on","top","of","a","victim","in","order","to","cause","death","by","pressure","and","suffocation",",","in","which","case","the","act","is","typically","part","of","a","ritualized","legal","sentence",",","or","where","the","victim","is","pelted","with","stones","causing","injury","or","death","by","trauma",".","The","intent","of","such","an","act","is","usually","the","death","of","the","victim",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596164).
lisp_trans(=>(actStoning(X),exists([ST],and(tSumoRock(ST),instrument(X,ST)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596592).
lisp_trans(genls(actSuicideBombing,actBombing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596920).
lisp_trans(genls(actSuicideBombing,actKilling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596954).
lisp_trans(documentation(actSuicideBombing,vEnglishLanguage,s("A","bomb","attack","in","which","the","bomber","intends","to","blow","himself","up","during","the","course","of","the","attack",".","The","bomber","is","the","delivery","mechanism","for","the","explosive","and","the","bomb","is","typically","in","close","contact","with","the","bomber",",","such","as","being","strapped","around","his","torso",".","This","action","is","distinguished","from","actions","in","which","the","bomber","merely","happens","to","be","blown","up","by","his","own","bomb","in","that","the","bomber","knows","that","he","is","committing","suicide",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':596988).
lisp_trans(=>(actSuicideBombing(X),exists([A],and(agent(X,A),holdsDuring(eventFutureFn(uWhenFn(X)),sumoAttribute(A,tDead))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':597454).
lisp_trans(=>(and(actSuicideBombing(X),agent(X,P)),believes(P,holdsDuring(eventFutureFn(uWhenFn(X)),sumoAttribute(P,tDead)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':597634).
lisp_trans(genls(actVandalism,actDestruction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':597806).
lisp_trans(documentation(actVandalism,vEnglishLanguage,s("An","event","where","the","objective","of","the","agent","is","to","damage","or","destroy","some","property","of","another","agent",".","This","is","distinguished","from","acts","where","the","prime","objective","is","damage","or","loss","of","life","of","another","agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':597839).
lisp_trans(=>(actVandalism(X),not(exists([A],and(tAgent(A),patient(X,A))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':598111).
lisp_trans(genls(tSumoVehicleAttack,tSumoViolentContest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':598239).
lisp_trans(documentation(tSumoVehicleAttack,vEnglishLanguage,s("An","event","in","which","a","vehicle","is","used","by","an","agent","in","order","to","inflict","injury",",","death","or","damage","to","people","or","property",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':598279).
lisp_trans(=>(tSumoVehicleAttack(X),exists([V],and(tObjectTransportationDevice(V),instrument(X,V)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':598458).
lisp_trans(rtOccupationalRole(mobBusinessPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599111).
lisp_trans(documentation(mobBusinessPerson,vEnglishLanguage,s("Any","of","a","class","of","people","in","a","professional","occupation","such","as","banking",",","finance",",","management",",","or","engineering",".","This","is","distinguished","from","blue","collar","jobs","that","primarily","involve","manual","labor","rather","than","thought","as","the","effort","expended","to","derive","remuneration",".","It","is","also","distinguished","from","professions","that","may","be","outwardly","similar","but","are","done","in","a","non","-","profit","organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599154).
lisp_trans(subAttribute(tSumoBusinessExecutive,mobBusinessPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599582).
lisp_trans(documentation(tSumoBusinessExecutive,vEnglishLanguage,'BusinessExecutive refers to a person responsible for the management of a business'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599630).
lisp_trans(termFormat(vEnglishLanguage,tSumoBusinessExecutive,s("business","executive")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599766).
lisp_trans(=>(sumoAttribute(X,tSumoBusinessExecutive),exists([BUSINESS,MANAGE],and(actManaging(MANAGE),tGroupedOrganization(BUSINESS),patient(MANAGE,BUSINESS),agent(MANAGE,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':599835).
lisp_trans(rtSocialRole(mobCelebrity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600050).
lisp_trans(documentation(mobCelebrity,vEnglishLanguage,s("Anyone","who","is","known","by","a","large","number","of","people",",","either","explicitly","by","name",",","or","by","action",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600082).
lisp_trans(=>(sumoAttribute(X,mobCelebrity),greaterThan(vCardinalityFn(uKappaFn(A,knows(A,exists([P],equal(P,X))))),1000)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600217).
lisp_trans(rtSocialRole(mobKnight),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600392).
lisp_trans(documentation(mobKnight,vEnglishLanguage,s("A","#$SocialRole","that","is","assigned","by","the","United","Kingdom","to","persons","for","reasons","of","personal","merit",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600421).
lisp_trans(genls(mobMusician,actArtisticOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600560).
lisp_trans(documentation(mobMusician,vEnglishLanguage,s("A","Musician","is","someone","who","is","capable","of","giving","a","#$MusicalPerformance",".","This","includes","amateurs","and","others","who","don","'t","formally","make","a","living","at","the","activity","or","choose","it","as","a","profession",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600599).
lisp_trans(=>(and(sumoAttribute(X,M),mobMusician(M)),hasSkill(actMusicalPerformance,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600827).
lisp_trans(rtSocialRole(tSumoVeteran),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600925).
lisp_trans(documentation(tSumoVeteran,vEnglishLanguage,s("The","#$Attribute","that","applies","to","someone","who","was","a","#$Soldier","at","one","time",",","but","is","not","currently","a","#$Soldier",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':600955).
lisp_trans(=>(holdsDuring(T1,sumoAttribute(H,tSumoVeteran)),exists([T2],and(temporalPart(T2,tColOfPastFn(uWhenFn(T1))),holdsDuring(T2,sumoAttribute(H,mobSoldier)),not(holdsDuring(T1,sumoAttribute(H,mobSoldier)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':601106).
lisp_trans(genls(tSumoRoad,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602193).
lisp_trans(genls(tSumoRoad,tPlaceLikeRoadway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602216).
lisp_trans(documentation(tSumoRoad,vEnglishLanguage,s("A","path","along","which","vehicles","travel",".","It","is","typically",",","although","not","necessarily",",","paved","and","intended","for","cars",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602240).
lisp_trans(=>(tSumoRoad(X),hasPurpose(X,exists([EV,VEH],and(actTransportation(EV),eventLocated(EV,X),tSumoLandVehicle(VEH),instrument(EV,VEH))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602388).
lisp_trans(contraryAttribute(tClazzCivilian,tClazzMilitaryPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602609).
lisp_trans(genls(rtOccupationalRole,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602653).
lisp_trans(documentation(rtOccupationalRole,vEnglishLanguage,s("A","#$Role","of","a","#$Human","in","a","#$OrganizationalProcess",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602690).
lisp_trans(rtSocialRole(tClazzCivilian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602807).
lisp_trans(documentation(tClazzCivilian,vEnglishLanguage,s("Someone","who","is","not","a","member","of","an","active","#$MilitaryOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602838).
lisp_trans(=>(holdsDuring(T1,sumoAttribute(X,tClazzCivilian)),holdsDuring(T1,not(sumoAttribute(X,tClazzMilitaryPerson)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':602947).
lisp_trans(rtSocialRole(mobWidowed),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':603057).
lisp_trans(documentation(mobWidowed,vEnglishLanguage,s("The","#$Attribute","that","applies","to","someone","who","was","married","to","someone","who","has","died",",","and","who","has","not","remarried",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':603087).
lisp_trans(=>(holdsDuring(NOW,sumoAttribute(P,mobWidowed)),and(exists([BEFORE,SPOUSE],and(earlier(BEFORE,NOW),holdsDuring(BEFORE,spouse(SPOUSE,P)),holdsDuring(NOW,sumoAttribute(SPOUSE,tDead)))),not(exists([OTHER],holdsDuring(NOW,spouse(OTHER,P)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':603239).
lisp_trans(genls(tGroupedConvoy,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':603603).
lisp_trans(documentation(tGroupedConvoy,vEnglishLanguage,s("A","group","of","vehicles","that","all","are","being","driven","in","formation","(","e",".","g",".",",","lines",",","rows",",","columns",")","to","the","same","destination",".","That","destination","may","be","an","intermediate","destination","on","the","way","to","a","final","destination","for","some","of","the","vehicles","however",".","This","is","distinguished","from","vehicles","that","have","no","common","purpose",",","such","as","traffic","on","a","freeway",".","This","includes","cases","where","some","of","the","agents","driving","the","vehicles","intend","to","reach","a","point","but","fail","to","do","so",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':603632).
lisp_trans(=>(tGroupedConvoy(C),exists([V1,V2,TIME],and(not(equal(V1,V2)),tSumoVehicle(V1),tSumoVehicle(V2),timeOfTimeInterval(TIME),temporalPart(TIME,uWhenFn(C)),holdsDuring(TIME,and(member(V1,C),member(V2,C)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':604527).
lisp_trans(=>(and(tGroupedConvoy(C),member(VEH,C)),exists([DRIVE],and(actDriving(DRIVE),overlapsTemporally(uWhenFn(DRIVE),uWhenFn(C)),patient(DRIVE,VEH)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':605392).
lisp_trans(=>(tGroupedConvoy(C),sumoAttribute(C,actLineFormation)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606256).
lisp_trans(rtOccupationalRole(mobDiplomat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606316).
lisp_trans(subAttribute(mobDiplomat,tSumoGovernmentPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606353).
lisp_trans(documentation(mobDiplomat,vEnglishLanguage,s("A","person","who","works","as","a","facilitator","for","communication","between","countries",",","in","the","official","employ","of","one","of","the","countries",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606394).
lisp_trans(rtSocialRole(tSumoDissident),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606559).
lisp_trans(documentation(tSumoDissident,vEnglishLanguage,s("Someone","who","is","opposed","to","the","leadership","of","a","particular","country",".","Typically",",","a","dissident","suffers","punishment","at","the","hands","of","the","country","whose","leadership","he","is","opposing",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606591).
lisp_trans(genls(tPlaceLikeEmbassyBuilding,actGovernmentBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606806).
lisp_trans(documentation(tPlaceLikeEmbassyBuilding,vEnglishLanguage,s("An","embassy","is","a","#$Building","that","is","owned","by","a","#$Government","to","house","its","diplomatic","and","consular","staff","that","is","in","another","country",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':606852).
lisp_trans(=>(tPlaceLikeEmbassyBuilding(X),exists([EGOV,OTHERGOV],and(actNation(EGOV),actNation(OTHERGOV),not(equal(EGOV,OTHERGOV)),possesses(EGOV,X),located(X,OTHERGOV)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':607033).
lisp_trans(genls(actEntertainmentBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':607696).
lisp_trans(documentation(actEntertainmentBuilding,vEnglishLanguage,s("A","building","that","has","the","primary","purpose","of","entertaining","people",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':607738).
lisp_trans(=>(actEntertainmentBuilding(BUILDING),hasPurpose(BUILDING,exists([REC],and(tSumoRecreationOrExercise(REC),eventLocated(REC,BUILDING))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':607860).
lisp_trans(genls(actGovernmentBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608061).
lisp_trans(documentation(actGovernmentBuilding,vEnglishLanguage,s("A","building","belonging","to","a","#$Government")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608100).
lisp_trans(=>(actGovernmentBuilding(X),exists([G],and(tSumoGovernment(G),possesses(G,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608193).
lisp_trans(rtOccupationalRole(tSumoGovernmentPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608321).
lisp_trans(documentation(tSumoGovernmentPerson,vEnglishLanguage,s("A","person","who","works","for","a","#$Government",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608366).
lisp_trans(=>(holdsDuring(T1,sumoAttribute(X,tSumoGovernmentPerson)),exists([GOV],and(tSumoGovernment(GOV),holdsDuring(T1,employs(GOV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':608456).
lisp_trans(genls(actRenting,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':609695).
lisp_trans(genls(actRenting,actBorrowing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':609735).
lisp_trans(documentation(actRenting,vEnglishLanguage,s("Giving","money","to","the","owner","of","an","#$Object","in","exchange","for","the","right","to","use","the","#$Object","for","a","fixed","time","period",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':609764).
lisp_trans(=>(and(actRenting(R),agent(R,A),patient(R,O)),holdsDuring(uWhenFn(R),modalAttribute(uses(A,O),cwPermission))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':609920).
lisp_trans(genls(tSumoMarketplace,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610077).
lisp_trans(documentation(tSumoMarketplace,vEnglishLanguage,s("An","area",",","building",",","or","set","of","buildings","where","#$FinancialTransactions","are","intended","to","take","place",".","There","should","be","more","than","one","owner","or","renter","of","space","or","buildings","within","the","marketplace",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610115).
lisp_trans(=>(tSumoMarketplace(X),hasPurpose(X,exists([EV],and(actFinancialTransaction(EV),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610352).
lisp_trans(rtOccupationalRole(tSumoStoreOwner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610517).
lisp_trans(subAttribute(tSumoStoreOwner,mobBusinessPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610556).
lisp_trans(documentation(tSumoStoreOwner,vEnglishLanguage,s("Someone","who","operates","a","store","which","he","either","owns","or","rents",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610597).
lisp_trans(rtSocialRole(mobMilitant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610703).
lisp_trans(documentation(mobMilitant,vEnglishLanguage,s("A","militant","is","someone","who","is","not","officially","authorized","by","a","government","to","engage","in","combat",",","but","who","does","so","on","behalf","of","a","#$PoliticalOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610734).
lisp_trans(rtOccupationalRole(tClazzMilitaryPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610927).
lisp_trans(documentation(tClazzMilitaryPerson,vEnglishLanguage,s("Someone","who","is","a","member","of","a","#$ModernMilitaryOrganization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':610970).
lisp_trans(=>(holdsDuring(T1,sumoAttribute(X,tClazzMilitaryPerson)),exists([ORG],and(tGroupedMilitaryOrganization(ORG),holdsDuring(T1,member(X,ORG))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611079).
lisp_trans(=>(and(tGroupedMilitaryOrganization(ORG),holdsDuring(T1,member(X,ORG)),tSumoHuman(X)),holdsDuring(T1,sumoAttribute(X,tClazzMilitaryPerson))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611251).
lisp_trans(genls(tPlaceLikeOfficeBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611420).
lisp_trans(documentation(tPlaceLikeOfficeBuilding,vEnglishLanguage,s("A","building","in","which","work","activities","take","place","which","is","not","primarily","designed","for","manufacturing","or","retail","sales",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611455).
lisp_trans(genls(tSumoPeaceKeepingMission,tGroupedMilitaryOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611619).
lisp_trans(documentation(tSumoPeaceKeepingMission,vEnglishLanguage,s("A","military","deployment","which","is","intended","to","prevent","hostilities","between","two","other","entities","located","in","the","same","rough","geographic","area",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611671).
lisp_trans(genls(tSumoPlaceOfWorship,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611859).
lisp_trans(documentation(tSumoPlaceOfWorship,vEnglishLanguage,s("Any","place","designed","for","#$ReligiousProcesses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611894).
lisp_trans(=>(tSumoPlaceOfWorship(X),hasPurpose(X,exists([EV],and(actReligiousProcess(EV),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':611988).
lisp_trans(genls(tPlaceLikePoliceFacility,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612152).
lisp_trans(documentation(tPlaceLikePoliceFacility,vEnglishLanguage,s("A","building","designed","to","house","#$PolicePersons",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612201).
lisp_trans(rtOccupationalRole(tSumoPolicePerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612297).
lisp_trans(subAttribute(tSumoPolicePerson,tSumoGovernmentPerson),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612338).
lisp_trans(documentation(tSumoPolicePerson,vEnglishLanguage,s("A","member","of","a","government","whose","occupation","has","the","primary","purpose","of","preventing","crime","and","arresting","criminals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612383).
lisp_trans(subAttribute(tSumoPoliticalFigure,mobCelebrity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612542).
lisp_trans(documentation(tSumoPoliticalFigure,vEnglishLanguage,s("A","well","known","person","who","participates","in","a","PoliticalProcess",".","This","must","either","be","the","person","'s","principal","occupation",",","or","what","is","intended","to","become","his","principal","occupation","(","for","example",",","after","an","election",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612583).
lisp_trans(=>(sumoAttribute(X,tSumoPoliticalFigure),exists([EV],and(agent(EV,X),actPoliticalProcess(EV)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612839).
lisp_trans(=>(sumoAttribute(X,tSumoPoliticalFigure),exists([GOV],and(tSumoGovernment(GOV),or(member(X,GOV),desires(X,member(X,GOV)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':612970).
lisp_trans(subAttribute(tClazzReligiousFigure,mobCelebrity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':613154).
lisp_trans(documentation(tClazzReligiousFigure,vEnglishLanguage,s("A","well","-","known","leader","of","a","religious","group",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':613195).
lisp_trans(genls(actRestaurantBuilding,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':613453).
lisp_trans(documentation(actRestaurantBuilding,vEnglishLanguage,s("A","#$Building","where","people","pay","to","be","served","food","and","eat",".","Some","restaurants","may","also","offer","entertainment",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':613492).
lisp_trans(=>(actRestaurantBuilding(X),hasPurpose(X,exists([OWN,EMP,EV,P,PAY],and(employs(OWN,EMP),possesses(OWN,X),tSumoHuman(P),actFinancialTransaction(PAY),agent(PAY,P),patient(PAY,EMP),confersRight(EMP,EV,P),actEating(EV),agent(EV,P),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':613651).
lisp_trans(genls(tSumoEducationalFacility,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614058).
lisp_trans(documentation(tSumoEducationalFacility,vEnglishLanguage,s("A","building","or","campus",",","owned","by","an","#$EducationalOrganization",",","which","is","intended","as","the","location","for","#$EducationalProcesses",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614108).
lisp_trans(=>(tSumoEducationalFacility(X),exists([ORG],and(tGroupedEducationalOrganization(ORG),possesses(ORG,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614285).
lisp_trans(=>(tSumoEducationalFacility(X),hasPurpose(X,exists([EV],and(actEducationalProcess(EV),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614433).
lisp_trans(rtSocialRole(mobStudent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614604).
lisp_trans(documentation(mobStudent,vEnglishLanguage,s("A","person","who","participates","in","an","#$EducationalProcess","in","order","to","learn","something",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614634).
lisp_trans(=>(sumoAttribute(X,mobStudent),exists([EV],and(actEducationalProcess(EV),patient(EV,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614758).
lisp_trans(genls(tPlaceLikeSubway,tSumoHole),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614885).
lisp_trans(documentation(tPlaceLikeSubway,vEnglishLanguage,s("A","subway","is","a","hollow","area","of","the","earth",",","typically","under","large","cities",",","designed","for","running","trains","that","move","people",".","It","is","distinguished","from","other","kinds","of","tunnels","in","that","trains","run","through","them",",","primarily","for","the","purpose","of","carrying","people","rather","than","ore",",","for","example",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':614908).
lisp_trans(=>(tPlaceLikeSubway(X),exists([SURF],and(surface(SURF,tSumoGeographicArea),orientation(X,SURF,tSumoBelow)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615221).
lisp_trans(=>(tPlaceLikeSubway(X),hasPurpose(X,exists([EV,P],and(actTransportation(EV),tSumoHuman(P),patient(EV,P),eventLocated(EV,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615357).
lisp_trans(rtSocialRole(mobTourist),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615567).
lisp_trans(documentation(mobTourist,vEnglishLanguage,s("A","tourist","is","a","person","who","is","travelling","to","a","place","primarily","for","reasons","of","entertainment","or","education",",","rather","than","business",",","although","business","transaction","may","take","place","during","the","trip",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615597).
lisp_trans(genls(tSumoTouristSite,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615828).
lisp_trans(documentation(tSumoTouristSite,vEnglishLanguage,s("A","tourist","site","is","a","location","that","has","some","feature","of","interest","to","#$Tourists",",","which","entertains","or","informs","them",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':615866).
lisp_trans(genls(actTerroristOrganization,tGroupedPoliticalOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616028).
lisp_trans(=>(actTerroristOrganization(X),exists([EV],and(tSumoViolentContest(EV),agent(EV,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616084).
lisp_trans(documentation(actTerroristOrganization,vEnglishLanguage,s("A","group","that","uses","violent","means","in","an","attempt","to","bring","about","their","political","aims",".","Those","violent","means","are","distinguished","from","a","war","between","nations",",","or","a","civil","war","in","that","the","group","is","at","least","partially","clandestine","and","a","significant","proportion","of","its","acts","are","against","non","-","military","targets",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616218).
lisp_trans(rtBinaryPredicate(memberCount),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616573).
lisp_trans(argIsa(memberCount,1,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616612).
lisp_trans(argIsa(memberCount,2,ftInt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616646).
lisp_trans(documentation(memberCount,vEnglishLanguage,s("(","#$memberCount","?","ORG","?","NUMBER",")","means","that","there","is","a","total","?","NUMBER","of","#$members","in","the","#$Collection","?","ORG",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616678).
lisp_trans(=>(memberCount(ORG,NUM),equal(NUM,vCardinalityFn(uKappaFn(MEM,member(MEM,ORG))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':616831).
lisp_trans(rtBinaryPredicate(memberType),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617180).
lisp_trans(argIsa(memberType,1,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617218).
lisp_trans(argIsa(memberType,2,tCol),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617251).
lisp_trans(documentation(memberType,vEnglishLanguage,s("(","#$memberType","?","GROUP","?","TYPE",")","means","that","all","the","members","of","the","#$Collection","?","GROUP","belong","to","the","#$SetOrClass","?","TYPE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617285).
lisp_trans(=>(and(memberType(GROUP,TYPE),member(MEMBER,GROUP)),isa(MEMBER,TYPE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617449).
lisp_trans(rtTernaryPredicate(memberTypeCount),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617548).
lisp_trans(argIsa(memberTypeCount,1,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617592).
lisp_trans(argIsa(memberTypeCount,2,tCol),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617630).
lisp_trans(argIsa(memberTypeCount,3,ftNonnegativeInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617668).
lisp_trans(documentation(memberTypeCount,vEnglishLanguage,s("(","#$memberTypeCount","?","GROUP","?","TYPE","?","NUMBER",")","means","that","the","#$Collection","?","GROUP","has","?","NUMBER","members","of","the","kind","?","TYPE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617715).
lisp_trans(=>(memberTypeCount(GROUP,TYPE,NUMBER),exists([SUBGROUP],and(subCollection(SUBGROUP,GROUP),memberCount(SUBGROUP,NUMBER),memberType(SUBGROUP,TYPE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':617883).
lisp_trans(=>(and(memberCount(GROUP,NUMBER1),memberTypeCount(GROUP,TYPE,NUMBER2)),greaterThanOrEqualTo(NUMBER1,NUMBER2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618069).
lisp_trans(=>(and(memberTypeCount(GROUP,TYPE,NUMBER),equal(NUMBER,0)),not(exists([ITEM],and(isa(ITEM,TYPE),member(ITEM,GROUP))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618204).
lisp_trans(rtTernaryPredicate(memberAtTime),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618385).
lisp_trans(documentation(memberAtTime,vEnglishLanguage,s("(","#$memberAtTime","?","MEMBER","?","COLLECTION","?","TIME",")","means","that","during","the","time","period","denoted","by","?","TIME",",","?","MEMBER","is","a","#$member","of","?","COLLECTION",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618426).
lisp_trans(argIsa(memberAtTime,1,tSumoSelfConnectedObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618606).
lisp_trans(argIsa(memberAtTime,2,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618650).
lisp_trans(argIsa(memberAtTime,3,timeTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618685).
lisp_trans(<=>(memberAtTime(OBJ,COLLECTION,TIME),holdsDuring(TIME,member(OBJ,COLLECTION))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618723).
lisp_trans(=>(and(locatedAtTime(COLLECTION,TIME,PLACE),memberAtTime(OBJ,COLLECTION,TIME)),locatedAtTime(OBJ,TIME,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618818).
lisp_trans(documentation(inventory,vEnglishLanguage,s("(","inventory","?","CBO","?","COLLECTION",")","means","that","the","#$ContentBearingObject","?","CBO","contains","a","list","or","enumeration","of","the","members","of","the","#$Collection","?","COLLECTION",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':618955).
lisp_trans(rtBinaryPredicate(inventory),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619152).
lisp_trans(argIsa(inventory,1,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619189).
lisp_trans(argIsa(inventory,2,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619231).
lisp_trans(=>(and(inventory(O,C),member(I,C)),refers(O,I)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619264).
lisp_trans(rtTernaryPredicate(subordinateInOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619336).
lisp_trans(argIsa(subordinateInOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619390).
lisp_trans(argIsa(subordinateInOrganization,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619440).
lisp_trans(argIsa(subordinateInOrganization,3,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619483).
lisp_trans(documentation(subordinateInOrganization,vEnglishLanguage,s("(","#$subordinateInOrganization","?","ORG","?","PERSON1","?","PERSON2",")","means","that","in","the","#$Organization","?","ORG",",","?","PERSON1","is","subordinate","to","?","PERSON2",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619527).
lisp_trans(=>(subordinateInOrganization(ORG,PERSON1,PERSON2),employs(ORG,PERSON1)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619719).
lisp_trans(=>(subordinateInOrganization(ORG,PERSON1,PERSON2),employs(ORG,PERSON2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619808).
lisp_trans(rtTernaryPredicate(subordinatePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619897).
lisp_trans(argIsa(subordinatePosition,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619945).
lisp_trans(argIsa(subordinatePosition,2,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':619989).
lisp_trans(argIsa(subordinatePosition,3,actPosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620029).
lisp_trans(documentation(subordinatePosition,vEnglishLanguage,s("(","#$subordinatePosition","?","ORG","?","SUB","?","SUPER",")","means","that","in","the","#$Organization","?","ORG",",","the","holder","of","role","?","SUB","is","subordinate","to","the","holder","of","role","?","SUPER",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620070).
lisp_trans(=>(and(subordinatePosition(ORG,ROLE1,ROLE2),occupiesPosition(PERSON1,ROLE1,ORG)),exists([PERSON2],and(tSumoHuman(PERSON2),occupiesPosition(PERSON2,ROLE2,ORG),subordinateInOrganization(ORG,PERSON1,PERSON2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620277).
lisp_trans(rtBinaryPredicate(operator),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620547).
lisp_trans(rtAsymmetricRelation(operator),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620583).
lisp_trans(rtIrreflexiveRelation(operator),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620622).
lisp_trans(argIsa(operator,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620662).
lisp_trans(argIsa(operator,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620690).
lisp_trans(documentation(operator,vEnglishLanguage,s("(","#$operator","?","OBJECT","?","AGENT",")","means","that","?","AGENT","determines","how","?","OBJECT","is","used",",","either","by","directly","or","indirectly","operating","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620717).
lisp_trans(genls(tSumoClassificationScheme,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620888).
lisp_trans(documentation(tSumoClassificationScheme,vEnglishLanguage,s("A","#$ClassificationScheme","is","a","conceptual","structure",",","an","abstract","arrangement","of","concepts","and","the","relations","that","link","them",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':620932).
lisp_trans(genls(cwTaxonomy,tSumoClassificationScheme),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621110).
lisp_trans(documentation(cwTaxonomy,vEnglishLanguage,s("A","#$Taxonomy","is","a","#$ClassificationScheme","that","typically","includes","the","salient","concepts","of","a","domain","of","interest",",","plus",",","minimally",",","a","binary","`","broader","than","'","/","`","narrower","than","'","relation","by","which","the","concepts","are","linked",".","The","`","broader","than","'","/","`","narrower","than","'","relation","is","usually","conceived","as","set","-","or","class","-","based","subsumption",",","but","taxonomies","are","notorious","for","conflating","the","set","membership","and","set","subsumption","(","i",".","e",".",",","subset","/","superset",")","relations","into","a","single","`","IS-A","'","relation",".","Some","taxonomies","include","additional","binary","relations",",","such","as","`","subpart","'","/","`","superpart","'",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621151).
lisp_trans(documentation(abstractPart,vEnglishLanguage,s("A","meronymy","relation","similar","to","#$part",",","but","for","abstract","rather","than","physical","things",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621741).
lisp_trans(termFormat(vEnglishLanguage,abstractPart,"part"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621873).
lisp_trans(rtPartialOrderingRelation(abstractPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621922).
lisp_trans(rtBinaryPredicate(abstractPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':621970).
lisp_trans(argIsa(abstractPart,1,tSumoAbstract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622010).
lisp_trans(argIsa(abstractPart,2,tSumoAbstract),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622043).
lisp_trans(formatSumo(vEnglishLanguage,abstractPart,s("%","1","is","%","n","a","#$part","of","%","2")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622076).
lisp_trans(genls(cwOntology,tSumoClassificationScheme),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622141).
lisp_trans(documentation(cwOntology,vEnglishLanguage,s("An","#$Ontology","is","a","#$ClassificationScheme","that","links","concepts","via","many","different","relations",".","Ontologies","typically","are","not","restricted","to","binary","relations","and","are","structured","by","several","kinds","of","conceptual","hierarchies",",","including","set","-","or","class","-","based","subsumption",",","spatial","containment",",","mereology","(","theory","of","parts","and","wholes",")",",","and","logical","contexts",".","Thus",",","an","ontology","typically","includes","multiple","taxonomies",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622182).
lisp_trans(=>(cwOntology(ONT),exists([TAX],and(cwTaxonomy(TAX),abstractPart(TAX,ONT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622681).
lisp_trans(rtBinaryPredicate(transported),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622819).
lisp_trans(rtAsymmetricRelation(transported),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622858).
lisp_trans(documentation(transported,vEnglishLanguage,s("(","#$transported","?","EVENT","?","OBJ",")","means","that","?","OBJ","is","transported","(","carried","/","moved","to","a","different","physical","location",")","in","the","#$Transportation","?","EVENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':622900).
lisp_trans(argIsa(transported,1,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623087).
lisp_trans(argIsa(transported,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623125).
lisp_trans(genlPreds(transported,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623155).
lisp_trans(rtCaseRole(transported),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623189).
lisp_trans(rtBinaryPredicate(cargo),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623231).
lisp_trans(rtAsymmetricRelation(cargo),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623264).
lisp_trans(documentation(cargo,vEnglishLanguage,s("(","#$cargo","?","EVENT","?","OBJ",")","means","that","?","OBJ","is","transported","as","cargo","in","the","#$Shipping","event","?","EVENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623300).
lisp_trans(argIsa(cargo,1,actShipping),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623435).
lisp_trans(argIsa(cargo,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623461).
lisp_trans(genlPreds(cargo,transported),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623485).
lisp_trans(rtCaseRole(cargo),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623517).
lisp_trans(rtBinaryPredicate(serviceProvider),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623544).
lisp_trans(rtAsymmetricRelation(serviceProvider),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623587).
lisp_trans(rtIntentionalRelation(serviceProvider),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623633).
lisp_trans(argIsa(serviceProvider,1,actServiceProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623680).
lisp_trans(argIsa(serviceProvider,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623722).
lisp_trans(genlPreds(serviceProvider,agent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623764).
lisp_trans(rtCaseRole(serviceProvider),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623800).
lisp_trans(documentation(serviceProvider,vEnglishLanguage,s("(","#$serviceProvider","?","EVENT","?","AGENT",")","means","that","?","AGENT","is","the","supplier","of","the","service","provided","in","?","EVENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623836).
lisp_trans(rtBinaryPredicate(serviceRecipient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':623990).
lisp_trans(rtAsymmetricRelation(serviceRecipient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624034).
lisp_trans(rtIntentionalRelation(serviceRecipient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624081).
lisp_trans(argIsa(serviceRecipient,1,actServiceProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624129).
lisp_trans(argIsa(serviceRecipient,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624172).
lisp_trans(genlPreds(serviceRecipient,experiencer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624215).
lisp_trans(rtCaseRole(serviceRecipient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624258).
lisp_trans(documentation(serviceRecipient,vEnglishLanguage,s("(","#$serviceRecipient","?","EVENT","?","AGENT",")","means","that","?","AGENT","is","the","receiver","of","the","service","provided","in","?","EVENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624295).
lisp_trans(=>(actServiceProcess(EVENT),exists([PROVIDER],and(mobCognitiveAgent(PROVIDER),serviceProvider(EVENT,PROVIDER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624495).
lisp_trans(=>(actServiceProcess(EVENT),exists([RECEIVER],and(mobCognitiveAgent(RECEIVER),serviceRecipient(EVENT,RECEIVER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624696).
lisp_trans(rtBinaryPredicate(benefits),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624854).
lisp_trans(rtAsymmetricRelation(benefits),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624890).
lisp_trans(argIsa(benefits,1,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624929).
lisp_trans(argIsa(benefits,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624957).
lisp_trans(documentation(benefits,vEnglishLanguage,s("(","#$benefits","?","PROCESS","?","AGENT",")","means","that","?","AGENT","somehow","derives","benefit","as","a","result","of","?","PROCESS",".","This","is","a","very","general","relation",",","and","does","not","entail","that","?","AGENT","is","a","participant","in","?","PROCESS",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':624983).
lisp_trans(=>(and(equal(PROCESS_START,uBeginFn(uWhenFn(PROCESS))),equal(AGENT_END,iTimeOf_EndFn(uWhenFn(AGENT))),benefits(PROCESS,AGENT)),before(PROCESS_START,AGENT_END)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625325).
lisp_trans(rtTernaryPredicate(areaOfResponsibility),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625509).
lisp_trans(argIsa(areaOfResponsibility,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625558).
lisp_trans(argGenl(areaOfResponsibility,2,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625596).
lisp_trans(argIsa(areaOfResponsibility,3,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625644).
lisp_trans(documentation(areaOfResponsibility,vEnglishLanguage,s("(","#$areaOfResponsibility","?","AGENT","?","PROCESS-TYPE","?","AREA",")","means","that","?","AGENT","(","typically","an","instance","of","#$Organization",")","is","responsible","or","accountable","for","actions","or","undertakings","of","type","?","PROCESS-TYPE","in","the","#$GeographicArea","denoted","by","?","AREA",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':625691).
lisp_trans(rtBinaryPredicate(friend),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626076).
lisp_trans(rtSymmetricRelation(friend),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626110).
lisp_trans(rtIntentionalRelation(friend),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626146).
lisp_trans(documentation(friend,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$friend","?","H1","?","H2",")",")","means","that","during","time","?","T1",",","?","H1","and","?","H2","know","each","other",",","share","a","relationship","of","mutual","care","and","concern",",","and","probably","also","share","some","common","interests",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626185).
lisp_trans(argIsa(friend,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626419).
lisp_trans(argIsa(friend,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626443).
lisp_trans(genlPreds(friend,mutualAcquaintance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626467).
lisp_trans(rtBinaryPredicate(coworker),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626520).
lisp_trans(rtSymmetricRelation(coworker),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626556).
lisp_trans(documentation(coworker,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$coworker","?","H1","?","H2",")",")","means","that","during","time","?","T1",",","?","H1","and","?","H2","are","both","employed","by","the","same","agent",",","are","of","roughly","the","same","job","status",",","and","come","into","contact","at","least","part","of","the","time","at","the","same","work","location",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626595).
lisp_trans(argIsa(coworker,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626868).
lisp_trans(argIsa(coworker,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626894).
lisp_trans(genlPreds(coworker,mutualAcquaintance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626920).
lisp_trans(=>(holdsDuring(T1,coworker(H1,H2)),exists([ORG],and(tGroupedOrganization(ORG),holdsDuring(T1,and(employs(ORG,H1),employs(ORG,H2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':626963).
lisp_trans(rtBinaryPredicate(cohabitant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627215).
lisp_trans(rtSymmetricRelation(cohabitant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627253).
lisp_trans(rtIntentionalRelation(cohabitant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627293).
lisp_trans(documentation(cohabitant,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$cohabitant","?","H1","?","H2",")",")","means","that","during","the","time","?","T1",",","?","H1","and","?","H2","have","the","same","home",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627336).
lisp_trans(argIsa(cohabitant,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627489).
lisp_trans(argIsa(cohabitant,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627517).
lisp_trans(genlPreds(cohabitant,mutualAcquaintance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627546).
lisp_trans(=>(holdsDuring(T1,cohabitant(H1,H2)),exists([UNIT],and(tSumoSocialUnit(UNIT),holdsDuring(T1,and(member(UNIT,H1),member(UNIT,H2)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627591).
lisp_trans(=>(and(tSumoSocialUnit(UNIT),holdsDuring(T1,and(member(UNIT,H1),member(UNIT,H2)))),holdsDuring(T1,cohabitant(H1,H2))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627791).
lisp_trans(rtBinaryPredicate(grandparent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':627985).
lisp_trans(rtAsymmetricRelation(grandparent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628024).
lisp_trans(argIsa(grandparent,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628066).
lisp_trans(argIsa(grandparent,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628095).
lisp_trans(documentation(grandparent,vEnglishLanguage,s("(","#$grandparent","?","YOUNGER","?","OLDER",")","means","that","?","OLDER","is","a","#$parent","of","?","YOUNGER","'s","#$parent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628125).
lisp_trans(genlPreds(grandmother,grandparent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628260).
lisp_trans(rtBinaryPredicate(grandmother),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628298).
lisp_trans(genlPreds(grandfather,grandparent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628337).
lisp_trans(rtBinaryPredicate(grandfather),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628375).
lisp_trans(genlPreds(grandparent,ancestor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628414).
lisp_trans(=>(and(parent(CHILD,PARENT),tSumoMan(PARENT)),father(CHILD,PARENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628470).
lisp_trans(=>(and(parent(CHILD,PARENT),tSumoMan(CHILD)),son(CHILD,PARENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628795).
lisp_trans(=>(and(parent(CHILD,PARENT),tSumoWoman(CHILD)),daughter(CHILD,PARENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':628908).
lisp_trans(documentation(aunt,vEnglishLanguage,s("(","aunt","?","AUNT","?","PERSON",")","means","that","?","AUNT","is","the","sister","of","a","parent","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629006).
lisp_trans(argIsa(aunt,1,tSumoWoman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629122).
lisp_trans(argIsa(aunt,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629144).
lisp_trans(genlPreds(aunt,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629166).
lisp_trans(rtBinaryPredicate(aunt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629200).
lisp_trans(<=>(aunt(A,H),exists([P],and(sister(A,P),parent(H,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629233).
lisp_trans(documentation(cousin,vEnglishLanguage,s("(","cousin","?","PERSON1","?","PERSON2",")","means","that","?","PERSON1","and","?","PERSON2","are","cousins",",","i",".","e",".","?","PERSON1","and","?","PERSON2","have","grandparents","(","but","not","parents",")","in","common",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629324).
lisp_trans(argIsa(cousin,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629514).
lisp_trans(argIsa(cousin,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629538).
lisp_trans(genlPreds(cousin,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629562).
lisp_trans(rtBinaryPredicate(cousin),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629598).
lisp_trans(<=>(cousin(P1,P2),and(exists([G1,G2],and(grandmother(P1,G1),grandfather(P1,G2),grandmother(P2,G1),grandfather(P2,G2))),not(exists([M,F],and(mother(P1,M),father(P1,F),mother(P2,M),father(P2,F)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629633).
lisp_trans(documentation(grandfather,vEnglishLanguage,s("(","grandfather","?","PERSON","?","PARENT",")","means","that","?","PARENT","is","the","grandfather","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':629974).
lisp_trans(argIsa(grandfather,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630101).
lisp_trans(argIsa(grandfather,2,tSumoMan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630130).
lisp_trans(genlPreds(grandfather,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630157).
lisp_trans(=>(grandfather(H,P),exists([C],and(father(C,P),parent(H,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630199).
lisp_trans(documentation(grandmother,vEnglishLanguage,s("(","grandmother","?","PERSON","?","PARENT",")","means","that","?","PARENT","is","the","grandmother","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630295).
lisp_trans(argIsa(grandmother,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630422).
lisp_trans(argIsa(grandmother,2,tSumoWoman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630451).
lisp_trans(genlPreds(grandmother,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630480).
lisp_trans(=>(grandmother(H,P),exists([C],and(mother(C,P),parent(H,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630522).
lisp_trans(documentation(nephew,vEnglishLanguage,s("(","nephew","?","NEPHEW","?","PERSON",")","means","that","?","NEPHEW","is","the","#$son","of","a","#$sibling","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630618).
lisp_trans(argIsa(nephew,1,tSumoMan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630744).
lisp_trans(argIsa(nephew,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630766).
lisp_trans(genlPreds(nephew,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630790).
lisp_trans(rtBinaryPredicate(nephew),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630826).
lisp_trans(<=>(nephew(N,H),exists([S],and(sibling(S,H),son(N,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630861).
lisp_trans(documentation(niece,vEnglishLanguage,s("(","niece","?","NIECE","?","PERSON",")","means","that","?","NIECE","is","the","#$daughter","of","a","#$sibling","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':630952).
lisp_trans(argIsa(niece,1,tSumoWoman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631079).
lisp_trans(argIsa(niece,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631102).
lisp_trans(genlPreds(niece,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631125).
lisp_trans(rtBinaryPredicate(niece),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631160).
lisp_trans(<=>(niece(N,H),exists([S],and(sibling(S,H),daughter(N,S)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631195).
lisp_trans(documentation(uncle,vEnglishLanguage,s("(","uncle","?","UNCLE","?","PERSON",")","means","that","?","UNCLE","is","the","brother","of","a","parent","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631300).
lisp_trans(argIsa(uncle,1,tSumoMan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631421).
lisp_trans(argIsa(uncle,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631442).
lisp_trans(genlPreds(uncle,familyRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631465).
lisp_trans(rtBinaryPredicate(uncle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631500).
lisp_trans(<=>(uncle(U,H),exists([P],and(brother(U,P),parent(H,P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631534).
lisp_trans(documentation(stepfather,vEnglishLanguage,s("(","stepfather","?","PERSON","?","FATHER",")","means","that","?","FATHER","is","the","stepfather","of","?","PERSON",",","i",".","e",".","?","FATHER","is","the","#$spouse","of","the","#$mother","of","?","PERSON",",","without","also","being","the","#$father","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631637).
lisp_trans(argIsa(stepfather,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631863).
lisp_trans(argIsa(stepfather,2,tSumoMan),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631891).
lisp_trans(genlPreds(stepfather,legalRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631917).
lisp_trans(rtBinaryPredicate(stepfather),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631956).
lisp_trans(<=>(stepfather(P,F),exists([M],and(mother(P,M),spouse(F,M),not(father(P,F))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':631995).
lisp_trans(documentation(stepmother,vEnglishLanguage,s("(","stepmother","?","PERSON","?","MOTHER",")","means","that","?","MOTHER","is","the","#$stepmother","of","?","PERSON",",","i",".","e",".","?","MOTHER","is","the","spouse","of","the","#$father","of","?","PERSON",",","without","also","being","the","#$mother","of","?","PERSON",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632127).
lisp_trans(argIsa(stepmother,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632353).
lisp_trans(argIsa(stepmother,2,tSumoWoman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632381).
lisp_trans(genlPreds(stepmother,legalRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632409).
lisp_trans(rtBinaryPredicate(stepmother),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632448).
lisp_trans(<=>(stepmother(P,M),exists([F],and(father(P,F),spouse(M,F),not(mother(P,M))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632487).
lisp_trans(genls(tSumoNuclearFamily,tSumoFamilyGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632636).
lisp_trans(genls(tSumoNuclearFamily,tSumoSocialUnit),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632673).
lisp_trans(documentation(tSumoNuclearFamily,vEnglishLanguage,s("A","#$NuclearFamily","is","a","#$SocialUnit","composed","of","at","least","two","and","not","more","than","three","generations","of","#$familyRelations",":","#$parents",",","their","children",",","and","possibly","the","parents","'","parents","(","children","'s","#$grandparents",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':632710).
lisp_trans(=>(and(parent(CHILD,PARENT1),parent(CHILD,PARENT2),holdsDuring(T1,and(spouse(PARENT1,PARENT2),cohabitant(PARENT1,PARENT2),cohabitant(CHILD,PARENT1)))),exists([FAM],and(tSumoNuclearFamily(FAM),holdsDuring(T1,and(member(CHILD,FAM),member(PARENT1,FAM),member(PARENT2,FAM)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633050).
lisp_trans(rtBinaryPredicate(alias),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633461).
lisp_trans(rtAsymmetricRelation(alias),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633494).
lisp_trans(rtPartialValuedRelation(alias),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633530).
lisp_trans(argIsa(alias,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633569).
lisp_trans(argIsa(alias,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633601).
lisp_trans(documentation(alias,vEnglishLanguage,s("(","#$alias","?","STRING","?","AGENT",")","means","that","?","STRING","is","an","alternate","identifier","for","?","AGENT",",","and","is","likely","being","used","to","hide","or","obscure","?","AGENT","'s","true","identity",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633625).
lisp_trans(genlPreds(alias,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633817).
lisp_trans(rtBinaryPredicate(workAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633844).
lisp_trans(rtAsymmetricRelation(workAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633883).
lisp_trans(genlPreds(workAddress,postContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633925).
lisp_trans(documentation(workAddress,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$workAddress","?","AGENT","?","ADDRESS",")",")","means","that","during","the","time","specified","by","?","T1",",","?","ADDRESS","identifies","one","of","the","locations","at","which","?","AGENT","works",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':633967).
lisp_trans(argIsa(workAddress,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634175).
lisp_trans(argIsa(workAddress,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634210).
lisp_trans(rtBinaryPredicate(homeAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634249).
lisp_trans(rtAsymmetricRelation(homeAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634288).
lisp_trans(argIsa(homeAddress,1,tSumoPermanentResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634330).
lisp_trans(argIsa(homeAddress,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634372).
lisp_trans(genlPreds(homeAddress,postContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634401).
lisp_trans(documentation(homeAddress,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$homeAddress","?","PLACE","?","AGENT",")",")","means","that","during","the","time","specified","by","?","T1",",","the","#$PostalPlace","?","PLACE","is","?","AGENT","'s","#$home",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634443).
lisp_trans(rtTernaryPredicate(playsRoleInEvent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634631).
lisp_trans(argIsa(playsRoleInEvent,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634676).
lisp_trans(argIsa(playsRoleInEvent,2,rtCaseRole),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634711).
lisp_trans(argIsa(playsRoleInEvent,3,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634748).
lisp_trans(documentation(playsRoleInEvent,vEnglishLanguage,s("(","#$playsRoleInEvent","?","OBJ","?","ROLE","?","EVENT",")","means","that","the","#$Object","?","OBJ","is","involved","in","the","#$Process","?","EVENT","in","a","way","specified","by","the","#$CaseRole","predicate","?","ROLE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634785).
lisp_trans(=>(playsRoleInEvent(OBJ,ROLE,EVENT),[ROLE,EVENT,OBJ]),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':634996).
lisp_trans(=>(and(playsRoleInEvent(OBJ,ROLE,EVENT),genlPreds(ROLE,ROLE2)),playsRoleInEvent(OBJ,ROLE2,EVENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635063).
lisp_trans(=>(and([ROLE,EVENT,OBJ],rtCaseRole(ROLE),actProcess(EVENT),tSumoObject(OBJ)),playsRoleInEvent(OBJ,ROLE,EVENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635189).
lisp_trans(=>(and(playsRoleInEvent(OBJ,ROLE,EVENT),isa(EVENT,CLASS),genls(CLASS,actProcess),time(EVENT,TIME),eventLocated(EVENT,PLACE)),playsRoleInEventOfType(OBJ,ROLE,CLASS,TIME,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635347).
lisp_trans(rtQuintaryPredicate(playsRoleInEventOfType),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635569).
lisp_trans(argIsa(playsRoleInEventOfType,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635621).
lisp_trans(argIsa(playsRoleInEventOfType,2,rtCaseRole),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635662).
lisp_trans(argGenl(playsRoleInEventOfType,3,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635705).
lisp_trans(argIsa(playsRoleInEventOfType,4,timeTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635755).
lisp_trans(argIsa(playsRoleInEventOfType,5,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635802).
lisp_trans(documentation(playsRoleInEventOfType,vEnglishLanguage,s("(","#$playsRoleInEventOfType","?","OBJ","?","ROLE","?","TYPE","?","TIME","?","PLACE",")","means","that","?","OBJ","plays","the","role","specified","by","?","ROLE","in","an","instance","of","?","TYPE",",","which","occurs","at","?","TIME","and","?","PLACE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':635844).
lisp_trans(=>(playsRoleInEventOfType(OBJ,ROLE,TYPE,TIME,PLACE),exists([EVENT],and(isa(EVENT,TYPE),time(EVENT,TIME),eventLocated(EVENT,PLACE),playsRoleInEvent(OBJ,ROLE,EVENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636068).
lisp_trans(=>(and(playsRoleInEvent(OBJ,ROLE,EVENT),isa(EVENT,TYPE),genls(TYPE,actProcess),time(EVENT,TIME),eventLocated(EVENT,PLACE)),playsRoleInEventOfType(OBJ,ROLE,TYPE,TIME,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636288).
lisp_trans(rtTernaryPredicate(locatedAtTime),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636507).
lisp_trans(argIsa(locatedAtTime,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636549).
lisp_trans(argIsa(locatedAtTime,2,timeTimePosition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636581).
lisp_trans(argIsa(locatedAtTime,3,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636619).
lisp_trans(documentation(locatedAtTime,vEnglishLanguage,s("(","#$locatedAtTime","?","OBJ","?","TIME","?","PLACE",")","means","that","during","the","time","specified","by","?","TIME",",","?","OBJ","was","in","the","location","specified","by","?","PLACE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636652).
lisp_trans(<=>(locatedAtTime(OBJ,TIME,PLACE),holdsDuring(TIME,located(OBJ,PLACE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636830).
lisp_trans(=>(and(playsRoleInEvent(OBJ,ROLE,EVENT),time(EVENT,TIME),eventLocated(EVENT,PLACE)),locatedAtTime(OBJ,TIME,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':636915).
lisp_trans(rtBinaryPredicate(deceptiveIdentifier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637287).
lisp_trans(rtAsymmetricRelation(deceptiveIdentifier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637334).
lisp_trans(argIsa(deceptiveIdentifier,1,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637384).
lisp_trans(argIsa(deceptiveIdentifier,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637436).
lisp_trans(genlPreds(deceptiveIdentifier,refers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637473).
lisp_trans(genlPreds(alias,deceptiveIdentifier),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637514).
lisp_trans(documentation(deceptiveIdentifier,vEnglishLanguage,s("(","#$deceptiveIdentifier","?","OBJ","?","AGENT",")","means","that","?","AGENT","presents","?","OBJ","as","a","representation","of","?","AGENT","'s","`","true","'","identity",",","when","in","fact","it","is","not",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637555).
lisp_trans(rtBinaryPredicate(stranger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637751).
lisp_trans(documentation(stranger,vEnglishLanguage,s("(","#$stranger","?","H1","?","H2",")","means","that","?","H1","has","not","met","?","H2",",","or",",","in","other","words",",","(","#$not","(","#$acquaintance","?","H1","?","H2",")",")",".","Statements","made","with","#$stranger","should","be","temporally","specified","with","#$holdsDuring",".","Note","that","#$stranger","is","not","symmetric",",","meaning","that","?","H2","might","know","?","H1",".","For","the","symmetric","version",",","see","#$mutualStranger",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':637788).
lisp_trans(argIsa(stranger,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638146).
lisp_trans(argIsa(stranger,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638172).
lisp_trans(disjointRelation(stranger,acquaintance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638199).
lisp_trans(rtBinaryPredicate(mutualStranger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638241).
lisp_trans(rtSymmetricRelation(mutualStranger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638283).
lisp_trans(documentation(mutualStranger,vEnglishLanguage,s("(","#$mutualStranger","?","H1","?","H2",")","means","that","?","H1","and","?","H2","have","not","met","each","other","and","do","not","know","each","other",".","Statements","made","with","this","predicate","should","be","temporally","specified","with","#$holdsDuring",".","See","also","the","weaker",",","non","-","symmetric","version","of","this","predicate",",","#$stranger",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638328).
lisp_trans(argIsa(mutualStranger,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638643).
lisp_trans(argIsa(mutualStranger,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638675).
lisp_trans(genlPreds(mutualStranger,stranger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638707).
lisp_trans(disjointRelation(mutualStranger,mutualAcquaintance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638746).
lisp_trans(rtBinaryPredicate(domesticPartner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638800).
lisp_trans(rtSymmetricRelation(domesticPartner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638843).
lisp_trans(rtIntentionalRelation(domesticPartner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638888).
lisp_trans(documentation(domesticPartner,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$domesticPartner","?","H1","?","H2",")",")","means","that","during","the","time","?","T1",",","?","H1","and","?","H2","live","together","and","share","a","common","domestic","life","but","are","not","joined","in","a","traditional","marriage",",","a","common","-","law","marriage",",","or","a","civil","union",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':638936).
lisp_trans(argIsa(domesticPartner,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639213).
lisp_trans(argIsa(domesticPartner,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639246).
lisp_trans(disjointRelation(spouse,domesticPartner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639280).
lisp_trans(genlPreds(domesticPartner,cohabitant),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639322).
lisp_trans(rtBinaryPredicate(legalGuardian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639364).
lisp_trans(rtAntisymmetricRelation(legalGuardian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639405).
lisp_trans(rtPartialValuedRelation(legalGuardian),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639452).
lisp_trans(documentation(legalGuardian,vEnglishLanguage,s("(","#$holdsDuring","?","T1","(","#$legalGuardian","?","H1","?","H2",")",")","means","that","during","the","time","?","T1",",","?","H2","has","legal","authority","over","?","H1",",","and","is","responsible","for","looking","after","?","H1","'s","interests",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639500).
lisp_trans(argIsa(legalGuardian,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639715).
lisp_trans(argIsa(legalGuardian,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639746).
lisp_trans(=>(and(locatedAtTime(OBJ,TIME,PLACE),geographicSubregion(PLACE,REGION)),locatedAtTime(OBJ,TIME,REGION)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639778).
lisp_trans(genls(actSeating,actGuiding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639908).
lisp_trans(documentation(actSeating,vEnglishLanguage,s("Guiding","someone","to","a","#$Seat",",","e",".","g",".","as","when","an","usher","shows","someone","to","a","#$Seat","in","an","#$Auditorium",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':639935).
lisp_trans(=>(actSeating(S),exists([P,H],and(experiencer(S,H),tSumoHuman(H),destination(S,P),tSumoSeat(P)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':640076).
lisp_trans(genls(actSignalling,actGuiding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':640238).
lisp_trans(documentation(actSignalling,vEnglishLanguage,s("Signalling","is","the","subclass","of","#$Guiding","processes","in","which","an","agent",",","animate","or","inanimate",",","sends","a","signal","to","another","#$Object",".","In","many","cases",",","this","signal","will","be","an","electrical","or","electronic","one",".","Some","signals","may","directly","control","the","behavior","of","the","object","signalled",",","while","others","may","merely","cause","information","to","be","presented",".","Instances","of","electrical","Signalling","are","typically","more","complex","than","simply","than","operation","of","a","#$DeviceSwitch",",","though","in","some","cases",",","Signalling","involves","remote","activation","of","such","a","switch","by","another","device",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':640268).
lisp_trans(genls(tSumoAchievingControl,actGuiding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':640905).
lisp_trans(documentation(tSumoAchievingControl,vEnglishLanguage,'AchievingControl is the class of all events in which an #$Agent gains physical control over some object.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':640941).
lisp_trans(rtCaseRole(controlled),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641100).
lisp_trans(documentation(controlled,vEnglishLanguage,s("(","#$controlled","?","EVENT","?","OBJECT",")","means","that","during","the","#$AchievingControl","denoted","by","?","EVENT",",","?","OBJECT","comes","to","be","physically","controlled","by","an","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641131).
lisp_trans(genlPreds(controlled,patient),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641323).
lisp_trans(argIsa(controlled,1,tSumoAchievingControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641356).
lisp_trans(argIsa(controlled,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641395).
lisp_trans(rtCaseRole(gainsControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641425).
lisp_trans(documentation(gainsControl,vEnglishLanguage,s("(","#$gainsControl","?","EVENT","?","AGENT",")","means","that","during","?","EVENT",",","?","AGENT","gains","control","of","the","#$patient","(","object",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641458).
lisp_trans(genlPreds(gainsControl,agent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641610).
lisp_trans(argIsa(gainsControl,1,tSumoAchievingControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641643).
lisp_trans(argIsa(gainsControl,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641684).
lisp_trans(genls(tSumoChangeOfControl,tSumoAchievingControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641715).
lisp_trans(documentation(tSumoChangeOfControl,vEnglishLanguage,s("A","#$ChangeOfControl","is","an","event","in","which","an","#$agent","gains","physical","control","over","some","object","that","was","previously","controlled","by","a","different","#$agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641759).
lisp_trans(rtCaseRole(losesControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641957).
lisp_trans(genlPreds(losesControl,experiencer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':641990).
lisp_trans(documentation(losesControl,vEnglishLanguage,s("(","#$losesControl","?","EVENT","?","AGENT",")","means","that","during","?","EVENT",",","?","AGENT","loses","physical","control","of","the","#$controlled","object",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642029).
lisp_trans(argIsa(losesControl,1,tSumoChangeOfControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642191).
lisp_trans(argIsa(losesControl,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642231).
lisp_trans(genls(actCapturing,tSumoChangeOfControl),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642262).
lisp_trans(documentation(actCapturing,vEnglishLanguage,s("A","#$Capturing","is","a","#$ChangeOfControl","event","in","which","an","#$Agent","gains","physical","control","over","another","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642299).
lisp_trans(=>(and(actCapturing(CAPTURE),controlled(CAPTURE,OBJ)),tAgent(OBJ)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642452).
lisp_trans(genls(tSumoPlacingUnderArrest,actCapturing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642555).
lisp_trans(genls(tSumoPlacingUnderArrest,tSumoLawEnforcement),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642595).
lisp_trans(documentation(tSumoPlacingUnderArrest,vEnglishLanguage,'PlacingUnderArrest is the class of events in which a #$CognitiveAgent, typically a law enforcement professional, legally takes into custody a human or group of humans.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642640).
lisp_trans(genls(tSumoPlacingUnderArrest,actSocialInteraction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642864).
lisp_trans(genls(tSumoPlacingUnderArrest,actLegalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642912).
lisp_trans(rtCaseRole(arrested),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642955).
lisp_trans(documentation(arrested,vEnglishLanguage,s("(","#$arrested","?","EVENT","?","AGENT",")","means","that","during","?","EVENT",",","?","AGENT","is","taken","into","custody",",","typically","by","a","representative","of","a","law","enforcement","organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':642984).
lisp_trans(argIsa(arrested,1,tSumoPlacingUnderArrest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643176).
lisp_trans(argIsa(arrested,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643215).
lisp_trans(genlPreds(arrested,controlled),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643241).
lisp_trans(=>(and(tSumoPlacingUnderArrest(ARREST),agent(ARREST,AGENT)),mobCognitiveAgent(AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643276).
lisp_trans(=>(arrested(ARREST,OBJ),or(tSumoHuman(OBJ),tSumoGroupOfPeople(OBJ))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643394).
lisp_trans(=>(and(tSumoPlacingUnderArrest(ARREST),arrested(ARREST,AGENT),tSumoGroupOfPeople(AGENT),member(MEMBER,AGENT)),exists([ARREST1],and(tSumoPlacingUnderArrest(ARREST1),arrested(ARREST1,MEMBER),subProcess(ARREST1,ARREST)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643493).
lisp_trans(=>(and(actProcess(PROC),eventLocated(PROC,LOC),subProcess(SUB,PROC)),eventLocated(SUB,LOC)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643790).
lisp_trans(=>(and(actImprisoning(IMPRISON),detainee(IMPRISON,AGENT),tSumoHuman(AGENT),time(IMPRISON,INTERVAL),timeOfTimeInterval(INTERVAL)),exists([ARREST,TIME],and(timeOfTimeInterval(TIME),time(ARREST,TIME),earlier(TIME,INTERVAL),tSumoPlacingUnderArrest(ARREST),arrested(ARREST,AGENT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':643918).
lisp_trans(rtCaseRole(conveyance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644308).
lisp_trans(documentation(conveyance,vEnglishLanguage,s("(","#$conveyance","?","EVENT","?","OBJ",")","means","that","?","OBJ","is","the","#$Vehicle","or","other","transportation","device","used","in","?","EVENT",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644339).
lisp_trans(genlPreds(conveyance,instrument),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644491).
lisp_trans(argIsa(conveyance,1,actTransportation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644527).
lisp_trans(argIsa(conveyance,2,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644564).
lisp_trans(=>(and(actTransportation(TRANSPORT),instrument(TRANSPORT,VEHICLE),tObjectRoadVehicle(VEHICLE)),tSumoTransportViaRoadVehicle(TRANSPORT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644608).
lisp_trans(=>(and(tSumoTransportViaRoadVehicle(TRANSPORT),conveyance(TRANSPORT,VEHICLE)),tObjectRoadVehicle(VEHICLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644784).
lisp_trans(=>(tSumoTransportViaRoadVehicle(TRANSPORT),exists([DRIVING],and(actDriving(DRIVING),subProcess(TRANSPORT,DRIVING)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':644919).
lisp_trans(=>(and(actTransportation(TRANSPORT),subProcess(TRANSPORT,DRIVE),actDriving(DRIVE),instrument(TRANSPORT,VEHICLE),tObjectTransportationDevice(VEHICLE)),patient(DRIVE,VEHICLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':645078).
lisp_trans(=>(and(actDriving(DRIVE),patient(DRIVE,VEHICLE),tObjectRoadVehicle(VEHICLE)),exists([TRANSPORT],and(tSumoTransportViaRoadVehicle(TRANSPORT),subProcess(TRANSPORT,DRIVE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':645308).
lisp_trans(=>(and(actDriving(DRIVING),subProcess(TRANSPORT,DRIVING),actTransportation(TRANSPORT),agent(DRIVING,DRIVER)),transported(TRANSPORT,DRIVER)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':645542).
lisp_trans(=>(and(actDriving(DRIVING),subProcess(TRANSPORT,DRIVING),actTransportation(TRANSPORT),destination(DRIVING,DEST)),destination(TRANSPORT,DEST)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':645730).
lisp_trans(=>(and(actDriving(DRIVING),subProcess(TRANSPORT,DRIVING),actTransportation(TRANSPORT),tSumoVehicle(VEHICLE),patient(DRIVING,VEHICLE)),conveyance(TRANSPORT,VEHICLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':645920).
lisp_trans(genls(tObjectGasolineEngine,tObjectInternalCombustionEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646143).
lisp_trans(documentation(tObjectGasolineEngine,vEnglishLanguage,'GasolineEngine is the subclass of  #$InternalCombustionEngines that use #$Gasoline as their resource.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646194).
lisp_trans(=>(isa(R,uOperatingFn(tObjectGasolineEngine)),exists([F],and(tSumoGasoline(F),resource(R,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646347).
lisp_trans(genls(tObjectDieselEngine,tObjectInternalCombustionEngine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646477).
lisp_trans(documentation(tObjectDieselEngine,vEnglishLanguage,'DieselEngine is the subclass of  #$InternalCombustionEngines that use #$DieselFuel as their resource.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646526).
lisp_trans(=>(isa(P,uOperatingFn(tObjectDieselEngine)),exists([F],and(tDieselFuel(F),resource(P,F)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646678).
lisp_trans(rtBinaryPredicate(typicalPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646807).
lisp_trans(rtSpatialRelation(typicalPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646846).
lisp_trans(relatedInternalConcept(typicalPart,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646885).
lisp_trans(documentation(typicalPart,vEnglishLanguage,s("An","instance","of","the","first","argument","is","typically","found","as","part","of","an","instance","of","the","second","argument",".","This","is","a","class","-","level","relation","roughly","corresponding","to","#$part",".","Note","that","this","does","not","imply","that","such","wholes","typically","have","such","parts",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':646927).
lisp_trans(argGenl(typicalPart,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647217).
lisp_trans(argGenl(typicalPart,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647255).
lisp_trans(=>(typicalPart(PART,WHOLE),exists([X,Y],and(isa(X,WHOLE),isa(Y,PART),part(Y,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647294).
lisp_trans(=>(and(typicalPart(PART,WHOLE),isa(X,PART),equal(PARTPROB,vProbabilityFn(exists([Y],and(isa(Y,WHOLE),part(X,Y))))),equal(NOTPARTPROB,vProbabilityFn(not(exists([Z],and(isa(Z,WHOLE),part(X,Z))))))),greaterThan(PARTPROB,NOTPARTPROB)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647437).
lisp_trans(rtBinaryPredicate(typicallyContainsPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647850).
lisp_trans(rtSpatialRelation(typicallyContainsPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647899).
lisp_trans(relatedInternalConcept(typicallyContainsPart,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':647948).
lisp_trans(documentation(typicallyContainsPart,vEnglishLanguage,s("An","instance","of","the","second","argument","typically","contains","an","instance","of","the","first","argument",".","This","is","a","class","-","level","relation","roughly","corresponding","to","#$part",".","Note","that","this","does","not","imply","that","such","parts","typically","have","such","wholes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648000).
lisp_trans(argGenl(typicallyContainsPart,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648289).
lisp_trans(argGenl(typicallyContainsPart,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648337).
lisp_trans(=>(typicallyContainsPart(PART,WHOLE),exists([X,Y],and(isa(X,WHOLE),isa(Y,PART),part(Y,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648386).
lisp_trans(=>(and(typicallyContainsPart(PART,WHOLE),isa(Y,WHOLE),equal(PARTPROB,vProbabilityFn(exists([X1],and(isa(X1,PART),part(X1,Y))))),equal(NOTPARTPROB,vProbabilityFn(not(exists([X2],and(isa(X2,PART),part(X2,Y))))))),greaterThan(PARTPROB,NOTPARTPROB)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648539).
lisp_trans(rtBinaryPredicate(initialPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':648967).
lisp_trans(rtSpatialRelation(initialPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649006).
lisp_trans(relatedInternalConcept(initialPart,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649045).
lisp_trans(documentation(initialPart,vEnglishLanguage,s("Every","instance","of","the","first","argument","is","initially","found","as","part","of","an","instance","of","the","second","argument",",","even","though","it","might","lose","that","part","later","in","its","lifetime",".","While","the","part","must","initially","exist","as","part","of","a","whole",",","this","does","not","say","that","each","whole","necessarily","initially","contains","such","a","part",".","For","example",",","a","thumb","must","at","some","time","have","been","part","of","a","hand",",","but","every","hand","need","not","have","a","thumb",",","even","at","birth",".","This","is","a","class","-","level","relation","roughly","corresponding","to","#$part",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649087).
lisp_trans(argGenl(initialPart,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649623).
lisp_trans(argGenl(initialPart,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649661).
lisp_trans(=>(and(initialPart(C2,C1),isa(PART,C2)),exists([WHOLE],and(isa(WHOLE,C1),holdsDuring(uBeginFn(uWhenFn(PART)),part(PART,WHOLE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649700).
lisp_trans(initialPart(tSumoAnimalAnatomicalStructure,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649911).
lisp_trans(rtBinaryPredicate(initiallyContainsPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':649959).
lisp_trans(rtSpatialRelation(initiallyContainsPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650008).
lisp_trans(relatedInternalConcept(initiallyContainsPart,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650057).
lisp_trans(documentation(initiallyContainsPart,vEnglishLanguage,s("Every","instance","of","the","second","argument","initially","contains","an","instance","of","the","first","argument",",","even","though","it","might","lose","that","part","later","in","its","lifetime",".","Every","normal","human","starts","life","with","an","appendix","for","example",".","While","the","whole","must","initially","contain","such","a","part",",","this","does","not","say","that","each","part","necessarily","initially","exists","as","part","of","such","a","whole",".","This","is","a","class","-","level","relation","roughly","corresponding","to","#$part",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650109).
lisp_trans(argGenl(initiallyContainsPart,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650592).
lisp_trans(argGenl(initiallyContainsPart,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650640).
lisp_trans(=>(and(initiallyContainsPart(C2,C1),isa(WHOLE,C1)),exists([PART],and(isa(PART,C2),holdsDuring(uBeginFn(uWhenFn(WHOLE)),part(PART,WHOLE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650689).
lisp_trans(genls(tSumoCausingHappiness,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650899).
lisp_trans(documentation(tSumoCausingHappiness,vEnglishLanguage,s("Any","#$Process","whose","result","is","that","the","patient","of","the","process","is","happy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':650935).
lisp_trans(=>(and(tSumoCausingHappiness(C),patient(C,P)),and(holdsDuring(uBeginFn(uWhenFn(C)),not(sumoAttribute(P,vtHappiness))),holdsDuring(iTimeOf_EndFn(uWhenFn(C)),sumoAttribute(P,vtHappiness)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651059).
lisp_trans(genls(tSumoCausingPain,tSumoCausingUnhappiness),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651302).
lisp_trans(documentation(tSumoCausingPain,vEnglishLanguage,s("Any","#$Process","whose","result","is","that","the","patient","of","the","process","is","in","#$Pain",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651344).
lisp_trans(genls(tSumoCausingUnhappiness,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651468).
lisp_trans(documentation(tSumoCausingUnhappiness,vEnglishLanguage,s("Any","#$Process","whose","result","is","that","the","patient","of","the","process","is","unhappy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651506).
lisp_trans(=>(and(tSumoCausingHappiness(C),patient(C,P)),and(holdsDuring(uBeginFn(uWhenFn(C)),not(sumoAttribute(P,vtUnhappiness))),holdsDuring(iTimeOf_EndFn(uWhenFn(C)),sumoAttribute(P,vtUnhappiness)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651634).
lisp_trans(genls(actLengthening,actIncreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651881).
lisp_trans(documentation(actLengthening,vEnglishLanguage,'Increasing the length of something.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':651915).
lisp_trans(=>(and(actLengthening(L),patient(L,O)),exists([L1,L2],and(holdsDuring(uBeginFn(uWhenFn(L)),length(O,L1)),holdsDuring(iTimeOf_EndFn(uWhenFn(L)),length(O,L2)),greaterThan(L2,L1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':652000).
lisp_trans(genls(actSaving,actIncreasing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':652245).
lisp_trans(documentation(actSaving,vEnglishLanguage,s("Any","instance","of","#$Increasing","where","the","#$PhysicalQuantity","involved","is","a","#$CurrencyMeasure",".","This","includes","saving","in","a","financial","account","as","well","as","stuffing","gold","bars","under","the","matress",",","or","a","squirrel","saving","nuts","for","winter",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':652274).
lisp_trans(=>(and(actSaving(S),patient(S,O),agent(S,A)),exists([Q1,Q2],and(holdsDuring(uBeginFn(uWhenFn(S)),monetaryValue(O,Q1)),holdsDuring(iTimeOf_EndFn(uWhenFn(S)),monetaryValue(O,Q2)),possesses(A,O),lessThan(Q1,Q2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':652540).
lisp_trans(documentation(financialAsset,vEnglishLanguage,s("A","predicate","that","relates","an","#$Agent","to","any","item","of","economic","value","owned","by","the","#$Agent",".","Examples","of","financial","assets","are","cash",",","securities",",","accounts","receivable",",","inventory",",","office","equipment",",","a","house",",","a","car",",","and","other","property",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':652847).
lisp_trans(argIsa(financialAsset,1,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653125).
lisp_trans(argIsa(financialAsset,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653157).
lisp_trans(genlPreds(financialAsset,possesses),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653190).
lisp_trans(=>(financialAsset(P,A),exists([V],monetaryValue(A,V))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653230).
lisp_trans(genls(actBarking,tSumoRadiatingSound),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653303).
lisp_trans(documentation(actBarking,vEnglishLanguage,s("Any","instance","of","#$RadiatingSound","which","is","produced","by","a","#$Canine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653337).
lisp_trans(=>(actBarking(B),exists([D],and(tSumoCanine(D),agent(B,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653446).
lisp_trans(genls(actMenstruation,actOrganOrTissueProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653549).
lisp_trans(documentation(actMenstruation,vEnglishLanguage,s("A","periodic","discharge","of","#$Blood","and","other","#$BiologicalSubstances","by","#$Females","that","is","part","of","a","readjustment","of","the","uterus",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653594).
lisp_trans(genls(actOrganification,actOrganOrTissueProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653768).
lisp_trans(documentation(actOrganification,vEnglishLanguage,s("Any","#$BiologicalProcess","that","results","in","the","formation","of","an","#$Organ",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653815).
lisp_trans(=>(actOrganification(P),exists([O],and(tPartTypeOrgan(O),result(P,O)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':653935).
lisp_trans(genls(actBiologicalConception,actOrganOrTissueProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654055).
lisp_trans(relatedInternalConcept(actBiologicalConception,actSexualReproduction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654108).
lisp_trans(relatedInternalConcept(actBiologicalConception,tSumoBirth),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654173).
lisp_trans(relatedInternalConcept(actBiologicalConception,actMating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654225).
lisp_trans(documentation(actBiologicalConception,vEnglishLanguage,s("The","production","of","a","zygote","from","the","fusion","of","a","male","and","female","gamete",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654278).
lisp_trans(=>(actSexualReproduction(SR),exists([C],and(actBiologicalConception(C),subProcess(C,SR)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654406).
lisp_trans(genls(tObjectContraceptiveDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654541).
lisp_trans(documentation(tObjectContraceptiveDevice,vEnglishLanguage,'Devices which permit sexual intercourse but  which reduce the likelihood of conception.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654579).
lisp_trans(=>(tObjectContraceptiveDevice(C),hasPurpose(C,exists([M],and(actMating(M),patient(M,C),not(exists([SR],and(actBiologicalConception(SR),result(M,SR)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':654723).
lisp_trans(genls(tSumoBirdEgg,tEgg),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655003).
lisp_trans(documentation(tSumoBirdEgg,vEnglishLanguage,s("Any","#$Egg","that","is","produced","by","a","#$Bird",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655026).
lisp_trans(=>(tSumoBirdEgg(E),exists([SR,B],and(actSexualReproduction(SR),agent(SR,B),tClazzBird(B),result(SR,E)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655108).
lisp_trans(genls(tSumoBiopsy,actDiagnosticProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655276).
lisp_trans(genls(tSumoBiopsy,actRemoving),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655312).
lisp_trans(documentation(tSumoBiopsy,vEnglishLanguage,s("Any","#$DiagnosticProcess","which","involves","the","examination","of","#$BodySubstances","taken","from","a","living","#$Organism",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655339).
lisp_trans(=>(and(tSumoBiopsy(B),patient(B,BS)),tSumoBodySubstance(BS)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655488).
lisp_trans(genls(actMating,actOrganismProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655579).
lisp_trans(documentation(actMating,vEnglishLanguage,s("Any","process","of","sexual","intercourse","between","two","#$Humans","or","#$Animals",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655613).
lisp_trans(genls(actRaping,actMating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655725).
lisp_trans(genls(actRaping,actCriminalAction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655750).
lisp_trans(documentation(actRaping,vEnglishLanguage,s("Any","instance","of","#$Mating","where","one","participant","does","not","consent",".","This","is","limited","to","acts","between","#$Humans",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655783).
lisp_trans(=>(actRaping(R),exists([A],and(experiencer(R,A),not(wants(A,R))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':655934).
lisp_trans(genls(tSumoLayingEggs,actOrganismProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656050).
lisp_trans(documentation(tSumoLayingEggs,vEnglishLanguage,s("Any","#$OrganismProcess","where","an","#$Egg","is","expelled","from","the","body","of","a","#$Animal",",","e",".","g",".","a","#$Bird","or","#$Reptile","laying","eggs",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656088).
lisp_trans(=>(and(tSumoLayingEggs(L),experiencer(L,A)),exists([E],and(tEgg(E),patient(L,E),holdsDuring(uBeginFn(uWhenFn(L)),part(E,A)),holdsDuring(iTimeOf_EndFn(uWhenFn(L)),not(part(E,A)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656253).
lisp_trans(=>(and(tSumoLayingEggs(L),experiencer(L,A)),and(tClazzAnimal(A),sumoAttribute(A,tFemale))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656529).
lisp_trans(rtBinaryPredicate(affiliatedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656655).
lisp_trans(argIsa(affiliatedOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656705).
lisp_trans(argIsa(affiliatedOrganization,2,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656752).
lisp_trans(documentation(ideologicalAffiliationOfOrganization,vEnglishLanguage,s("(","ideologicalAffiliationOfOrganization","?","ORG","?","GOV",")","means","that","one","of","the","goals","of","?","ORG","is","to","realize","the","#$FormOfGovernment","?","GOV",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':656800).
lisp_trans(rtBinaryPredicate(ideologicalAffiliationOfOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657000).
lisp_trans(argIsa(ideologicalAffiliationOfOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657064).
lisp_trans(argIsa(ideologicalAffiliationOfOrganization,2,tSumoFormOfGovernment),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657125).
lisp_trans(documentation(religiousAffiliationOfOrganization,vEnglishLanguage,s("(","religiousAffiliationOfOrganization","?","ORG","?","BELIEF",")","means","that","one","of","the","goals","of","?","ORG","is","to","advance","the","religious","teachings","of","the","#$BeliefGroup","?","BELIEF",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657191).
lisp_trans(rtBinaryPredicate(religiousAffiliationOfOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657416).
lisp_trans(argIsa(religiousAffiliationOfOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657478).
lisp_trans(argIsa(religiousAffiliationOfOrganization,2,tSumoBeliefGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657537).
lisp_trans(documentation(allegiance,vEnglishLanguage,s("(","allegiance","?","AGENT","?","ENTITY",")","means","that","the","#$CognitiveAgent","?","AGENT","owes","its","allegiance","to","the","political","entity","?","ENTITY",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657596).
lisp_trans(rtBinaryPredicate(allegiance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657762).
lisp_trans(argIsa(allegiance,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657800).
lisp_trans(argIsa(allegiance,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657837).
lisp_trans(documentation(ancestorOrganization,vEnglishLanguage,s("(","ancestorOrganization","?","ORG1","?","ORG2",")","means","that","the","#$Organization","?","ORG1","descended","from","the","#$Organization","?","ORG2",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':657875).
lisp_trans(rtBinaryPredicate(ancestorOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658043).
lisp_trans(rtTransitiveRelation(ancestorOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658091).
lisp_trans(rtIrreflexiveRelation(ancestorOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658142).
lisp_trans(rtPartialValuedRelation(ancestorOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658194).
lisp_trans(argIsa(ancestorOrganization,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658248).
lisp_trans(argIsa(ancestorOrganization,2,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658293).
lisp_trans(disjointRelation(ancestorOrganization,subOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658338).
lisp_trans(documentation(anniversary,vEnglishLanguage,s("(","anniversary","?","PHYSICAL","?","TIME",")","means","that","?","TIME","is","the","class","of","TimeIntervals","which","mark","the","anniversary","of","?","PHYSICAL",".","For","example",",","(","anniversary","Christmas","(","#$DayFn","35","#$December",")",")","means","that","Christmas","is","celebrated","each","year","on","the","25","th","of","#$December",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658395).
lisp_trans(rtBinaryPredicate(anniversary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658696).
lisp_trans(rtTemporalRelation(anniversary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658735).
lisp_trans(argIsa(anniversary,1,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658775).
lisp_trans(argIsa(anniversary,2,timeOfTimeInterval),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658807).
lisp_trans(documentation(birthday,vEnglishLanguage,s("(","birthday","?","PERSON","?","DAY",")","means","that","?","DAY","is","the","anniversary","each","year","of","the","birth","of","?","PERSON",".","For","example",",","(","birthday","#$WilliamJeffersonClinton","(","#$DayFn","19","#$August",")",")","means","that","Bill","Clinton","'s","birthday","is","#$August","19","th",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':658844).
lisp_trans(rtBinaryPredicate(birthday),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659110).
lisp_trans(argIsa(birthday,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659146).
lisp_trans(argIsa(birthday,2,tSumoDay),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659172).
lisp_trans(genlPreds(birthday,anniversary),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659196).
lisp_trans(documentation(birthplace,vEnglishLanguage,s("(","birthplace","?","INDIV","?","PLACE",")","means","that","the","#$Animal","?","INDIV","was","born","at","the","location","?","PLACE",".","The","location","may","be","a","geographic","area","or","a","building",",","such","as","a","hospital",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659232).
lisp_trans(rtBinaryPredicate(birthplace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659442).
lisp_trans(argIsa(birthplace,1,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659480).
lisp_trans(argIsa(birthplace,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659509).
lisp_trans(=>(birthplace(INDIV,PLACE),exists([BIRTH],and(tSumoBirth(BIRTH),experiencer(BIRTH,INDIV),eventLocated(BIRTH,PLACE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659539).
lisp_trans(documentation(birthdate,vEnglishLanguage,s("(","birthdate","?","PERSON","?","DAY",")","means","that","?","DAY","is","the","#$Day","on","which","the","?","PERSON","was","born",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659703).
lisp_trans(rtBinaryPredicate(birthdate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659833).
lisp_trans(argIsa(birthdate,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659870).
lisp_trans(argIsa(birthdate,2,tSumoDay),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659897).
lisp_trans(=>(birthdate(P,D),exists([B],and(tSumoBirth(B),experiencer(B,P),date(B,D)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':659922).
lisp_trans(documentation(deathdate,vEnglishLanguage,s("(","birthdate","?","PERSON","?","DAY",")","means","that","?","DAY","is","the","#$Day","on","which","the","?","PERSON","died",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660045).
lisp_trans(argIsa(deathdate,1,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660171).
lisp_trans(argIsa(deathdate,2,tSumoDay),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660198).
lisp_trans(rtBinaryPredicate(deathdate),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660223).
lisp_trans(=>(deathdate(P,T),exists([D],and(tSumoDeath(D),experiencer(D,P),date(D,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660261).
lisp_trans(documentation(deathplace,vEnglishLanguage,s("(","deathplace","?","INDIV","?","PLACE",")","means","that","the","#$Animal","?","INDIV","died","at","the","location","?","PLACE",".","The","location","may","be","a","geographic","area","or","a","building",",","such","as","a","hospital",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660384).
lisp_trans(rtBinaryPredicate(deathplace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660590).
lisp_trans(argIsa(deathplace,1,tClazzAnimal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660628).
lisp_trans(argIsa(deathplace,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660657).
lisp_trans(=>(deathplace(P,L),exists([D],and(tSumoDeath(D),experiencer(D,P),eventLocated(D,L)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660686).
lisp_trans(rtTernaryPredicate(equipmentCount),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660818).
lisp_trans(argIsa(equipmentCount,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660861).
lisp_trans(argGenl(equipmentCount,2,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660894).
lisp_trans(argIsa(equipmentCount,3,vtQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660935).
lisp_trans(documentation(equipmentCount,vEnglishLanguage,s("(","#$equipmentCount","?","OBJECT","?","TYPE","?","QUANTITY",")","means","that","?","OBJECT","is","equipped","with","devices","of","the","type","?","TYPE",",","in","the","number","?","QUANTITY",".","Equipment","associated","with","an","?","OBJECT","may","be","a","#$component","of","?","OBJECT","(","such","as","the","emergency","oxygen","system","built","into","passenger","jets",")","or","it","may","be","a","device","simply","located","on","or","with","?","OBJECT","(","such","as","a","first","aid","kit",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':660971).
lisp_trans(documentation(equipmentType,vEnglishLanguage,s("(","equipmentType","?","THING","?","TYPE",")","means","that","the","#$Artifact","?","THING","has","a","component","or","attachment","of","#$Device","?","TYPE",".","See","also","#$equipmentTypeCount",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661374).
lisp_trans(rtBinaryPredicate(equipmentType),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661566).
lisp_trans(argIsa(equipmentType,1,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661607).
lisp_trans(argIsa(equipmentType,2,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661641).
lisp_trans(=>(equipmentType(O,T),exists([D],and(isa(D,T),or(part(D,O),connected(D,O))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661674).
lisp_trans(=>(equipmentCount(O,T,C),equipmentType(O,T)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661813).
lisp_trans(=>(equipmentType(O,T),exists([C],and(greaterThanOrEqualTo(C,1),equipmentCount(O,T,C)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661871).
lisp_trans(documentation(grammaticalRelation,vEnglishLanguage,s("(","grammaticalRelation","?","PHRASE","?","SENTENCE",")","means","that","the","#$Phrase","?","PHRASE","has","a","grammatical","relation","to","the","Sentence","?","SENTENCE",",","i",".","e",".","it","is","a","subject",",","object",",","main","verb",",","etc",".","of","the","?","SENTENCE",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':661993).
lisp_trans(rtBinaryPredicate(grammaticalRelation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':662239).
lisp_trans(argIsa(grammaticalRelation,1,xtPhrase),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':662286).
lisp_trans(argIsa(grammaticalRelation,2,ftSentence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':662324).
lisp_trans(rtBinaryPredicate(distanceOnPath),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':663044).
lisp_trans(documentation(distanceOnPath,vEnglishLanguage,s("(","distanceOnPath","?","DIST","?","PATH",")","means","that","for","a","given","path","(","which","is","a","pathInSystem",")","that","the","distance","of","the","route","is","the","measurement","?","DIST",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':663086).
lisp_trans(argIsa(distanceOnPath,1,vtConstantQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':663275).
lisp_trans(argIsa(distanceOnPath,2,tSumoTransitway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':663318).
lisp_trans(rtBinaryPredicate(inString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664027).
lisp_trans(argIsa(inString,1,ftCharacter),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664063).
lisp_trans(argIsa(inString,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664093).
lisp_trans(documentation(inString,vEnglishLanguage,s("(","#$inString","?","#$Character","?","#$SymbolicString",")","means","that","?","#$Character","is","#$part","of","?","#$SymbolicString",".","See","also","#$subString",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664128).
lisp_trans(genlPreds(inString,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664294).
lisp_trans(=>(and(ftString(STRING),part(CHAR,STRING),ftCharacter(CHAR)),inString(CHAR,STRING)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664357).
lisp_trans(rtAntisymmetricRelation(subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':664960).
lisp_trans(rtReflexiveRelation(subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665003).
lisp_trans(rtBinaryPredicate(subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665042).
lisp_trans(rtTotalValuedRelation(subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665079).
lisp_trans(argIsa(subString,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665120).
lisp_trans(argIsa(subString,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665156).
lisp_trans(documentation(subString,vEnglishLanguage,s("(","#$subString","?","#$SymbolicString","-1","?","#$SymbolicString","-2",")","means","that","?","#$SymbolicString","-1","is","#$part","of","?","#$SymbolicString","-2",".","?","#$SymbolicString","-2","includes","all","the","same","#$Characters","as","?","#$SymbolicString","-1","and","in","the","same","order",",","but","?","#$SymbolicString","-2","may","include","more","#$Characters","than","?","#$SymbolicString","-1",".","See","also","#$inString",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665192).
lisp_trans(genlPreds(subString,part),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665558).
lisp_trans(=>(and(subString(S1,S2),equal(L1,uStringLengthFn(S1)),equal(L2,uStringLengthFn(S2))),lessThanOrEqualTo(L1,L2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665588).
lisp_trans(=>(and(subString(S1,S2),inString(CH,S1)),inString(CH,S2)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665730).
lisp_trans(rtTernaryFunction(xSubstringFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665907).
lisp_trans(rtPartialValuedRelation(xSubstringFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665946).
lisp_trans(rtSingleValuedRelation(xSubstringFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':665991).
lisp_trans(argIsa(xSubstringFn,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666035).
lisp_trans(argIsa(xSubstringFn,2,ftNonnegativeInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666073).
lisp_trans(argIsa(xSubstringFn,3,ftNonnegativeInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666115).
lisp_trans(resultIsa(xSubstringFn,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666157).
lisp_trans(documentation(xSubstringFn,vEnglishLanguage,s("(","#$SubstringFn","?","#$SymbolicString","?","#$NonnegativeInteger","-1","?","#$NonnegativeInteger","-2",")","denotes","a","string","that","is","a","#$subString","of","?","#$SymbolicString",",","begins","with","the","#$Character","at","the","index","?","#$NonnegativeInteger","-1",",","and","ends","with","the","#$Character","at","the","index","(","#$SubtractionFn","?","#$NonnegativeInteger","-2","1",")",".","The","first","#$Character","in","?","#$SymbolicString","is","denoted","by","the","index","0",".","If","the","value","of","?","#$NonnegativeInteger","-1","or","?","#$NonnegativeInteger","-2","is","greater","than","the","value","of","(","#$StringLengthFn","?","#$SymbolicString",")",",","or","if","?","#$NonnegativeInteger","-1","is","greater","than","?","#$NonnegativeInteger","-2",",","the","result","of","evaluating","the","#$SubstringFn","expression","is","undefined",".","Example",":","(","#$equal","&","quot",";","Charle","&","quot",";","(","#$SubstringFn","&","quot",";","Charles","Darwin","&","quot",";","0","6",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666192).
lisp_trans(=>(and(equal(SUB,xSubstringFn(STRING,START,END)),equal(LEN,uStringLengthFn(STRING))),and(lessThanOrEqualTo(START,END),lessThan(START,LEN),lessThanOrEqualTo(END,LEN))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':666968).
lisp_trans(rtUnaryFunction(uStringLengthFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667180).
lisp_trans(rtTotalValuedRelation(uStringLengthFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667220).
lisp_trans(rtSingleValuedRelation(uStringLengthFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667266).
lisp_trans(argIsa(uStringLengthFn,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667313).
lisp_trans(resultIsa(uStringLengthFn,ftNonnegativeInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667354).
lisp_trans(documentation(uStringLengthFn,vEnglishLanguage,s("This","#$UnaryFunction","takes","a","#$SymbolicString","as","its","sole","argument",".","The","result","of","evaluating","a","term","formed","with","#$StringLengthFn","is","a","#$NonnegativeInteger","that","denotes","the","number","of","#$Characters","in","the","#$SymbolicString",".","Example",":","(","#$equal","14","(","#$StringLengthFn","&","quot",";","Charles","Darwin","&","quot",";",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667396).
lisp_trans(rtBinaryPredicate(stringLength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667736).
lisp_trans(rtTotalValuedRelation(stringLength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667776).
lisp_trans(rtSingleValuedRelation(stringLength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667820).
lisp_trans(rtAsymmetricRelation(stringLength),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667865).
lisp_trans(argIsa(stringLength,1,ftNonnegativeInteger),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667908).
lisp_trans(argIsa(stringLength,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667951).
lisp_trans(documentation(stringLength,vEnglishLanguage,s("(","#$stringLength","?","#$NonnegativeInteger","?","#$SymbolicString",")","means","that","the","number","of","#$Characters","in","?","#$SymbolicString","is","?","#$NonnegativeInteger",".","Example",":","(","#$stringLength","14","&","quot",";","Charles","Darwin","&","quot",";",")",",","which","is","a","#$True","#$Sentence",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':667990).
lisp_trans(<=>(stringLength(INT,STRING),equal(INT,uStringLengthFn(STRING))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668267).
lisp_trans(rtBinaryFunction(uStringConcatenateFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668344).
lisp_trans(rtTotalValuedRelation(uStringConcatenateFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668390).
lisp_trans(rtSingleValuedRelation(uStringConcatenateFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668441).
lisp_trans(argIsa(uStringConcatenateFn,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668493).
lisp_trans(argIsa(uStringConcatenateFn,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668539).
lisp_trans(resultIsa(uStringConcatenateFn,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668585).
lisp_trans(documentation(uStringConcatenateFn,vEnglishLanguage,s("The","result","of","applying","this","#$Function","to","two","#$SymbolicString","arguments","is","a","third","#$SymbolicString","that","is","the","concatenation","of","the","two","arguments",".","Example",":","(","#$equal","&","quot",";","Charles","Darwin","&","quot",";","(","#$StringConcatenateFn","&","quot",";","Charles","&","quot",";","&","quot",";","Darwin","&","quot",";",")",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668628).
lisp_trans(rtTernaryPredicate(stringConcatenation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668944).
lisp_trans(rtTotalValuedRelation(stringConcatenation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':668992).
lisp_trans(rtSingleValuedRelation(stringConcatenation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669043).
lisp_trans(argIsa(stringConcatenation,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669095).
lisp_trans(argIsa(stringConcatenation,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669141).
lisp_trans(argIsa(stringConcatenation,3,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669187).
lisp_trans(documentation(stringConcatenation,vEnglishLanguage,s("(","#$stringConcatenation","?","#$SymbolicString","-1","?","#$SymbolicString","-2","?","#$SymbolicString","-3",")","means","that","?","#$SymbolicString","-3","can","be","formed","by","appending","?","#$SymbolicString","-1","and","?","#$SymbolicString","-2",",","in","order",".","Example",":","(","#$stringConcatenation","&","quot",";","Charles","&","quot",";","&","quot",";","Darwin","&","quot",";","&","quot",";","Charles","Darwin","&","quot",";",")","is","a","#$True","#$Sentence",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669233).
lisp_trans(<=>(stringConcatenation(S1,S1,S3),equal(S3,uStringConcatenateFn(S1,S2))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669609).
lisp_trans(rtTernaryPredicate(precedesInString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669696).
lisp_trans(argIsa(precedesInString,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669741).
lisp_trans(argIsa(precedesInString,2,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669784).
lisp_trans(argIsa(precedesInString,3,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669827).
lisp_trans(documentation(precedesInString,vEnglishLanguage,s("(","#$precedesInString","?","#$SymbolicString","-1","?","#$SymbolicString","-2","?","#$SymbolicString","-3",")","means","that","?","#$SymbolicString","-1","and","?","#$SymbolicString","-2","are","#$subStrings","of","?","#$SymbolicString","-3",",","and","?","#$SymbolicString","-1","occurs","sequentially","before","?","#$SymbolicString","-2","in","?","#$SymbolicString","-3",".","Example",":","(","#$precedesInString","&","quot",";","Johann","&","quot",";","&","quot",";","Bach","&","quot",";","&","quot",";","Johann","Sebastian","Bach","&","quot",";",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':669870).
lisp_trans(genlPreds(stringConcatenation,precedesInString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':670294).
lisp_trans(=>(precedesInString(S1,S2,S3),and(subString(S1,S3),subString(S2,S3))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':670346).
lisp_trans(=>(and(precedesInString(S1,S2,S4),precedesInString(S2,S3,S4)),precedesInString(S1,S3,S4)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':670441).
lisp_trans(genls(tSumoDescriptor,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':670944).
lisp_trans(genls(xtName,tSumoDescriptor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671108).
lisp_trans(documentation(xtName,vEnglishLanguage,'Name denotes the #$Class of #$ContentBearingObjects that identify an #$Entity, typically in some linguistic form such as an epithet, given name, street address, etc.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671135).
lisp_trans(genls(tSumoIdentifier,xtName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671343).
lisp_trans(documentation(tSumoIdentifier,vEnglishLanguage,'Identifier is the #$Class of #$ContentBearingObjects that identify some entity, such as a bank account, a person, or a location (e.g., as identified by a specific street address or GPS coordinates), perhaps uniquely under some circumstances.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671370).
lisp_trans(genls(tSumoPlaceDescriptor,tSumoDescriptor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671660).
lisp_trans(genls(tSumoDescriptorPart,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671698).
lisp_trans(genls(tSumoNamePart,tSumoDescriptorPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671745).
lisp_trans(genls(tSumoIdentifierPart,tSumoNamePart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671780).
lisp_trans(genls(tSumoPlaceID,tSumoPlaceDescriptor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671816).
lisp_trans(genls(tSumoLocalizablePlaceID,tSumoPlaceID),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671852).
lisp_trans(genls(tSumoPlaceAddress,tSumoPlaceID),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671891).
lisp_trans(genls(tSumoContactSite,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671924).
lisp_trans(documentation(tSumoContactSite,vEnglishLanguage,s("A","#$ContactSite","is","an","#$Object",",","typically","a","#$Place","or","a","#$Residence","or","a","#$CommunicationDevice","such","as","a","#$Telephone",",","that","has","some","kind","of","address","identifier","and","can","serve","as","a","point","of","contact","for","a","#$Human","or","#$Organization",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':671954).
lisp_trans(genls(tSumoTelephonyDevice,tSumoContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':672230).
lisp_trans(genls(tSumoTelephonyDevice,tObjectCommunicationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':672269).
lisp_trans(genls(tSumoTelephonyDevice,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':672316).
lisp_trans(documentation(tSumoTelephonyDevice,vEnglishLanguage,s("A","#$TelephonyDevice","is","a","#$CommunicationDevice","that",",","when","connected","to","a","#$TelephoneSystem",",","functions","as","an","access","point","allowing","end","users","(","#$Humans","or","other","#$Agents",",","such","as","autonomous","/","scheduled","#$ComputerPrograms",")","to","send","or","receive","signals","via","the","system",".","#$Telephones","and","#$FaxMachines","are","#$TelephonyDevices",".","A","given","#$Computer","may","or","may","not","function","as","a","#$TelephonyDevice",",","depending","on","the","#$ComputerPrograms","it","runs","and","the","#$ComputerComponents","that","are","part","of","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':672358).
lisp_trans(genls(tObjectTelephone,tSumoTelephonyDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':672887).
lisp_trans(rtTernaryPredicate(canonicalPlaceName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674026).
lisp_trans(documentation(canonicalPlaceName,vEnglishLanguage,s("(","#$canonicalPlaceName","?","PLACE","?","LANG","?","STRING",")","means","that","in","the","#$Language","?","LANG",",","the","#$SymbolicString","?","STRING","is","a","canonical","name","for","the","#$GeographicArea","?","PLACE")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674073).
lisp_trans(argIsa(canonicalPlaceName,1,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674289).
lisp_trans(argIsa(canonicalPlaceName,2,tLanguage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674326).
lisp_trans(argIsa(canonicalPlaceName,3,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674365).
lisp_trans(=>(canonicalPlaceName(PLACE,LANG,STR),names(STR,PLACE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674411).
lisp_trans(genls(tSumoPostalPlace,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674665).
lisp_trans(genls(tSumoPostalPlace,tSumoLocalizablePlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674707).
lisp_trans(genls(tSumoPostalPlace,tSumoContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674747).
lisp_trans(documentation(tSumoPostalPlace,vEnglishLanguage,s("A","#$PostalPlace","is","any","#$LocalizablePlace","that","can","have","a","postal","address",",","and","to","which","hardcopy","mail","(","letters",",","packages",",","etc",".",")","can","be","delivered",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674782).
lisp_trans(genls(actMilitaryInstallation,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':674974).
lisp_trans(genls(tSumoResidence,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675018).
lisp_trans(genls(tSumoPlaceOfCommerce,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675051).
lisp_trans(rtAsymmetricRelation(siteForContact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675091).
lisp_trans(rtBinaryPredicate(siteForContact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675136).
lisp_trans(argIsa(siteForContact,1,tSumoContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675178).
lisp_trans(argIsa(siteForContact,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675216).
lisp_trans(documentation(siteForContact,vEnglishLanguage,s("(","#$siteForContact","?","#$ContactSite","?","#$Agent",")","means","that","the","#$Human","or","#$Organization","?","#$Agent","can","be","reached","at","or","via","the","point","of","contact","?","#$ContactSite",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675248).
lisp_trans(rtAsymmetricRelation(postContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675453).
lisp_trans(rtBinaryPredicate(postContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675499).
lisp_trans(argIsa(postContactSite,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675542).
lisp_trans(argIsa(postContactSite,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675581).
lisp_trans(documentation(postContactSite,vEnglishLanguage,s("(","#$postContactSite","?","#$PostalPlace","?","#$Agent",")","means","that","the","#$Human","or","#$Organization","?","#$Agent","can","be","contacted","by","post","(","mail",")","at","the","location","?","#$PostalPlace",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675614).
lisp_trans(genlPreds(postContactSite,siteForContact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675822).
lisp_trans(rtBinaryPredicate(unitNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675868).
lisp_trans(documentation(unitNumber,vEnglishLanguage,s("(","#$unitNumber","?","STR","?","PLACE",")","means","that","?","STR","represents","the","particular","unit","or","space","within","the","building","that","a","#$PostalPlace","is","located")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':675906).
lisp_trans(argIsa(unitNumber,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676088).
lisp_trans(argIsa(unitNumber,2,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676125).
lisp_trans(rtBinaryPredicate(floorCode),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676160).
lisp_trans(documentation(floorCode,vEnglishLanguage,s("(","#$floorCode","?","STR","?","PLACE",")","means","that","?","STR","represents","the","#$BuildingLevel","that","a","particular","#$PostalPlace","can","be","found","at")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676197).
lisp_trans(argIsa(floorCode,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676363).
lisp_trans(argIsa(floorCode,2,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676399).
lisp_trans(=>(and(unitNumber(UNITSTR,PLACE),floorCode(FLRCODE,PLACE)),exists([UNIT,FLOOR],and(tSumoBuildingLevel(FLOOR),tSumoRoom(UNIT),located(UNIT,FLOOR),part(FLOOR,PLACE),names(UNITSTR,UNIT),names(FLRCODE,FLOOR)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676433).
lisp_trans(=>(and(unitNumber(UNITSTR,PLACE),not(exists([FLR],floorCode(FLR,PLACE)))),exists([UNIT],and(tSumoRoom(UNIT),names(UNITSTR,UNIT),located(UNIT,BLDG)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676729).
lisp_trans(genls(tPlaceLikeNeighborhood,tSumoGeographicArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676955).
lisp_trans(documentation(tPlaceLikeNeighborhood,vEnglishLanguage,'Neighborhood refers to a  #$GeographicArea that is a subregion of a larger geographic area, such as a  #$City, normally with a distinctive feature'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':676994).
lisp_trans(termFormat(vEnglishLanguage,tPlaceLikeNeighborhood,"neighborhood"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677190).
lisp_trans(=>(tPlaceLikeNeighborhood(PLACE),exists([AREA],geographicSubregion(PLACE,AREA))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677248).
lisp_trans(rtBinaryPredicate(postNeighborhood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677351).
lisp_trans(rtAsymmetricRelation(postNeighborhood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677395).
lisp_trans(genlPreds(postNeighborhood,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677442).
lisp_trans(documentation(postNeighborhood,vEnglishLanguage,s("(","#$postNeighborhood","?","PLACE","?","NEIGHBORHOOD",")","means","that","?","PLACE","is","located","in","?","NEIGHBORHOOD")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677481).
lisp_trans(argIsa(postNeighborhood,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677621).
lisp_trans(argIsa(postNeighborhood,2,tPlaceLikeNeighborhood),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677661).
lisp_trans(<=>(and(located(PLACE,GEO),tSumoPostalPlace(PLACE),tPlaceLikeNeighborhood(GEO)),postNeighborhood(PLACE,GEO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677703).
lisp_trans(=>(and(postNeighborhood(PLACE,NEIGHBORHOOD),geographicSubregion(NEIGHBORHOOD,CITY),tGroupedCity(CITY)),postCity(PLACE,CITY)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':677844).
lisp_trans(=>(and(postNeighborhood(PLACE,NEIGHBORHOOD),geographicSubregion(NEIGHBORHOOD,STATE),tSumoStateOrProvince(STATE)),postDistrict(PLACE,STATE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678002).
lisp_trans(rtAsymmetricRelation(postCountry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678180).
lisp_trans(rtBinaryPredicate(postCountry),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678222).
lisp_trans(argIsa(postCountry,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678261).
lisp_trans(argIsa(postCountry,2,tSumoGeopoliticalArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678296).
lisp_trans(genlPreds(postCountry,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678336).
lisp_trans(documentation(postCountry,vEnglishLanguage,s("(","#$postCountry","?","#$PostalPlace","?","#$GeopoliticalArea",")","means","that","?","#$PostalPlace","is","located","in","the","#$Nation","or","#$DependencyOrSpecialSovereigntyArea","?","#$GeopoliticalArea",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678370).
lisp_trans(=>(postCountry(PLACE,COUNTRY),or(actNation(COUNTRY),tSumoDependencyOrSpecialSovereigntyArea(COUNTRY))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678582).
lisp_trans(<=>(and(located(PLACE,GEO),tSumoPostalPlace(PLACE),or(actNation(GEO),tSumoDependencyOrSpecialSovereigntyArea(GEO))),postCountry(PLACE,GEO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678717).
lisp_trans(=>(and(postCity(PLACE,CITY),geographicSubregion(CITY,AREA),tSumoStateOrProvince(AREA)),postDistrict(PLACE,AREA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':678915).
lisp_trans(=>(and(postCity(PLACE,CITY),geographicSubregion(CITY,AREA),or(actNation(AREA),tSumoDependencyOrSpecialSovereigntyArea(AREA))),postCountry(PLACE,AREA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679062).
lisp_trans(rtAsymmetricRelation(postDistrict),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679270).
lisp_trans(rtBinaryPredicate(postDistrict),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679313).
lisp_trans(argIsa(postDistrict,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679353).
lisp_trans(argIsa(postDistrict,2,tSumoStateOrProvince),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679389).
lisp_trans(genlPreds(postDistrict,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679429).
lisp_trans(documentation(postDistrict,vEnglishLanguage,s("(","#$postDistrict","?","#$PostalPlace","?","#$StateOrProvince",")","means","that","?","#$PostalPlace","is","located","in","?","#$StateOrProvince",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679464).
lisp_trans(<=>(and(located(PLACE,GEO),tSumoPostalPlace(PLACE),tSumoStateOrProvince(GEO)),postDistrict(PLACE,GEO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679623).
lisp_trans(rtAsymmetricRelation(postCity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679763).
lisp_trans(rtBinaryPredicate(postCity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679802).
lisp_trans(argIsa(postCity,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679838).
lisp_trans(argIsa(postCity,2,tGroupedCity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679870).
lisp_trans(genlPreds(postCity,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679895).
lisp_trans(documentation(postCity,vEnglishLanguage,s("(","#$postCity","?","#$PostalPlace","?","#$City",")","means","that","?","#$PostalPlace","is","located","in","?","#$City",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':679926).
lisp_trans(<=>(and(located(PLACE,GEO),tSumoPostalPlace(PLACE),tGroupedCity(GEO)),postCity(PLACE,GEO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680055).
lisp_trans(genls(tSumoPostcodeArea,tSumoLocalizablePlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680182).
lisp_trans(documentation(tSumoPostcodeArea,vEnglishLanguage,s("An","#$instance","of","#$PostcodeArea","is","a","#$LocalizablePlace","that","is","identified","by","a","#$Postcode",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680223).
lisp_trans(=>(tSumoPostcodeArea(AREA),exists([GEO],geographicSubregion(AREA,GEO))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680363).
lisp_trans(rtAsymmetricRelation(postPostcodeArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680456).
lisp_trans(rtBinaryPredicate(postPostcodeArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680503).
lisp_trans(argIsa(postPostcodeArea,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680547).
lisp_trans(argIsa(postPostcodeArea,2,tSumoPostcodeArea),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680587).
lisp_trans(genlPreds(postPostcodeArea,located),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680628).
lisp_trans(documentation(postPostcodeArea,vEnglishLanguage,s("(","#$postPostcodeArea","?","#$PostalPlace","?","#$PostcodeArea",")","means","that","?","#$PostalPlace","is","located","in","?","#$PostcodeArea",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680667).
lisp_trans(<=>(and(located(PLACE,AREA),tSumoPostalPlace(PLACE),tSumoPostcodeArea(AREA)),postPostcodeArea(PLACE,AREA)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680828).
lisp_trans(=>(and(postPostcodeArea(PLACE,AREA),geographicSubregion(AREA,CITY),tGroupedCity(CITY)),postCity(PLACE,CITY)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':680972).
lisp_trans(=>(and(postPostcodeArea(PLACE,AREA),geographicSubregion(AREA,GEO),tSumoStateOrProvince(GEO)),postDistrict(PLACE,GEO)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681112).
lisp_trans(rtAsymmetricRelation(postStreet),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681266).
lisp_trans(rtBinaryPredicate(postStreet),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681307).
lisp_trans(argIsa(postStreet,1,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681345).
lisp_trans(argIsa(postStreet,2,tPlaceLikeRoadway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681379).
lisp_trans(documentation(postStreet,vEnglishLanguage,s("(","#$postStreet","?","#$PostalPlace","?","#$Roadway",")","means","that","?","#$PostalPlace","is","#$Adjacent","to","?","#$Roadway",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681409).
lisp_trans(=>(postStreet(POSTPLACE,ROADWAY),orientation(POSTPLACE,ROADWAY,tSumoAdjacent)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681551).
lisp_trans(rtAsymmetricRelation(postStreetNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681637).
lisp_trans(rtBinaryPredicate(postStreetNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681684).
lisp_trans(argIsa(postStreetNumber,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681728).
lisp_trans(argIsa(postStreetNumber,2,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681771).
lisp_trans(documentation(postStreetNumber,vEnglishLanguage,s("(","#$postStreetNumber","?","#$SymbolicString","?","#$PostalPlace",")","means","that","?","#$SymbolicString","identifies","the","sub","-","city","block","or","building","level","location","of","a","?","#$PostalPlace",".","?","#$SymbolicString","need","not","consist","exclusively","of","#$DigitCharacters",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':681811).
lisp_trans(rtAsymmetricRelation(postPostOfficeBox),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682093).
lisp_trans(rtBinaryPredicate(postPostOfficeBox),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682141).
lisp_trans(argIsa(postPostOfficeBox,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682186).
lisp_trans(argIsa(postPostOfficeBox,2,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682230).
lisp_trans(documentation(postPostOfficeBox,vEnglishLanguage,s("(","#$postPostOfficeBox","?","#$SymbolicString","?","#$PostalPlace",")","means","that","?","#$SymbolicString","identifies","the","post","office","box","of","a","?","#$PostalPlace",".","?","#$SymbolicString","need","not","consist","exclusively","of","#$DigitCharacters",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682271).
lisp_trans(genls(tSumoPostalAddressText,tSumoPlaceAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682530).
lisp_trans(genls(tSumoPostalAddressText,tSumoLocalizablePlaceID),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682572).
lisp_trans(genls(tSumoPostalAddressText,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682620).
lisp_trans(genls(tSumoPostalAddressText,ftLinguisticExpression),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':682664).
lisp_trans(rtAsymmetricRelation(postAddressText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':686495).
lisp_trans(rtBinaryPredicate(postAddressText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':686541).
lisp_trans(argIsa(postAddressText,1,tSumoPostalAddressText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':686584).
lisp_trans(argIsa(postAddressText,2,tSumoPostalPlace),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':686629).
lisp_trans(documentation(postAddressText,vEnglishLanguage,s("(","#$postAddressText","?","#$PostalAddressText","?","#$PostalPlace",")","means","that","the","#$ContactSite","?","#$PostalPlace","is","identified","by","?","#$PostalAddressText",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':686668).
lisp_trans(rtAsymmetricRelation(telecomContactDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687080).
lisp_trans(rtBinaryPredicate(telecomContactDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687131).
lisp_trans(argIsa(telecomContactDevice,1,tSumoTelephonyDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687179).
lisp_trans(argIsa(telecomContactDevice,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687227).
lisp_trans(documentation(telecomContactDevice,vEnglishLanguage,s("(","#$telecomContactDevice","?","#$TelephonyDevice","?","#$Agent",")","means","that","?","#$TelephonyDevice","is","a","#$ContactSite","for","the","#$Human","or","#$Organization","?","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687265).
lisp_trans(genlPreds(telecomContactDevice,siteForContact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687466).
lisp_trans(genls(tSumoVirtualPlaceID,tSumoPlaceID),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687802).
lisp_trans(genls(tSumoVirtualAddress,tSumoPlaceAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687837).
lisp_trans(genls(tSumoVirtualAddress,tSumoVirtualPlaceID),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687876).
lisp_trans(genls(ftTelecomNumber,tSumoVirtualAddress),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687918).
lisp_trans(genls(ftTelecomNumber,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687958).
lisp_trans(genls(ftTelecomNumber,tSumoContactSite),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':687998).
lisp_trans(rtBinaryPredicate(deviceTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688036).
lisp_trans(rtAsymmetricRelation(deviceTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688083).
lisp_trans(argIsa(deviceTelecomNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688133).
lisp_trans(argIsa(deviceTelecomNumber,2,tSumoTelephonyDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688178).
lisp_trans(documentation(deviceTelecomNumber,vEnglishLanguage,s("(","#$deviceTelecomNumber","?","#$TelecomNumber","?","#$TelephonyDevice",")","means","that","?","#$TelephonyDevice","is","identified",",","and","can","be","accessed",",","by","?","#$TelecomNumber",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688225).
lisp_trans(rtBinaryPredicate(telecomCoreNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688569).
lisp_trans(rtAsymmetricRelation(telecomCoreNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688614).
lisp_trans(argIsa(telecomCoreNumber,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688662).
lisp_trans(argIsa(telecomCoreNumber,2,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688706).
lisp_trans(genlPreds(telecomCoreNumber,subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688749).
lisp_trans(documentation(telecomCoreNumber,vEnglishLanguage,s("(","#$telecomCoreNumber","?","#$SymbolicString","?","#$TelecomNumber",")","means","that","?","#$SymbolicString","is","the","#$part","of","a","#$TelecomNumber","that","identifies","an","individual","subscriber","line",",","not","including","the","area","code","and","any","possible","extensions",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':688791).
lisp_trans(rtBinaryPredicate(telecomCountryCode),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689069).
lisp_trans(rtAsymmetricRelation(telecomCountryCode),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689115).
lisp_trans(argIsa(telecomCountryCode,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689164).
lisp_trans(argIsa(telecomCountryCode,2,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689209).
lisp_trans(documentation(telecomCountryCode,vEnglishLanguage,s("(","#$telecomCountryCode","?","#$SymbolicString","#$TelecomNumber",")","means","that","?","#$SymbolicString","is","the","#$part","of","?","#$TelecomNumber","that","identifies","the","#$Nation","in","which","the","device","identified","by","?","#$TelecomNumber","is","located","(","or","registered",")",".","?","#$SymbolicString","will","be","standard","code","conforming","to",",","and","assigned","by",",","ITU-T","Recommendation","E",".","164",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689253).
lisp_trans(genlPreds(telecomCountryCode,subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689634).
lisp_trans(rtBinaryPredicate(telecomAreaCode),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689678).
lisp_trans(rtAsymmetricRelation(telecomAreaCode),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689721).
lisp_trans(argIsa(telecomAreaCode,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689767).
lisp_trans(argIsa(telecomAreaCode,2,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689809).
lisp_trans(documentation(telecomAreaCode,vEnglishLanguage,s("(","#$telecomAreaCode","?","#$SymbolicString","#$TelecomNumber",")","means","that","?","#$SymbolicString","is","the","#$part","of","?","#$TelecomNumber","that","follows","the","country","code",".","?","#$SymbolicString","may","denote","a","#$GeographicArea","in","which","the","#$TelephonyDevice","identified","by","?","#$TelecomNumber","is","located","(","registered",")",",","but","it","may","also","denote","a","call","billing","plan","or","status",",","as","for","800","numbers","in","the","North","American","Numbering","Plan",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':689850).
lisp_trans(genlPreds(telecomAreaCode,subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690294).
lisp_trans(rtBinaryPredicate(telecomCode2),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690335).
lisp_trans(rtAsymmetricRelation(telecomCode2),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690375).
lisp_trans(argIsa(telecomCode2,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690418).
lisp_trans(argIsa(telecomCode2,2,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690457).
lisp_trans(documentation(telecomCode2,vEnglishLanguage,s("(","#$telecomCode2","?","#$SymbolicString","?","#$TelecomNumber",")","means","that","?","#$SymbolicString","is","the","second","code","(","if","there","is","one",",","such","as","a","sub","-","area","code",")","following","the","part","of","?","#$TelecomNumber","denoted","by","#$telecomCountryCode",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690495).
lisp_trans(genlPreds(telecomCode2,subString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690757).
lisp_trans(rtBinaryPredicate(telecomExtension),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690795).
lisp_trans(rtAsymmetricRelation(telecomExtension),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690839).
lisp_trans(argIsa(telecomExtension,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690886).
lisp_trans(argIsa(telecomExtension,2,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690929).
lisp_trans(documentation(telecomExtension,vEnglishLanguage,s("(","#$telecomExtension","?","#$SymbolicString","?","#$TelecomNumber",")","means","that","?","#$SymbolicString","is","a","#$part","of","?","#$TelecomNumber","that","identifies","a","#$TelephonyDevice","within","a","group","of","such","#$Devices",",","the","members","of","which","share","a","local","subscriber","line",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':690971).
lisp_trans(=>(and(telecomCoreNumber(CN,WHOLE),telecomAreaCode(AC,WHOLE)),precedesInString(AC,CN,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':691413).
lisp_trans(=>(and(telecomCoreNumber(CN,WHOLE),telecomCountryCode(CC,WHOLE)),precedesInString(CC,CN,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':691531).
lisp_trans(=>(and(telecomAreaCode(AC,WHOLE),telecomCountryCode(CC,WHOLE)),precedesInString(CC,AC,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':691652).
lisp_trans(=>(and(telecomCoreNumber(CN,WHOLE),telecomExtension(EX,WHOLE)),precedesInString(CN,EX,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':691771).
lisp_trans(=>(and(telecomCode2(C2,WHOLE),telecomAreaCode(AC,WHOLE)),precedesInString(AC,C2,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':691890).
lisp_trans(=>(and(telecomCode2(C2,WHOLE),telecomCountryCode(CC,WHOLE)),precedesInString(CC,C2,WHOLE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692003).
lisp_trans(rtBinaryPredicate(telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692717).
lisp_trans(rtAsymmetricRelation(telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692760).
lisp_trans(argIsa(telephoneNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692806).
lisp_trans(argIsa(telephoneNumber,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692847).
lisp_trans(documentation(telephoneNumber,vEnglishLanguage,s("(","%","&","telephoneNumber","?","NUMBER","?","AGENT",")","means","that","?","#$Agent","identifies","a","#$TelecomeNumber","at","which","?","#$Agent","can","be","contacted")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':692880).
lisp_trans(=>(telephoneNumber(NUMBER,AGENT),siteForContact(NUMBER,AGENT)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693052).
lisp_trans(rtBinaryPredicate(personalPhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693128).
lisp_trans(rtAsymmetricRelation(personalPhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693175).
lisp_trans(argIsa(personalPhoneNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693225).
lisp_trans(argIsa(personalPhoneNumber,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693270).
lisp_trans(genlPreds(personalPhoneNumber,telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693307).
lisp_trans(documentation(personalPhoneNumber,vEnglishLanguage,s("(","#$personalPhoneNumber","?","#$TelecomNumber","?","#$Human",")","means","that","?","#$TelecomNumber","identifies","a","#$Telephone","at","which","?","#$Human","can","be","contacted","when","not","a","work",",","or","for","purposes","other","than","work",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693357).
lisp_trans(=>(and(tObjectTelephone(DEVICE),holdsDuring(TIME,and(possesses(AGENT,DEVICE),deviceTelecomNumber(NUMBER,DEVICE)))),holdsDuring(TIME,telephoneNumber(NUMBER,AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693600).
lisp_trans(rtBinaryPredicate(homePhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693820).
lisp_trans(rtAsymmetricRelation(homePhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693863).
lisp_trans(argIsa(homePhoneNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693909).
lisp_trans(argIsa(homePhoneNumber,2,tSumoHuman),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693950).
lisp_trans(genlPreds(homePhoneNumber,telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':693983).
lisp_trans(documentation(homePhoneNumber,vEnglishLanguage,s("(","#$homePhoneNumber","?","#$TelecomNumber","?","#$Human",")","means","that","?","#$TelecomNumber","identifies","a","#$Telephone","located","at","?","#$Human","'s","#$PermanentResidence",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':694029).
lisp_trans(=>(holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),homePhoneNumber(NUMBER,AGENT),located(DEVICE,PLACE),tSumoPermanentResidence(PLACE))),holdsDuring(TIME,home(AGENT,PLACE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':694612).
lisp_trans(=>(and(tSumoHuman(AGENT),holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),telephoneNumber(NUMBER,AGENT),located(DEVICE,PLACE),tSumoResidence(PLACE)))),holdsDuring(TIME,inhabits(AGENT,PLACE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':694911).
lisp_trans(rtBinaryPredicate(workPhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695193).
lisp_trans(rtAsymmetricRelation(workPhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695236).
lisp_trans(argIsa(workPhoneNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695282).
lisp_trans(argIsa(workPhoneNumber,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695323).
lisp_trans(genlPreds(workPhoneNumber,telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695356).
lisp_trans(documentation(workPhoneNumber,vEnglishLanguage,s("(","#$workPhoneNumber","?","#$TelecomNumber","?","#$Agent",")","means","that","?","#$TelecomNumber","identifies","a","#$Telephone","at","which","?","#$Agent","can","be","contacted","when","at","work",",","or","for","business","purposes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695402).
lisp_trans(documentation(tSumoFixedPhone,vEnglishLanguage,s("An","#$instance","of","#$FixedPhone","is","a","#$Telephone","that","must","be","connected","to","the","telephone","network","via","a","cord",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695627).
lisp_trans(genls(tSumoFixedPhone,tObjectTelephone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695779).
lisp_trans(genls(tSumoMobileCellPhone,tSumoReceiverDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695812).
lisp_trans(genls(tSumoMobileCellPhone,tObjectTelephone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695854).
lisp_trans(documentation(tSumoMobileCellPhone,vEnglishLanguage,s("A","#$MobileCellPhone","is","a","#$Telephone","that","connects","to","the","telephone","network","by","sending","and","receiving","radio","transmissions",",","rather","than","via","a","cord",",","and","so","is","portable",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':695891).
lisp_trans(rtBinaryPredicate(mobilePhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696109).
lisp_trans(rtAsymmetricRelation(mobilePhoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696154).
lisp_trans(argIsa(mobilePhoneNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696202).
lisp_trans(argIsa(mobilePhoneNumber,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696245).
lisp_trans(genlPreds(mobilePhoneNumber,telephoneNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696280).
lisp_trans(documentation(mobilePhoneNumber,vEnglishLanguage,s("(","#$mobilePhoneNumber","?","#$TelecomNumber","?","#$Agent",")","means","that","?","#$TelecomNumber","identifies","a","#$MobileCellPhone","at","which","?","#$Agent","can","be","contacted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696328).
lisp_trans(=>(holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),mobilePhoneNumber(NUMBER,AGENT))),tSumoMobileCellPhone(DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696524).
lisp_trans(=>(and(tSumoMobileCellPhone(DEVICE),holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),telephoneNumber(NUMBER,AGENT)))),holdsDuring(TIME,mobilePhoneNumber(NUMBER,AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':696739).
lisp_trans(=>(holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),mobilePhoneNumber(NUMBER,AGENT))),holdsDuring(TIME,possesses(AGENT,DEVICE))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697136).
lisp_trans(rtBinaryPredicate(faxNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697308).
lisp_trans(rtAsymmetricRelation(faxNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697345).
lisp_trans(argIsa(faxNumber,1,ftTelecomNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697385).
lisp_trans(argIsa(faxNumber,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697420).
lisp_trans(documentation(faxNumber,vEnglishLanguage,s("(","#$faxNumber","?","#$TelecomNumber","?","#$Agent",")","means","that","?","#$TelecomNumber","identifies","a","#$FaxMachine","at","which","?","#$Agent","can","be","contacted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697447).
lisp_trans(=>(and(tObjectFaxMachine(DEVICE),holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),possesses(AGENT,DEVICE)))),holdsDuring(TIME,faxNumber(NUMBER,AGENT))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697622).
lisp_trans(=>(holdsDuring(TIME,and(deviceTelecomNumber(NUMBER,DEVICE),faxNumber(NUMBER,AGENT))),tObjectFaxMachine(DEVICE)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':697964).
lisp_trans(genls(tSumoFabricIron,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698117).
lisp_trans(documentation(tSumoFabricIron,vEnglishLanguage,'FabricIron is a type of #$Device that has a flat metal base used to smooth cloth'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698146).
lisp_trans(termFormat(vEnglishLanguage,tSumoFabricIron,"iron"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698274).
lisp_trans(=>(tSumoFabricIron(IRON),exists([BASE],and(bottom(BASE,IRON),material(tMetal,BASE),sumoAttribute(BASE,tSumoFlat)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698586).
lisp_trans(genls(tObjectIroningBoard,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698736).
lisp_trans(documentation(tObjectIroningBoard,vEnglishLanguage,'IroningBoard is a type of #$Device  consisting of a flat, padded board used as a surface for ironing'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698767).
lisp_trans(termFormat(vEnglishLanguage,tObjectIroningBoard,s("ironing","board")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698917).
lisp_trans(=>(tObjectIroningBoard(BOARD),hasPurpose(BOARD,exists([IRON,FABRIC,OBJ],and(actIroning(IRON),patient(IRON,OBJ),part(FABRIC,OBJ),tSumoFabric(FABRIC),holdsDuring(uWhenFn(IRON),orientation(OBJ,BOARD,tSumoOn)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':698976).
lisp_trans(genls(actSmoothing,tSumoSurfaceChange),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699300).
lisp_trans(documentation(actSmoothing,vEnglishLanguage,'Smoothing is a type of #$SurfaceChange to make something #$Smooth'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699335).
lisp_trans(termFormat(vEnglishLanguage,actSmoothing,"smoothing"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699447).
lisp_trans(=>(and(actSmoothing(SMOOTH),patient(SMOOTH,OBJ)),exists([PART],and(superficialPart(PART,OBJ),holdsDuring(iTimeOf_EndFn(uWhenFn(SMOOTH)),sumoAttribute(PART,vSmooth))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699499).
lisp_trans(genls(actIroning,actSmoothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699731).
lisp_trans(documentation(actIroning,vEnglishLanguage,'Ironing refers to a #$Smoothing process where a heated #$Device is used to smooth something'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699760).
lisp_trans(termFormat(vEnglishLanguage,actIroning,"ironing"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699896).
lisp_trans(=>(and(actIroning(I),patient(I,OBJ)),exists([HEAT,IRON,PART],and(superficialPart(PART,OBJ),actHeating(HEAT),patient(HEAT,IRON),patient(I,PART),instrument(I,IRON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':699944).
lisp_trans(=>(and(actIroning(I),patient(I,OBJ),part(FABRIC,OBJ),tSumoFabric(FABRIC)),exists([IRON,HEAT],and(actHeating(HEAT),patient(HEAT,IRON),tSumoFabricIron(IRON),instrument(I,IRON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':700194).
lisp_trans(genls(tSumoWhirlpoolTub,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':700466).
lisp_trans(documentation(tSumoWhirlpoolTub,vEnglishLanguage,'WhirlpoolTub refers to a #$FluidContainer used by #$Humans for relaxation with jets used to create water currents to massage the  body'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':700505).
lisp_trans(termFormat(vEnglishLanguage,tSumoWhirlpoolTub,s("whirlpool","tub")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':700689).
lisp_trans(=>(tSumoWhirlpoolTub(TUB),exists([VALVE],and(tSumoPressureControlValve(VALVE),part(VALVE,TUB),hasPurpose(VALVE,exists([WATER,CREATION,MOTION],and(tWater(WATER),located(WATER,TUB),actCreation(CREATION),instrument(CREATION,VALVE),result(CREATION,MOTION),actMotion(MOTION),located(MOTION,WATER))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':700748).
lisp_trans(genls(tObjectHotTub,tSumoWhirlpoolTub),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701239).
lisp_trans(documentation(tObjectHotTub,vEnglishLanguage,'HotTub refers to a #$WhirlpoolTub that is capable of heating the water located in it'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701270).
lisp_trans(termFormat(vEnglishLanguage,tObjectHotTub,s("hot","tub")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701398).
lisp_trans(=>(and(tObjectHotTub(X),located(WATER,X),tWater(WATER)),modalAttribute(exists([HEAT],and(actHeating(HEAT),instrument(HEAT,X),patient(HEAT,WATER))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701445).
lisp_trans(genls(vtSizeAttribute,vtRelationalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701700).
lisp_trans(documentation(vtSizeAttribute,vEnglishLanguage,'SizeAttribute refers to attributes that pertain to the #$measure of some #$Object'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701745).
lisp_trans(termFormat(vEnglishLanguage,vtSizeAttribute,s("size","attribute")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701877).
lisp_trans(=>(and(sumoAttribute(X,ATTR),vtSizeAttribute(ATTR)),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':701938).
lisp_trans(vtSizeAttribute(tSumoDoubleSize),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702038).
lisp_trans(documentation(tSumoDoubleSize,vEnglishLanguage,'DoubleSize refers to how an #$Object can  fit 2 of its target users at the same time'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702074).
lisp_trans(termFormat(vEnglishLanguage,tSumoDoubleSize,s("double","size")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702206).
lisp_trans(=>(and(tSumoWhirlpoolTub(X),sumoAttribute(X,tSumoDoubleSize)),modalAttribute(exists([T1],holdsDuring(T1,exists([P1,P2],and(tSumoHuman(P1),tSumoHuman(P2),not(equal(P1,P2)),located(P1,X),located(P2,X))))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702261).
lisp_trans(genls(tSumoKennel,tSumoTrapOrCage),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702617).
lisp_trans(documentation(tSumoKennel,vEnglishLanguage,'Kennel is a #$TrapOrCage where a #$DomesticAnimal is #$Confining by its owner'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702646).
lisp_trans(termFormat(vEnglishLanguage,tSumoKennel,"kennel"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702767).
lisp_trans(=>(tSumoKennel(KENNEL),hasPurpose(KENNEL,exists([ANIMAL,CONFINING],and(tSumoDomesticAnimal(ANIMAL),actConfining(CONFINING),patient(CONFINING,ANIMAL),eventLocated(CONFINING,KENNEL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':702813).
lisp_trans(genls(tSumoDryingDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703085).
lisp_trans(documentation(tSumoDryingDevice,vEnglishLanguage,'DryingDevice refers to any #$Device used as an instrument in the #$Drying process'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703116).
lisp_trans(termFormat(vEnglishLanguage,tSumoDryingDevice,s("drying","device")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703247).
lisp_trans(=>(tSumoDryingDevice(D),hasPurpose(D,exists([DRYING],and(eventDrying(DRYING),instrument(DRYING,D))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703306).
lisp_trans(genls(tObjectClothesDryer,tSumoDryingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703460).
lisp_trans(genls(tSumoClothesWashingMachine,tSumoWashingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703498).
lisp_trans(genls(tObjectHairDryer,tSumoDryingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703554).
lisp_trans(genls(tObjectHairDryer,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703588).
lisp_trans(documentation(tObjectHairDryer,vEnglishLanguage,'HairDryer is a type of #$DryingDevice used specifically for #$Drying #$Hair'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703624).
lisp_trans(termFormat(vEnglishLanguage,tObjectHairDryer,s("hair","dryer")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703746).
lisp_trans(=>(tObjectHairDryer(HD),hasPurpose(HD,exists([HAIR,DRYING],and(tSumoHair(HAIR),eventDrying(DRYING),patient(DRYING,HAIR),instrument(DRYING,HD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':703799).
lisp_trans(genls(tSumoSelfServiceLaundry,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704021).
lisp_trans(documentation(tSumoSelfServiceLaundry,vEnglishLanguage,'SelfServiceLaundry is a #$Room  where a collection of coin-operatend washing machines and dryers are available for  customers'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704056).
lisp_trans(termFormat(vEnglishLanguage,tSumoSelfServiceLaundry,s("self","-","service","laundry")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704237).
lisp_trans(=>(tSumoSelfServiceLaundry(ROOM),exists([WASHER,DRYER],and(ttSumoCollection(WASHER),memberType(WASHER,tSumoClothesWashingMachine),located(WASHER,ROOM),ttSumoCollection(DRYER),memberType(DRYER,tObjectClothesDryer),located(DRYER,ROOM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704309).
lisp_trans(=>(tSumoSelfServiceLaundry(ROOM),sumoAttribute(ROOM,vtCommunalAttribute)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704615).
lisp_trans(genls(tSumoMicrowave,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704705).
lisp_trans(documentation(tSumoMicrowave,vEnglishLanguage,'Microwave is an #$ElectricDevice that heats food by passing an electromagnetic wave through it'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704741).
lisp_trans(termFormat(vEnglishLanguage,tSumoMicrowave,"microwave"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704882).
lisp_trans(=>(tSumoMicrowave(M),hasPurpose(M,exists([FOOD,HEATING],and(tPreparedFood(FOOD),actHeating(HEATING),instrument(HEATING,M),patient(HEATING,FOOD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':704934).
lisp_trans(=>(and(tSumoMicrowave(M),sumoAttribute(M,tSumoDeviceOn)),exists([PROC],and(tSumoRadiatingElectromagnetic(PROC),instrument(PROC,M)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705174).
lisp_trans(genls(tSumoSmokeDetector,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705355).
lisp_trans(documentation(tSumoSmokeDetector,vEnglishLanguage,'SmokeDetector is a #$Device that is able to #$Discovering the presence of #$Smoke'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705387).
lisp_trans(termFormat(vEnglishLanguage,tSumoSmokeDetector,s("smoke","detector")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705519).
lisp_trans(=>(tSumoSmokeDetector(D),hasPurpose(D,exists([DISCOVER,SMOKE],and(actDiscovering(DISCOVER),instrument(DISCOVER,D),patient(DISCOVER,SMOKE),tSmoke(SMOKE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705580).
lisp_trans(genls(tObjectSprinkler,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705820).
lisp_trans(documentation(tObjectSprinkler,vEnglishLanguage,'Sprinkler is a type of #$Device that loosely distributes a substance, either solid (e.g. Salt or herbs) or liquid (e.g. water sprinkler)'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':705848).
lisp_trans(termFormat(vEnglishLanguage,tObjectSprinkler,"sprinkler"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706031).
lisp_trans(genls(tSumoWaterSprinkler,tObjectSprinkler),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706083).
lisp_trans(documentation(tSumoWaterSprinkler,vEnglishLanguage,'WaterSprinkler is a type of #$Sprinkler  that releases #$Water'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706119).
lisp_trans(termFormat(vEnglishLanguage,tSumoWaterSprinkler,s("water","sprinkler")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706233).
lisp_trans(=>(tSumoWaterSprinkler(W),hasPurpose(W,exists([WM],and(actWaterMotion(WM),origin(WM,W))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706296).
lisp_trans(genls(tSumoFireSprinklerSystem,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706441).
lisp_trans(documentation(tSumoFireSprinklerSystem,vEnglishLanguage,'FireSprinklerSystem is a #$Collection of #$Devices that allow water to be released when a #$Fire is detected'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706483).
lisp_trans(termFormat(vEnglishLanguage,tSumoFireSprinklerSystem,s("sprinkler","system")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706648).
lisp_trans(=>(tSumoFireSprinklerSystem(X),exists([DETECT,SPRINKLER],and(tSumoSmokeDetector(DETECT),tSumoWaterSprinkler(SPRINKLER),member(DETECT,X),member(SPRINKLER,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706717).
lisp_trans(=>(tSumoFireSprinklerSystem(X),exists([FIRE,DISCOVER,WM],and(actDiscovering(DISCOVER),tSumoFire(FIRE),instrument(DISCOVER,X),patient(DISCOVER,FIRE),actWaterMotion(WM),origin(WM,X),causes(DISCOVER,WM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':706944).
lisp_trans(genls(tObjectFireExtinguisher,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707244).
lisp_trans(documentation(tObjectFireExtinguisher,vEnglishLanguage,s("A","#$Device","used","to","#$StopFn","small","#$Fire","which","is","possible","for","#$Human","to","carry")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707279).
lisp_trans(=>(tObjectFireExtinguisher(FE),hasPurpose(FE,exists([PROC],and(isa(PROC,uStopFn(tSumoFire)),instrument(PROC,FE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707410).
lisp_trans(=>(tObjectFireExtinguisher(FE),exists([PERSON,CARRY],and(tSumoHuman(PERSON),actCarrying(CARRY),patient(CARRY,FE),capability(CARRY,instrument,PERSON)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707583).
lisp_trans(genls(tSumoIceMachine,tSumoMachine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707803).
lisp_trans(documentation(tSumoIceMachine,vEnglishLanguage,'IceMachine is a type of #$Machine that produces #$Ice'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707833).
lisp_trans(termFormat(vEnglishLanguage,tSumoIceMachine,s("ice","machine")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707934).
lisp_trans(=>(tSumoIceMachine(IM),hasPurpose(IM,exists([PROC,ICE],and(instrument(PROC,IM),result(PROC,ICE),tSumoIce(ICE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':707989).
lisp_trans(genls(tObjectAlarmClock,tObjectClock),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708173).
lisp_trans(documentation(tObjectAlarmClock,vEnglishLanguage,'AlarmClock is a type of #$Clock that will radiate sound when a certain time is set'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708201).
lisp_trans(termFormat(vEnglishLanguage,tObjectAlarmClock,s("alarm","clock")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708331).
lisp_trans(=>(tObjectAlarmClock(AC),hasPurpose(AC,exists([TIME,M,Q],and(actMeasuring(M),agent(M,AC),result(M,Q),equal(Q,TIME),holdsDuring(uWhenFn(M),exists([S],and(tSumoRadiatingSound(S),agent(S,AC)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708386).
lisp_trans(genls(tSumoAMFMAlarmClock,tObjectAlarmClock),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708739).
lisp_trans(genls(tSumoAMFMAlarmClock,tPartTypeRadioReceiver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708776).
lisp_trans(documentation(tSumoAMFMAlarmClock,vEnglishLanguage,'AMFMAlarmClock is a type of #$AlarmClock that is also a #$RadioReceiver, meaning it can get #$RadioBroadcast from #$RadioStation'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708816).
lisp_trans(termFormat(vEnglishLanguage,tSumoAMFMAlarmClock,s("am","/","fm","alarm","clock")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':708996).
lisp_trans(genls(tSumoElectricCoffeeMaker,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709075).
lisp_trans(documentation(tSumoElectricCoffeeMaker,vEnglishLanguage,'ElectricCoffeeMaker is a  #$Device that makes #$Coffee'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709121).
lisp_trans(termFormat(vEnglishLanguage,tSumoElectricCoffeeMaker,s("coffee","maker")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709232).
lisp_trans(=>(tSumoElectricCoffeeMaker(C),hasPurpose(C,exists([COFFEE,M],and(actMaking(M),instrument(M,C),result(M,COFFEE),tSumoCoffee(COFFEE))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709297).
lisp_trans(vtSubjectiveAssessmentAttribute(vClean),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709513).
lisp_trans(documentation(vClean,vEnglishLanguage,'Clean describes how something is free from  dirt or impurities'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709560).
lisp_trans(termFormat(vEnglishLanguage,vClean,"clean"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709665).
lisp_trans(vtSubjectiveAssessmentAttribute(vDirty),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709709).
lisp_trans(documentation(vDirty,vEnglishLanguage,'Dirty describes how something has been soiled with dirt, dust or grime'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709756).
lisp_trans(termFormat(vEnglishLanguage,vDirty,"dirty"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709869).
lisp_trans(=>(sumoAttribute(X,vClean),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709913).
lisp_trans(=>(sumoAttribute(X,vDirty),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':709965).
lisp_trans(contraryAttribute(vDirty,vClean),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710019).
lisp_trans(genls(tSumoDataStorageDevice,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710052).
lisp_trans(documentation(tSumoDataStorageDevice,vEnglishLanguage,s("An","#$instance","of","#$DataStorageDevice","is","a","#$Device","intended","to","be","used","for","storing","data","(","information",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710088).
lisp_trans(genls(tSumoWhiteboard,tSumoDataStorageDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710244).
lisp_trans(genls(tSumoWhiteboard,tSumoDisplayArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710284).
lisp_trans(documentation(tSumoWhiteboard,vEnglishLanguage,s("%","&","Whiteboard","refers","to","flat","surface","where","information","can","be","encoded","using","erasable","pens",".","This","baord","is","normally","colored","White")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710322).
lisp_trans(termFormat(vEnglishLanguage,tSumoWhiteboard,"whiteboard"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710496).
lisp_trans(=>(tSumoWhiteboard(OBJ),color(OBJ,tSumoWhite)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710550).
lisp_trans(=>(tSumoWhiteboard(OBJ),structure(OBJ,tSumoFlat)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710608).
lisp_trans(=>(tSumoWhiteboard(OBJ),hasPurpose(OBJ,exists([WRITE],and(actWriting(WRITE),destination(WRITE,OBJ))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710669).
lisp_trans(genls(tSumoSteam,tWater),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710826).
lisp_trans(documentation(tSumoSteam,vEnglishLanguage,'Steam refers to the #$Gas form of #$Water that is a result of #$Boiling it and diffusing it into the air'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710849).
lisp_trans(termFormat(vEnglishLanguage,tSumoSteam,"steam"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':710996).
lisp_trans(=>(tSumoSteam(STEAM),exists([BOIL,WATER],and(eventBoiling(BOIL),tWater(WATER),patient(BOIL,WATER),result(BOIL,STEAM),sumoAttribute(STEAM,tSumoGas)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711040).
lisp_trans(genls(tSumoWaterHeater,tObjectHeatingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711332).
lisp_trans(=>(tSumoWaterHeater(X),hasPurpose(X,exists([HEAT,WATER],and(actHeating(HEAT),tWater(WATER),patient(HEAT,WATER),instrument(HEAT,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711370).
lisp_trans(rtBinaryPredicate(airTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711588).
lisp_trans(argIsa(airTemperature,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711630).
lisp_trans(argIsa(airTemperature,2,vtTemperatureMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711663).
lisp_trans(genlPreds(airTemperature,measure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711708).
lisp_trans(documentation(airTemperature,vEnglishLanguage,s("(","#$airTemperature","?","AREA","?","TEMP",")","means","that","the","temperature","of","the","air","at","?","AREA","is","?","TEMP",".","Temperature","may","be","expressed","in","units","of","#$TemperatureMeasure",",","including","#$CelsiusDegree","and","#$FahrenheitDegree",",","among","others",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':711745).
lisp_trans(genls(vtTemperatureAttribute,vtSubjectiveAssessmentAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712032).
lisp_trans(documentation(vtTemperatureAttribute,vEnglishLanguage,'TemperatureAttribute is an attribute that describes the temperature of a certain object'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712094).
lisp_trans(termFormat(vEnglishLanguage,vtTemperatureAttribute,s("temperature","attribute")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712239).
lisp_trans(=>(and(sumoAttribute(X,Y),vtTemperatureAttribute(Y),tSumoObject(X)),exists([TEMP],and(measure(X,TEMP),vtTemperatureMeasure(TEMP),sumoAttribute(TEMP,Y)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712314).
lisp_trans(vtTemperatureAttribute(tSumoColdTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712543).
lisp_trans(documentation(tSumoColdTemperature,vEnglishLanguage,'ColdTemperature is a type of  #$TemperatureAttribute that has a low or inadequate temperature'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712591).
lisp_trans(termFormat(vEnglishLanguage,tSumoColdTemperature,"cold"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712737).
lisp_trans(successorAttributeClosure(tSumoColdTemperature,tSumoHotTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712789).
lisp_trans(vtTemperatureAttribute(tSumoCoolTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712849).
lisp_trans(documentation(tSumoCoolTemperature,vEnglishLanguage,'CoolTemperature describes how there is some relief from heat but not very cold, is between cold and warm'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':712897).
lisp_trans(termFormat(vEnglishLanguage,tSumoCoolTemperature,"cool"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713054).
lisp_trans(successorAttribute(tSumoColdTemperature,tSumoCoolTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713106).
lisp_trans(vtTemperatureAttribute(tSumoWarmTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713160).
lisp_trans(documentation(tSumoWarmTemperature,vEnglishLanguage,'WarmTemperature describes how there is a comfortable or agreeable degree of heat'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713208).
lisp_trans(termFormat(vEnglishLanguage,tSumoWarmTemperature,"warm"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713341).
lisp_trans(successorAttribute(tSumoCoolTemperature,tSumoWarmTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713393).
lisp_trans(vtTemperatureAttribute(tSumoHotTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713447).
lisp_trans(documentation(tSumoHotTemperature,vEnglishLanguage,'HotTemperature describes how something  has a high temperature'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713494).
lisp_trans(termFormat(vEnglishLanguage,tSumoHotTemperature,"hot"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713608).
lisp_trans(successorAttribute(tSumoWarmTemperature,tSumoHotTemperature),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713658).
lisp_trans(=>(and(nearestIsa(X,CLASS),nearestIsa(Y,CLASS),sumoAttribute(X,tSumoColdTemperature),sumoAttribute(Y,tSumoHotTemperature)),exists([TEMPX,TEMPY],and(measure(X,TEMPX),vtTemperatureMeasure(TEMPX),measure(Y,TEMPY),vtTemperatureMeasure(TEMPY),greaterThan(TEMPY,TEMPX)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':713711).
lisp_trans(vtRelationalAttribute(tSumoMultilingual),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714071).
lisp_trans(documentation(tSumoMultilingual,vEnglishLanguage,'Multilingual describes a person who is able to speak more than one language fluently'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714115).
lisp_trans(termFormat(vEnglishLanguage,tSumoMultilingual,"multilingual"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714249).
lisp_trans(=>(sumoAttribute(X,tSumoMultilingual),tSumoHuman(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714307).
lisp_trans(=>(and(sumoAttribute(X,tSumoMultilingual),actSpeaking(SPEAK),agent(SPEAK,X)),modalAttribute(exists([LANG1,LANG2],and(xtSpokenHumanLanguage(LANG1),xtSpokenHumanLanguage(LANG2),not(equal(LANG1,LANG2)),or(patient(SPEAK,LANG1),patient(SPEAK,LANG2)))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714365).
lisp_trans(genls(tObjectRecreationalVehicle,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714747).
lisp_trans(genls(tObjectRecreationalVehicle,tSumoMobileResidence),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714786).
lisp_trans(documentation(tObjectRecreationalVehicle,vEnglishLanguage,s("A","#$RecreationalVehicle","is","a","type","of","motorized","#$Vehicle","that","is","used","for","camping","or","can","serve","as","a","#$Residence","that","is","mobile")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':714833).
lisp_trans(termFormat(vEnglishLanguage,tObjectRecreationalVehicle,"rv"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715014).
lisp_trans(=>(tObjectRecreationalVehicle(RV),modalAttribute(exists([BED,DINING,KITCHEN],and(tSumoBed(BED),tSumoDiningArea(DINING),tSumoKitchenArea(KITCHEN),located(BED,RV),located(DINING,RV),located(KITCHEN,RV))),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715069).
lisp_trans(genls(tSumoElectronicLock,tObjectLock),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715389).
lisp_trans(documentation(tSumoElectronicLock,vEnglishLanguage,'ElectronicLock is a type of #$Lock that depends on some #$ElectronicSignalling process to open'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715420).
lisp_trans(termFormat(vEnglishLanguage,tSumoElectronicLock,s("electronic","lock")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715566).
lisp_trans(=>(tSumoElectronicLock(LOCK),hasPurpose(LOCK,exists([ES,PROC],and(actElectronicSignalling(ES),destination(ES,LOCK),actOpening(PROC),instrument(PROC,LOCK),before(uBeginFn(uWhenFn(ES)),uBeginFn(uWhenFn(PROC))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715629).
lisp_trans(genls(tPlaceLikeRunningTrack,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':715963).
lisp_trans(genls(tPlaceLikeRunningTrack,tSumoLandTransitway),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716006).
lisp_trans(documentation(tPlaceLikeRunningTrack,vEnglishLanguage,'RunningTrack is a #$StationaryArtifact which serves as a path for people running'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716045).
lisp_trans(termFormat(vEnglishLanguage,tPlaceLikeRunningTrack,s("running","track")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716175).
lisp_trans(=>(tPlaceLikeRunningTrack(TRACK),hasPurpose(TRACK,exists([RUN,HUMAN],and(tSumoHuman(HUMAN),actRunning(RUN),agent(RUN,HUMAN),path(RUN,TRACK))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716234).
lisp_trans(genls(tSumoKnockLight,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716461).
lisp_trans(documentation(tSumoKnockLight,vEnglishLanguage,'KnockLight is a type of #$Device that flashes light when a door knock is made. It is used by the hearing impaired'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716490).
lisp_trans(termFormat(vEnglishLanguage,tSumoKnockLight,s("knock","light")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716651).
lisp_trans(=>(and(tSumoKnockLight(KL),tSumoRoom(ROOM),located(KL,ROOM),tSumoDoor(DOOR),part(DOOR,ROOM)),hasPurpose(KL,exists([SOUND,LIGHT,IMPACT],and(actImpacting(IMPACT),patient(IMPACT,DOOR),causes(IMPACT,SOUND),tSumoRadiatingSound(SOUND),agent(SOUND,DOOR),causes(SOUND,LIGHT),tSumoRadiatingLight(LIGHT),agent(LIGHT,KL))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':716706).
lisp_trans(=>(and(tSumoKnockLight(KL),sumoAttribute(X,tSumoDeaf),located(KL,LOC),located(X,LOC),tSumoDoor(DOOR),part(DOOR,LOC)),hasPurposeForAgent(KL,knows(X,exists([KNOCK],and(actImpacting(KNOCK),patient(KNOCK,DOOR)))),X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':717258).
lisp_trans(genls(tSumoPrayerMat,tObjectRug),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':717573).
lisp_trans(documentation(tSumoPrayerMat,vEnglishLanguage,'PrayerMat is a type of #$Rug which is used in #$Praying'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':717598).
lisp_trans(termFormat(vEnglishLanguage,tSumoPrayerMat,s("prayer","mat")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':717700).
lisp_trans(=>(tSumoPrayerMat(MAT),hasPurpose(MAT,exists([PRAY,PERSON],and(actPraying(PRAY),agent(PRAY,PERSON),tSumoHuman(PERSON),holdsDuring(uWhenFn(PRAY),orientation(PERSON,MAT,tSumoOn)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':717753).
lisp_trans(genls(tSumoVideoGame,tGame),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718041).
lisp_trans(documentation(tSumoVideoGame,vEnglishLanguage,'VideoGame is a #$Game in #$VideoRecording form'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718067).
lisp_trans(termFormat(vEnglishLanguage,tSumoVideoGame,s("video","game")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718160).
lisp_trans(=>(tSumoVideoGame(GAME),exists([VIDEO],and(actVideoRecording(VIDEO),represents(VIDEO,GAME)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718213).
lisp_trans(genls(tSumoVideoGamePlayer,tSumoMediaSystem),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718351).
lisp_trans(documentation(tSumoVideoGamePlayer,vEnglishLanguage,'VideoGamePlayer is a #$MediaSystem that enables the playing of a #$VideoGame'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718390).
lisp_trans(termFormat(vEnglishLanguage,tSumoVideoGamePlayer,s("video","game","player")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718519).
lisp_trans(=>(tSumoVideoGamePlayer(X),hasPurpose(X,exists([GAME,RL,MOVE,CONTROLLER,PLAYER],and(tSumoVideoGame(GAME),instrument(GAME,X),agent(GAME,PLAYER),tSumoManeuver(MOVE),instrument(MOVE,CONTROLLER),agent(MOVE,PLAYER),subProcess(MOVE,GAME),part(CONTROLLER,X),tSumoRadiatingLight(RL),agent(RL,X),patient(RL,GAME))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':718585).
lisp_trans(genls(tPartTypeElectricalOutlet,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':721762).
lisp_trans(documentation(tPartTypeElectricalOutlet,vEnglishLanguage,'ElectricalOutlet refers to a  #$Device that is used to connect a plug to a power source so that #$Electricity can  flow from the source to an #$ElectricDevice'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':721797).
lisp_trans(termFormat(vEnglishLanguage,tPartTypeElectricalOutlet,s("electrical","outlet")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722009).
lisp_trans(=>(tPartTypeElectricalOutlet(X),exists([HOLE],and(ttSumoCollection(HOLE),memberType(HOLE,tSumoHole),part(HOLE,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722076).
lisp_trans(=>(tPartTypeElectricalOutlet(X),hasPurpose(X,exists([POWER,WIRE],and(tSumoPowerSource(POWER),ttSumoCollection(WIRE),memberType(WIRE,tSumoWireLine),connectsEngineeringComponents(WIRE,X,POWER))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722236).
lisp_trans(genls(tPartTypeElectricalPlug,tSumoPlug),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722499).
lisp_trans(documentation(tPartTypeElectricalPlug,vEnglishLanguage,'ElectricalPlug is a type of #$Plug  made of metal that is normally used to conduct electricity from an #$ElectricalOutlet to an #$ElectricDevice'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722530).
lisp_trans(termFormat(vEnglishLanguage,tPartTypeElectricalPlug,s("electrical","plug")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722726).
lisp_trans(=>(tPartTypeElectricalPlug(X),material(tMetal,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722789).
lisp_trans(=>(tPartTypeElectricalPlug(X),hasPurpose(X,exists([OUTLET],and(tPartTypeElectricalOutlet(OUTLET),completelyFills(X,OUTLET))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':722850).
lisp_trans(=>(and(tPartTypeElectricalPlug(PLUG),tSumoElectricDevice(DEVICE),tPartTypeElectricalOutlet(OUTLET),connectedEngineeringComponents(DEVICE,PLUG),completelyFills(PLUG,OUTLET),tSumoPowerSource(POWER),connectedEngineeringComponents(POWER,OUTLET)),exists([RE],and(tSumoRadiatingElectromagnetic(RE),origin(RE,POWER),destination(RE,DEVICE)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723029).
lisp_trans(genls(tSumoOutletAdapter,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723461).
lisp_trans(documentation(tSumoOutletAdapter,vEnglishLanguage,s("An","#$OutletAdapter","is","a","device","that",",","on","one","side","has","#$Hole","and","on","another","side","has","metal","prongs","so","that","an","#$ElectricalPlug","can","fit","into","an","#$ElectricalOutlet")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723493).
lisp_trans(termFormat(vEnglishLanguage,tSumoOutletAdapter,s("outlet","adapter")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723701).
lisp_trans(=>(tSumoOutletAdapter(ADAPT),exists([HOLE],and(ttSumoCollection(HOLE),memberType(HOLE,tSumoHole),part(HOLD,ADAPT),material(tMetal,ADAPT)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723762).
lisp_trans(=>(tSumoOutletAdapter(ADAPT),hasPurpose(ADAPT,exists([OUTLET,PLUG],and(tPartTypeElectricalPlug(PLUG),tPartTypeElectricalOutlet(OUTLET),completelyFills(PLUG,ADAPT),completelyFills(ADAPT,OUTLET),connectsEngineeringComponents(ADAPT,PLUG,OUTLET))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':723957).
lisp_trans(genls(tObjectAirConditioner,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724285).
lisp_trans(documentation(tObjectAirConditioner,vEnglishLanguage,'AirConditioner is a type of #$ElectricDevice that is designed to provide comfort during hot or cold weather by keeping the air in an area a specific temperature'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724326).
lisp_trans(termFormat(vEnglishLanguage,tObjectAirConditioner,s("air","conditioner")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724538).
lisp_trans(=>(tObjectAirConditioner(X),hasPurpose(X,exists([PROC,TEMP,AREA],and(located(X,AREA),actProcess(PROC),instrument(PROC,X),result(PROC,airTemperature(AREA,TEMP)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724601).
lisp_trans(vtPositionalAttribute(tSumoSurrounded),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724843).
lisp_trans(documentation(tSumoSurrounded,vEnglishLanguage,'Surrounded describes how an object or a collection of objects #$meetsSpatially with all sides of another object'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':724885).
lisp_trans(termFormat(vEnglishLanguage,tSumoSurrounded,"surrounded"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725044).
lisp_trans(=>(orientation(OBJ1,OBJ2,tSumoSurrounded),all([X],=>(side(X,OBJ1),meetsSpatially(X,OBJ2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725098).
lisp_trans(genls(tPlaceLikeCourtyard,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725232).
lisp_trans(documentation(tPlaceLikeCourtyard,vEnglishLanguage,'Courtyard is an unroofed area wholly or  partly surrounded by walls or buildings'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725272).
lisp_trans(termFormat(vEnglishLanguage,tPlaceLikeCourtyard,"courtyard"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725399).
lisp_trans(=>(tPlaceLikeCourtyard(X),and(not(exists([ROOF],and(tSumoRoof(ROOF),top(ROOF,X)))),exists([BLDG],and(tPlaceLikeBuilding(BLDG),orientation(X,BLDG,tSumoSurrounded))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725451).
lisp_trans(genls(tSumoSpeakerDevice,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725712).
lisp_trans(documentation(tSumoSpeakerDevice,vEnglishLanguage,'SpeakerDevice is a type of device that converts electrical signals into sounds loud enough to be heard at a distance'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725752).
lisp_trans(termFormat(vEnglishLanguage,tSumoSpeakerDevice,"speaker"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725919).
lisp_trans(=>(tSumoSpeakerDevice(X),hasPurpose(X,exists([RS],and(tSumoRadiatingSound(RS),instrument(RS,X),sumoAttribute(RS,tSumoAudible))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':725973).
lisp_trans(genls(tSumoEarphone,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':726156).
lisp_trans(documentation(tSumoEarphone,vEnglishLanguage,'Earphone is a type of #$Device that that converts electric signals into sound and is usually held over or inserted in the ear'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':726183).
lisp_trans(termFormat(vEnglishLanguage,tSumoEarphone,"earphone"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':726354).
lisp_trans(=>(tSumoEarphone(X),hasPurpose(X,exists([ES,RS,SIGNAL,EAR,PROC],and(actElectricalSignalling(ES),patient(ES,SIGNAL),destination(ES,X),actProcess(PROC),instrument(PROC,X),patient(PROC,SIGNAL),result(PROC,RS),tSumoRadiatingSound(RS),origin(RS,X),before(uBeginFn(uWhenFn(ES)),uBeginFn(uWhenFn(PROC))),before(uBeginFn(uWhenFn(PROC)),uBeginFn(uWhenFn(RS))),tPartTypeEar(EAR),orientation(X,EAR,tSumoAdjacent))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':726404).
lisp_trans(genls(tSumoPublic,tSumoGroupOfPeople),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727033).
lisp_trans(documentation(tSumoPublic,vEnglishLanguage,s("a","body","of","people","sharing","some","common","interest",";","example",":","the","reading","public",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727065).
lisp_trans(=>(holdsDuring(T1,and(member(AGENT1,tSumoPublic),member(AGENT2,tSumoPublic),not(equal(AGENT1,AGENT2)))),exists([INTEREST],holdsDuring(T1,and(desires(AGENT1,INTEREST),desires(AGENT2,INTEREST))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727233).
lisp_trans(genls(tGroupedPublicAddressSystem,tSumoCommunicationSystem),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727518).
lisp_trans(documentation(tGroupedPublicAddressSystem,vEnglishLanguage,'PublicAddressSystem refers to an electronic amplification system used as a communication system in public areas'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727569).
lisp_trans(termFormat(vEnglishLanguage,tGroupedPublicAddressSystem,s("public","address","system")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727737).
lisp_trans(=>(tGroupedPublicAddressSystem(X),and(memberType(X,tPartTypeMicrophone),memberType(X,tSumoSpeakerDevice))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727811).
lisp_trans(=>(tGroupedPublicAddressSystem(X),hasPurpose(X,exists([RS,AREA,GRP],and(tSumoLandArea(AREA),located(X,AREA),tSumoGroupOfPeople(GRP),located(GRP,AREA),tSumoRadiatingSound(RS),instrument(RS,X),all([PERSON],=>(member(PERSON,GRP),exists([HEAR],and(actHearing(HEAR),patient(HEAR,RS),agent(HEAR,PERSON))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':727926).
lisp_trans(genls(tObjectWheelchair,tObjectTransportationDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':728462).
lisp_trans(documentation(tObjectWheelchair,vEnglishLanguage,'Wheelchair is a type of #$LandVehicle  that is used to individually transport those who cannot walk'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':728505).
lisp_trans(termFormat(vEnglishLanguage,tObjectWheelchair,"wheelchair"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':728652).
lisp_trans(=>(tObjectWheelchair(X),exists([WHEEL,SEAT],and(tSumoSeat(SEAT),tPartTypeWheel(WHEEL),part(SEAT,X),part(WHEEL,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':728706).
lisp_trans(=>(tObjectWheelchair(X),hasPurpose(X,exists([TRANSPORT,HUMAN],and(tSumoHuman(HUMAN),not(capability(actWalking,agent,HUMAN)),actTransportation(TRANSPORT),agent(TRANSPORT,HUMAN),instrument(TRANSPORT,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':728884).
lisp_trans(tSumoObjectiveNorm(tSumoWheelchairAccessible),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729174).
lisp_trans(documentation(tSumoWheelchairAccessible,vEnglishLanguage,'WheelchairAccessible describes how a location lets a person using a wheelchair move around without interference and  with access to all features of that place.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729220).
lisp_trans(termFormat(vEnglishLanguage,tSumoWheelchairAccessible,s("wheelchair","accessible")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729437).
lisp_trans(=>(sumoAttribute(X,tSumoWheelchairAccessible),sumoAttribute(X,tSumoHandicappedFriendly)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729512).
lisp_trans(=>(and(sumoAttribute(X,tSumoWheelchairAccessible),or(tPlaceLikeBuilding(X),tSumoRoom(X))),modalAttribute(exists([MOTION,WHEELCHAIR],and(actMotion(MOTION),instrument(MOTION,WHEELCHAIR),tObjectWheelchair(WHEELCHAIR),eventLocated(MOTION,X))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729593).
lisp_trans(vtSubjectiveAssessmentAttribute(tSumoHandicappedFriendly),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':729939).
lisp_trans(documentation(tSumoHandicappedFriendly,vEnglishLanguage,'HandicappedFriendly describes an  object that can be easily used by somebody who has some #$Disability'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730000).
lisp_trans(termFormat(vEnglishLanguage,tSumoHandicappedFriendly,s("handicapped","friendly")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730159).
lisp_trans(=>(sumoAttribute(X,tSumoHandicappedFriendly),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730232).
lisp_trans(=>(sumoAttribute(X,tSumoHandicappedFriendly),exists([ATTR,PERSON],and(actDisability(ATTR),tSumoHuman(PERSON),sumoAttribute(PERSON,ATTR),inScopeOfInterest(PERSON,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730300).
lisp_trans(genls(tSumoRecliner,tSumoSeat),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730531).
lisp_trans(documentation(tSumoRecliner,vEnglishLanguage,'Recliner is a type of #$Seat whose back can be lowered and the foot can be rasied to allow the sitter to recline in it.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730556).
lisp_trans(termFormat(vEnglishLanguage,tSumoRecliner,"recliner"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730721).
lisp_trans(=>(tSumoRecliner(X),modalAttribute(exists([INCLINE],and(actInclining(INCLINE),patient(INCLINE,X))),tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730771).
lisp_trans(genls(tSumoVisualContentBearingPhysical,tSumoContentBearingPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':730937).
lisp_trans(documentation(tSumoVisualContentBearingPhysical,vEnglishLanguage,s("Instances","of","#$VisualContentBearingPhysical","are","#$ContentBearingPhysicals","that","are","intended","to","convey","meaning","as","the","result","of","being","seen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731000).
lisp_trans(genls(tSumoVisualContentBearingObject,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731203).
lisp_trans(genls(tSumoVisualContentBearingObject,tSumoVisualContentBearingPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731262).
lisp_trans(documentation(tSumoVisualContentBearingObject,vEnglishLanguage,s("Instances","of","#$VisualContentBearingObject","are","#$ContentBearingObjects","that","are","intended","to","convey","meaning","as","the","result","of","being","seen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731329).
lisp_trans(genls(tSumoImage,tSumoVisualContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731526).
lisp_trans(documentation(tSumoImage,vEnglishLanguage,s("Instances","of","#$Image","are","#$VisualContentBearingObjects","that","convey","their","meaning","primarily","in","non","-","textual","form",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731570).
lisp_trans(genls(tSumoMultimediaProjector,tSumoMediaSystem),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731739).
lisp_trans(documentation(tSumoMultimediaProjector,vEnglishLanguage,'MultimediaProjector is a type of #$MediaSystem that projects images on a screen'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731782).
lisp_trans(termFormat(vEnglishLanguage,tSumoMultimediaProjector,s("multimedia","projector")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731918).
lisp_trans(=>(tSumoMultimediaProjector(X),hasPurpose(X,exists([RS,SCREEN,VIDEO],and(tSumoRadiatingLight(RS),instrument(RS,X),patient(RS,VIDEO),or(actVideoRecording(VIDEO),tSumoImage(VIDEO)),destination(RS,SCREEN),tObjectArtifact(SCREEN),sumoAttribute(SCREEN,tSumoFlat),not(connected(X,SCREEN)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':731991).
lisp_trans(genls(tSumoAudioRecorder,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':732422).
lisp_trans(documentation(tSumoAudioRecorder,vEnglishLanguage,'AudioRecorder is a type of #$Device that creates an #$AudioRecording by capturing sound and storing it in a #$DataStorageDevice'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':732454).
lisp_trans(termFormat(vEnglishLanguage,tSumoAudioRecorder,s("audio","recorder")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':732632).
lisp_trans(=>(tSumoAudioRecorder(X),hasPurpose(X,exists([RS,RECORD,PROC],and(tSumoRadiatingSound(RS),actIntentionalProcess(PROC),instrument(PROC,X),patient(PROC,RS),result(PROC,RECORD),actAudioRecording(RECORD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':732693).
lisp_trans(genls(tSumoVideoDisplay,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':733819).
lisp_trans(documentation(tSumoVideoDisplay,vEnglishLanguage,'VideoDisplay is a type of #$ElectricDevice that can #$RadiatingLight to show #$VideoRecording'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':733858).
lisp_trans(termFormat(vEnglishLanguage,tSumoVideoDisplay,s("video","display")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':734001).
lisp_trans(=>(tSumoVideoDisplay(X),hasPurpose(X,exists([RL,VIDEO],and(tSumoRadiatingLight(RL),actVideoRecording(VIDEO),patient(RL,VIDEO),instrument(RL,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':734060).
lisp_trans(genls(tSumoTDDPhone,tObjectTelephone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':736411).
lisp_trans(documentation(tSumoTDDPhone,vEnglishLanguage,'TDDPhone, which stands for Telecommunications Device for the Deaf, describes a #$Telephone that is designed so that #$Deaf people can  use it'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':736441).
lisp_trans(=>(tSumoTDDPhone(TDD),hasPurpose(TDD,exists([AGENT,PHONING],and(actTelephoning(PHONING),instrument(PHONING,TDD),agent(PHONING,AGENT),sumoAttribute(AGENT,tSumoDeaf))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':736629).
lisp_trans(genls(tSumoPhotocopier,tSumoElectricDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':736872).
lisp_trans(documentation(tSumoPhotocopier,vEnglishLanguage,s("An","#$ElectricDevice","designed","for","#$Making","a","two","dimensional","representation","of","an","#$Object","or","a","copy","of","a","#$TwoDimensionalObject",".","Note","that","it","is","not","necessarily","used","for","#$Copying","because","it","doesn","'t","preserve","all","the","#$Attributes","of","the","original",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':736910).
lisp_trans(=>(tSumoPhotocopier(X),hasPurpose(X,=>(and(tSumoTwoDimensionalObject(OBJ1),tSumoVisualContentBearingObject(OBJ1),containsInformation(OBJ1,INFO),actPhotocopying(COPY),instrument(COPY,X),patient(COPY,OBJ1)),exists([OBJ2,SHEET],and(result(COPY,OBJ2),tSumoTwoDimensionalObject(OBJ2),tSumoVisualContentBearingObject(OBJ2),tSumoPrintedSheet(SHEET),located(OBJ2,SHEET),containsInformation(OBJ2,INFO)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':737202).
lisp_trans(=>(tSumoPhotocopier(X),hasPurpose(X,exists([COPY],and(actPhotocopying(COPY),instrument(COPY,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':737818).
lisp_trans(genls(actPhotocopying,actMaking),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':737979).
lisp_trans(documentation(actPhotocopying,vEnglishLanguage,s("The","#$Process","of","#$Making","a","two","dimensional","representation","of","an","#$Object",".","Note","the","difference","between","#$Photocopying","and","#$Copying",",","the","result","of","#$Copying","is","na","exact","copy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738010).
lisp_trans(=>(actPhotocopying(COPY),exists([OBJ1,OBJ2],and(tSumoObject(OBJ1),tSumoVisualContentBearingObject(OBJ2),patient(COPY,OBJ1),result(COPY,OBJ2),represents(OBJ2,OBJ1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738232).
lisp_trans(genls(tSumoSail,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738492).
lisp_trans(documentation(tSumoSail,vEnglishLanguage,'Sail refers to an #$Artifact made of some type of #$Fabric which by means of which wind is used to propel a sailing vessel'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738517).
lisp_trans(termFormat(vEnglishLanguage,tSumoSail,"sail"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738681).
lisp_trans(=>(tSumoSail(SAIL),exists([MAST],and(material(tSumoFabric,SAIL),tSumoMast(MAST),connected(SAIL,MAST)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738723).
lisp_trans(genls(tSumoACPowerSource,tSumoPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738870).
lisp_trans(documentation(tSumoACPowerSource,vEnglishLanguage,'ACPowerSource refers to an alternating current #$PowerSource'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':738907).
lisp_trans(termFormat(vEnglishLanguage,tSumoACPowerSource,s("ac","power","source")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739018).
lisp_trans(genls(tSumoSinglePhasePowerSource,tSumoACPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739080).
lisp_trans(genls(tSumoThreePhasePowerSource,tSumoACPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739128).
lisp_trans(rtBinaryPredicate(voltageMeasure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739176).
lisp_trans(documentation(voltageMeasure,vEnglishLanguage,s("(","#$voltageMeasure","?","OBJ","?","MEAS",")","describes","how","much","electricity","?","OBJ",",","a","power","source",",","generates")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739218).
lisp_trans(termFormat(vEnglishLanguage,voltageMeasure,s("voltage","measure")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739360).
lisp_trans(argIsa(voltageMeasure,1,tSumoPowerSource),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739423).
lisp_trans(argIsa(voltageMeasure,2,vtPhysicalQuantity),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739461).
lisp_trans(=>(voltageMeasure(OBJ,MEAS),equal(MEAS,uMeasureFn(QUANT,vVoltFn))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739505).
lisp_trans(=>(voltageMeasure(OBJ,MEAS),exists([ELEC,PROC],and(tElectricity(ELEC),actProcess(PROC),instrument(PROC,OBJ),result(PROC,ELEC),measure(ELEC,MEAS)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739583).
lisp_trans(genls(tDocument,tSumoContentBearingObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739805).
lisp_trans(genls(tDocument,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739846).
lisp_trans(documentation(tDocument,vEnglishLanguage,s("Instances","of","#$Document","are","#$ContentBearingObjects","that","are","intended","to","convey","propositional","content","via","#$Text","(","#$LinguisticExpressions",",","seen","or","heard",")",",","#$Images",",","or","some","combination","of","these","(","e",".","g",".",",","an","audio","clip","included","in","an","electronic","document","consisting","mostly","of","#$VisualText","and","some","#$Images",")",".","Formally",",","a","#$Document","constitutes","any","#$ContentBearingObject","that","is","an","#$Artifact","conventionally","typically","intended","to","be","transmitted","and","assimilated","as","a","meaningful","whole",".","An","#$Article","or","a","#$Book","would","be","a","#$Document",",","but","a","#$Word","or","#$Paragraph","typically","would","not",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':739875).
lisp_trans(=>(tDocument(DOC),hasPurpose(DOC,exists([COMM],and(actCommunication(COMM),instrument(COMM,DOC))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':740579).
lisp_trans(genls(tSumoBook,tDocument),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':740736).
lisp_trans(documentation(tSumoBook,vEnglishLanguage,s("A","#$Document","that","has","pages","and","is","bound",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':740761).
lisp_trans(genls(tSumoGuideBook,tSumoBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':740849).
lisp_trans(documentation(tSumoGuideBook,vEnglishLanguage,'GuideBook is a type of #$Book that offers basic information about a place, normally designed for the use of visitors or tourists.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':740875).
lisp_trans(termFormat(vEnglishLanguage,tSumoGuideBook,s("guide","book")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741051).
lisp_trans(=>(tSumoGuideBook(X),exists([LOC],and(tSumoGeographicArea(LOC),refers(X,LOC)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741104).
lisp_trans(genls(tSumoDiningGuide,tSumoGuideBook),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741230).
lisp_trans(documentation(tSumoDiningGuide,vEnglishLanguage,'DiningGuide is a type of #$GuideBook that offers information about dining places around a specific location'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741263).
lisp_trans(termFormat(vEnglishLanguage,tSumoDiningGuide,s("dining","guide")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741419).
lisp_trans(=>(tSumoDiningGuide(X),exists([LOC,REST],and(tSumoGeographicArea(LOC),refers(X,LOC),tSumoRestaurant(REST),located(REST,LOC),refers(X,REST)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741476).
lisp_trans(genls(tSumoTelephoneHandset,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741689).
lisp_trans(documentation(tSumoTelephoneHandset,vEnglishLanguage,'TelephoneHandset is the part of the #$Telephone that has a #$Earphone and a #$Microphone for the transmission and reception of sound'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741724).
lisp_trans(termFormat(vEnglishLanguage,tSumoTelephoneHandset,s("telephone","handset")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741910).
lisp_trans(=>(tSumoTelephoneHandset(X),exists([EARPHONE,MIC],and(tSumoEarphone(EARPHONE),tPartTypeMicrophone(MIC),part(EARPHONE,X),part(MIC,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':741977).
lisp_trans(genls(tObjectFireAlarm,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744095).
lisp_trans(documentation(tObjectFireAlarm,vEnglishLanguage,'FireAlarm is a #$Device that releases a distinctive noise to inform people that there is a #$Fire'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744123).
lisp_trans(termFormat(vEnglishLanguage,tObjectFireAlarm,s("fire","alarm")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744267).
lisp_trans(=>(and(tObjectFireAlarm(X),sumoAttribute(X,tSumoDeviceOn),located(X,LOC)),exists([RS],and(tSumoRadiatingSound(RS),instrument(RS,X),hasPurpose(RS,exists([GRP],and(tSumoGroupOfPeople(GRP),located(GRP,LOC),knows(GRP,exists([FIRE],and(tSumoFire(FIRE),eventLocated(FIRE,LOC)))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744332).
lisp_trans(genls(tSumoGrabBar,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744813).
lisp_trans(documentation(tSumoGrabBar,vEnglishLanguage,'GrabBar is a bar attached to a #$Wall to provide a handgrip for steadying yourself'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744841).
lisp_trans(termFormat(vEnglishLanguage,tSumoGrabBar,s("grab","bar")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':744968).
lisp_trans(=>(tSumoGrabBar(X),and(exists([WALL],and(iWall(WALL),connected(X,WALL))),hasPurpose(X,exists([GRAB],and(actGrabbing(GRAB),instrument(GRAB,X)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745017).
lisp_trans(=>(tSumoGrabBar(X),modalAttribute(exists([HUMAN],and(sumoAttribute(HUMAN,tSumoPhysicalDisability),inScopeOfInterest(HUMAN,X))),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745282).
lisp_trans(genls(tSumoHighRise,tPlaceLikeBuilding),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745456).
lisp_trans(documentation(tSumoHighRise,vEnglishLanguage,'HighRise refers to a type of #$Building that has greater than 10 #$BuildingLevel'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745485).
lisp_trans(termFormat(vEnglishLanguage,tSumoHighRise,s("high","rise")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745611).
lisp_trans(=>(tSumoHighRise(X),exists([LEVELS,NUM],and(ttSumoCollection(LEVELS),all([FLR],=>(and(tSumoBuildingLevel(FLR),part(FLR,X)),member(FLR,LEVELS))),memberCount(LEVELS,NUM),greaterThanOrEqualTo(NUM,10)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745662).
lisp_trans(genls(actSoaking,actWetting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':745987).
lisp_trans(documentation(actSoaking,vEnglishLanguage,'Soaking refers to the process of #$Wetting wherein an #$Object is #$Surrounded by #$Water'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746014).
lisp_trans(termFormat(vEnglishLanguage,actSoaking,"soaking"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746148).
lisp_trans(=>(actSoaking(SOAK),exists([WATER,OBJ],and(tSumoObject(OBJ),patient(SOAK,OBJ),tWater(WATER),resource(SOAK,WATER),holdsDuring(SOAK,orientation(OBJ,WATER,tSumoSurrounded))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746196).
lisp_trans(genls(tSumoGrecianTub,tSumoBathTub),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746451).
lisp_trans(documentation(tSumoGrecianTub,vEnglishLanguage,'GrecianTub is a combination of soaking tubs and standard tubs, meaning it has inreased depth for soaking, but can fit into tight spaces by not being as long as standard tubs'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746481).
lisp_trans(termFormat(vEnglishLanguage,tSumoGrecianTub,s("grecian","tub")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746702).
lisp_trans(=>(tSumoGrecianTub(X),hasPurpose(X,exists([HUMAN,SOAK],and(actSoaking(SOAK),tSumoHuman(HUMAN),agent(SOAK,HUMAN),patient(SOAK,HUMAN),eventLocated(SOAK,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':746757).
lisp_trans(genls(tSumoHemisphereFigure,tSumoThreeDimensionalFigure),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747012).
lisp_trans(documentation(tSumoHemisphereFigure,vEnglishLanguage,'HemisphereFigure describes a figure that is half of a #$Sphere'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747063).
lisp_trans(termFormat(vEnglishLanguage,tSumoHemisphereFigure,"hemisphere"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747179).
lisp_trans(=>(and(sumoAttribute(X,HEMI),tSumoHemisphereFigure(HEMI)),exists([Y],and(tSphere(Y),half(HEMI,Y)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747239).
lisp_trans(genls(tObjectDome,actCeiling),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747397).
lisp_trans(documentation(tObjectDome,vEnglishLanguage,'Dome is a type of #$Ceiling with a #$HemisphereFigure shape'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747421).
lisp_trans(termFormat(vEnglishLanguage,tObjectDome,"dome"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747522).
lisp_trans(=>(tObjectDome(X),exists([HEMI],and(sumoAttribute(X,HEMI),tSumoHemisphereFigure(HEMI)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747564).
lisp_trans(vtRelationalAttribute(tSumoHistorical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747687).
lisp_trans(documentation(tSumoHistorical,vEnglishLanguage,'Historical describes something that was important in #$History'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747729).
lisp_trans(termFormat(vEnglishLanguage,tSumoHistorical,"historical"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747839).
lisp_trans(=>(sumoAttribute(X,tSumoHistorical),tSumoPhysical(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747893).
lisp_trans(=>(sumoAttribute(X,tSumoHistorical),refers(tSumoHistory,X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':747954).
lisp_trans(=>(and(sumoAttribute(X,tSumoHistorical),tGroupedCity(X)),exists([EV],and(tSumoPhysical(EV),sumoAttribute(EV,tSumoHistorical),eventLocated(EV,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748010).
lisp_trans(vtRelationalAttribute(tSumoRural),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748195).
lisp_trans(documentation(tSumoRural,vEnglishLanguage,'Rural describes that is characteristic of country life as opposed to the city life'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748232).
lisp_trans(termFormat(vEnglishLanguage,tSumoRural,"rural"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748357).
lisp_trans(vtRelationalAttribute(tSumoSuburban),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748401).
lisp_trans(documentation(tSumoSuburban,vEnglishLanguage,'Suburban describes something that is  characteristic of a residential district on the outskirts of a city'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748441).
lisp_trans(termFormat(vEnglishLanguage,tSumoSuburban,"suburban"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748592).
lisp_trans(vtRelationalAttribute(tSumoUrban),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748642).
lisp_trans(documentation(tSumoUrban,vEnglishLanguage,'Urban describes something that is characteristic of a city or city life'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748679).
lisp_trans(termFormat(vEnglishLanguage,tSumoUrban,"urban"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748793).
lisp_trans(genls(tSumoPatio,tPlaceLikeRegion),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748837).
lisp_trans(documentation(tSumoPatio,vEnglishLanguage,'Patio refers to an #$Region adjoining a building, usually #$Paved, that is used for outdoor activities'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':748861).
lisp_trans(termFormat(vEnglishLanguage,tSumoPatio,"patio"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749006).
lisp_trans(=>(tSumoPatio(X),and(modalAttribute(sumoAttribute(X,tPaved),tSumoLikely),exists([BLDG],and(tPlaceLikeBuilding(BLDG),orientation(X,BLDG,tSumoAdjacent),located(X,tSumoOutdoors))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749050).
lisp_trans(genls(tSumoLanai,tSumoPatio),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749286).
lisp_trans(genls(tSumoLanai,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749309).
lisp_trans(documentation(tSumoLanai,vEnglishLanguage,'Lanai refers to a roofed outdoor area %&Adjacent to a #$Building often furnished and used as a living room'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749345).
lisp_trans(=>(tSumoLanai(X),exists([ROOF],and(tSumoRoof(ROOF),part(ROOF,X),modalAttribute(exists([AREA],and(tSumoSittingArea(AREA),located(AREA,X))),tSumoLikely)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':749495).
lisp_trans(rtBinaryPredicate(hasUniform),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751079).
lisp_trans(documentation(hasUniform,vEnglishLanguage,s("(","#$hasUniform","?","GRP","?","UNIFORM",")","means","that","?","GRP","is","associated","or","identified","by","?","UNIFORM","and","members","of","?","GRP","are","expected","to","wear","?","UNIFORM")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751118).
lisp_trans(termFormat(vEnglishLanguage,hasUniform,s("has","uniform")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751298).
lisp_trans(argIsa(hasUniform,1,tGroupedGroup),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751352).
lisp_trans(argGenl(hasUniform,2,actUniformClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751380).
lisp_trans(=>(hasUniform(GRP,UNIFORM),modalAttribute(exists([PERS,CLOTHING,TIME],and(member(PERS,GRP),isa(CLOTHING,UNIFORM),holdsDuring(TIME,wears(PERS,CLOTHING)))),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751427).
lisp_trans(genls(actUniformClothing,actClothing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751684).
lisp_trans(documentation(actUniformClothing,vEnglishLanguage,'UniformClothing is a type of clothing with a  distinctive design worn by members of a particular group as a means of identification'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751720).
lisp_trans(termFormat(vEnglishLanguage,actUniformClothing,"uniform"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751904).
lisp_trans(=>(genls(X,actUniformClothing),exists([GRP],hasUniform(GRP,X))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':751960).
lisp_trans(=>(actUniformClothing(X),exists([PROC,DESIGN],and(actIntentionalProcess(PROC),result(PROC,DESIGN),represents(X,DESIGN)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752045).
lisp_trans(genls(tObjectTripod,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752221).
lisp_trans(documentation(tObjectTripod,vEnglishLanguage,'Tripod refers to a #$Device with 3 legs to support some other #$Object'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752246).
lisp_trans(termFormat(vEnglishLanguage,tObjectTripod,"tripod"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752360).
lisp_trans(=>(tObjectTripod(X),exists([LEG1,LEG2,LEG3],and(part(LEG1,X),part(LEG2,X),part(LEG3,X),meetsSpatially(LEG1,LEG2),meetsSpatially(LEG2,LEG3),meetsSpatially(LEG1,LEG3)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752406).
lisp_trans(=>(tObjectTripod(X),hasPurpose(X,exists([OBJ,PUT,PROC],and(tObjectArtifact(OBJ),actPutting(PUT),patient(PUT,OBJ),destination(PUT,X),actProcess(PROC),instrument(PROC,OBJ),before(iTimeOf_EndFn(uWhenFn(PUT)),uBeginFn(uWhenFn(PROC))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':752650).
lisp_trans(genls(tObjectEasel,tObjectTripod),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753022).
lisp_trans(documentation(tObjectEasel,vEnglishLanguage,'Easel is a type of #$Tripod that supports a flat object such as a canvas or a flipboard'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753046).
lisp_trans(termFormat(vEnglishLanguage,tObjectEasel,"easel"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753176).
lisp_trans(=>(tObjectEasel(X),hasPurpose(X,exists([OBJ,PUT],and(tObjectArtifact(OBJ),sumoAttribute(OBJ,tSumoFlat),actPutting(PUT),patient(PUT,OBJ),destination(PUT,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753220).
lisp_trans(genls(tSumoSolarium,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753456).
lisp_trans(documentation(tSumoSolarium,vEnglishLanguage,'Solarium is a type of #$Room part of which is made with #$Transparent material like glass to afford exposure to the sun.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753481).
lisp_trans(termFormat(vEnglishLanguage,tSumoSolarium,"solarium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753647).
lisp_trans(=>(tSumoSolarium(X),exists([WALL],and(iWall(WALL),part(WALL,X),sumoAttribute(WALL,tTransparent)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753697).
lisp_trans(genls(tSumoExerciseCenter,tSumoSportsFacility),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753843).
lisp_trans(documentation(tSumoExerciseCenter,vEnglishLanguage,'ExerciseCenter refers to a type of #$SportsFacility that has equipment and services for physical training and keeping fit'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':753884).
lisp_trans(termFormat(vEnglishLanguage,tSumoExerciseCenter,s("exercise","center")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754057).
lisp_trans(=>(tSumoExerciseCenter(X),hasPurpose(X,exists([DEVICE],and(or(tSumoAerobicExerciseDevice(DEVICE),tSumoAnaerobicExerciseDevice(DEVICE)),located(DEVICE,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754120).
lisp_trans(genls(tSumoGameRoom,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754356).
lisp_trans(documentation(tSumoGameRoom,vEnglishLanguage,'GameRoom refers to a type of #$Room that have facilities for #$Game that can be played'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754381).
lisp_trans(termFormat(vEnglishLanguage,tSumoGameRoom,s("game","room")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754521).
lisp_trans(=>(tSumoGameRoom(X),hasPurpose(X,exists([GAME],and(tGame(GAME),eventLocated(GAME,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754572).
lisp_trans(genls(tSumoNursery,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754717).
lisp_trans(documentation(tSumoNursery,vEnglishLanguage,'Nursery refers to a #$Room for babies'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754741).
lisp_trans(termFormat(vEnglishLanguage,tSumoNursery,"nursery"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754823).
lisp_trans(=>(tSumoNursery(X),exists([CRIB],and(tObjectCrib(CRIB),located(CRIB,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':754871).
lisp_trans(genls(tSumoSteamBath,tSumoRoom),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755457).
lisp_trans(documentation(tSumoSteamBath,vEnglishLanguage,'SteamBath refers to a room that is filled with #$Steam in order to make people sweat'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755483).
lisp_trans(termFormat(vEnglishLanguage,tSumoSteamBath,s("steam","bath")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755614).
lisp_trans(=>(tSumoSteamBath(X),exists([STEAM],and(tSumoSteam(STEAM),located(STEAM,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755667).
lisp_trans(=>(tSumoSteamBath(X),hasPurpose(X,exists([BATH],and(actBathing(BATH),eventLocated(BATH,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755785).
lisp_trans(genls(tSumoHeatedPool,tPlaceLikeSwimmingPool),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755947).
lisp_trans(documentation(tSumoHeatedPool,vEnglishLanguage,'HeatedPool is a type of #$SwimmingPool that has #$HotWaterHeater so that the #$Water in the pool is constantly kept at a certain  warm temperature'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':755982).
lisp_trans(termFormat(vEnglishLanguage,tSumoHeatedPool,s("heated","pool")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756176).
lisp_trans(=>(and(tSumoHeatedPool(X),contains(X,WATER),tWater(WATER),part(X,HEATER),tSumoWaterHeater(HEATER),sumoAttribute(HEATER,tSumoDeviceOn)),sumoAttribute(WATER,tSumoWarmTemperature)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756231).
lisp_trans(genls(tSumoRoomHeater,tObjectHeatingDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756454).
lisp_trans(documentation(tSumoRoomHeater,vEnglishLanguage,'RoomHeater is a type of #$HeatingDevice that heats the air in a confined space'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756490).
lisp_trans(termFormat(vEnglishLanguage,tSumoRoomHeater,s("room","heater")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756616).
lisp_trans(=>(tSumoRoomHeater(X),hasPurpose(X,exists([AIR,HEATING,ROOM],and(tAir(AIR),tSumoRoom(ROOM),located(AIR,ROOM),actHeating(HEATING),patient(HEATING,AIR),instrument(HEATING,X))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':756671).
lisp_trans(genls(tSumoDanceHall,tObjectStationaryArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757423).
lisp_trans(documentation(tSumoDanceHall,vEnglishLanguage,'DanceHall is a #$StationaryArtifact equipped with floors amenable to #$Dancing and devices that blare out #$MakingMusic'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757463).
lisp_trans(termFormat(vEnglishLanguage,tSumoDanceHall,s("dance","hall")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757629).
lisp_trans(=>(tSumoDanceHall(DISCO),hasPurpose(DISCO,exists([DANCE,MUSIC],and(tSumoMakingMusic(MUSIC),actDancing(DANCE),cooccur(MUSIC,DANCE),eventLocated(MUSIC,DISCO),eventLocated(DANCE,DISCO))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757682).
lisp_trans(genls(tGroupedNightClub,tSumoDanceHall),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757967).
lisp_trans(documentation(tGroupedNightClub,vEnglishLanguage,'NightClub is a type of #$DanceHall that typically opens at #$NightTime and has a #$Tavern located in it'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':757998).
lisp_trans(termFormat(vEnglishLanguage,tGroupedNightClub,s("night","club")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':758148).
lisp_trans(=>(tGroupedNightClub(X),exists([BAR],and(tSumoTavern(BAR),located(BAR,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':758675).
lisp_trans(genls(mobBartender,actSkilledOccupation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':758790).
lisp_trans(documentation(mobBartender,vEnglishLanguage,s("A","bartender","is","a","person","who","serves","#$AlcoholicBeverages","behind","a","counter","(","or","similar",")","in","a","bar",",","pub",",","tavern",",","or","similar","establishment",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':758840).
lisp_trans(=>(sumoAttribute(P,mobBartender),exists([S,B],and(actServing(S),tObjectAlcoholicBeverage(B),agent(S,P),patient(S,B)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759084).
lisp_trans(genls(actScubaDiving,actSwimming),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759255).
lisp_trans(documentation(actScubaDiving,vEnglishLanguage,'ScubaDiving is #$Swimming #$Below a #$WaterArea with the aid of some #$Device to help in #$Breathing'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759287).
lisp_trans(termFormat(vEnglishLanguage,actScubaDiving,s("scuba","diving")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759436).
lisp_trans(=>(actScubaDiving(SCUBA),exists([WATER,DEVICE,BREATH],and(tSumoWaterArea(WATER),orientation(SCUBA,WATER,tSumoBelow),tSumoDevice(DEVICE),actBreathing(BREATH),instrument(BREATH,DEVICE),subProcess(BREATH,SCUBA)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759493).
lisp_trans(tProposition(tSumoAmericansWithDisabilitiesAct),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759787).
lisp_trans(documentation(tSumoAmericansWithDisabilitiesAct,vEnglishLanguage,s("The","#$AmericansWithDisabilitiesAct","is","a","#$Proposition","promulgated","by","the","US","Employment","Opportunity","Commission","to","give","civil","right","protections","to","individuals","with","#$Disability","similar","to","those","provided","to","individuals","on","the","basis","of","race",",","color",",","sex",",","national","origin",",","age","and","religion",".","It","guarantees","equal","opportunities","for","individuals","with","#$Disability","in","public","accommodation",",","employment",",","transportation",",","State","and","local","government","services","and","telecommunications")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':759839).
lisp_trans(termFormat(vEnglishLanguage,tSumoAmericansWithDisabilitiesAct,"ADA"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760369).
lisp_trans(genlPreds(conforms,represents),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760434).
lisp_trans(documentation(conforms,vEnglishLanguage,s("(","#$conforms","?","OBJ","?","PROP",")","describes","how","?","OBJ","follows","the","ideas","outlined","by","?","PROP")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760468).
lisp_trans(termFormat(vEnglishLanguage,conforms,"conforms"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760590).
lisp_trans(argIsa(conforms,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760640).
lisp_trans(argIsa(conforms,2,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760667).
lisp_trans(=>(conforms(OBJ,tSumoAmericansWithDisabilitiesAct),sumoAttribute(OBJ,tSumoHandicappedFriendly)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760700).
lisp_trans(actGovernmentOrganization('USFEMA'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760792).
lisp_trans(documentation('USFEMA',vEnglishLanguage,'USFEMA, which stands for Federal Emergency Management Agency, is a  #$GovernmentOrganization in charge of disaster mitigation, preparedness, response,  recovery, education and references'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':760833).
lisp_trans(termFormat(vEnglishLanguage,'USFEMA',"fema"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761064).
lisp_trans(genlPreds(approves,inScopeOfInterest),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761108).
lisp_trans(rtBinaryPredicate(approves),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761149).
lisp_trans(documentation(approves,vEnglishLanguage,s("(","#$approves","?","AGENT1","?","AGENT2",")","means","that","?","AGENT1","is","satisfied","that","?","AGENT2","has","met","some","requirement","or","proposition",",","and","publicly","declares","such")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761185).
lisp_trans(termFormat(vEnglishLanguage,approves,"approves"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761370).
lisp_trans(argIsa(approves,1,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761420).
lisp_trans(argIsa(approves,2,mobCognitiveAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761455).
lisp_trans(=>(approves(AGENT1,AGENT2),exists([PROP],believes(AGENT1,conforms(AGENT2,PROP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761491).
lisp_trans(genls(tSumoWetBar,tObjectArtifact),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761599).
lisp_trans(documentation(tSumoWetBar,vEnglishLanguage,'WetBar is a place for preparing food and  beverage that has a sink with running water'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761626).
lisp_trans(termFormat(vEnglishLanguage,tSumoWetBar,s("wet","bar")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761755).
lisp_trans(=>(tSumoWetBar(X),exists([SINK,OBJ],and(tSumoWashBasin(SINK),part(SINK,X),tSumoObject(OBJ),sumoAttribute(OBJ,tSumoFlat),hasPurpose(OBJ,exists([PREP,FOOD],and(actMaking(PREP),result(PREP,FOOD),or(tPreparedFood(FOOD),tSumoBeverage(FOOD)),eventLocated(PREP,OBJ)))),part(OBJ,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':761802).
lisp_trans(genls(tSumoSurveillanceSystem,ttSumoCollection),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':762277).
lisp_trans(documentation(tSumoSurveillanceSystem,vEnglishLanguage,'SurveillanceSystem is a #$Collection of devices that work together to provide security by recording sound or video in a certain location and showing it instantly to people, presumably a #$SecurityUnit'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':762318).
lisp_trans(termFormat(vEnglishLanguage,tSumoSurveillanceSystem,s("surveillance","system")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':762574).
lisp_trans(=>(tSumoSurveillanceSystem(X),and(memberType(X,tObjectCamera),memberType(X,tSumoVideoDisplay))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':762645).
lisp_trans(=>(and(tSumoSurveillanceSystem(X),member(X,VIDEO),member(X,DISPLAY),located(VIDEO,LOC1),tObjectCamera(VIDEO),located(DISPLAY,LOC2),not(equal(LOC1,LOC2)),tSumoVideoDisplay(DISPLAY)),hasPurpose(X,exists([PROC,VID,RL,CAPTURE],and(actProcess(PROC),eventLocated(PROC,LOC1),represents(VID,PROC),instrument(CAPTURE,tObjectCamera),result(CAPTURE,VID),tSumoRadiatingLight(RL),instrument(RL,DISPLAY),patient(RL,VID),before(uBeginFn(PROC),uBeginFn(CAPTURE)),before(uBeginFn(CAPTURE),uBeginFn(RL)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':762754).
lisp_trans(=>(tSumoSecurityUnit(X),modalAttribute(exists([S],and(tSumoSurveillanceSystem(S),inScopeOfInterest(X,S))),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':763483).
lisp_trans(genls(actArtifactMediatedCommunication,actCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':764941).
lisp_trans(documentation(actArtifactMediatedCommunication,vEnglishLanguage,'ArtifactMediatedCommunication refers to #$Communication that uses some #$Artifact as an #$instrument or #$path for the #$Transfer of messages or information'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':764996).
lisp_trans(termFormat(vEnglishLanguage,actArtifactMediatedCommunication,s("artifact","mediated","communication")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765219).
lisp_trans(=>(actArtifactMediatedCommunication(X),exists([OBJ],and(tObjectArtifact(OBJ),instrument(X,OBJ)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765313).
lisp_trans(genls(actTelephoneCommunication,actArtifactMediatedCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765457).
lisp_trans(documentation(actTelephoneCommunication,vEnglishLanguage,'TelephoneCommunication refers to a #$Communication that is done through the use of the #$TelephoneSystem'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765521).
lisp_trans(termFormat(vEnglishLanguage,actTelephoneCommunication,s("telephone","communication")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765685).
lisp_trans(=>(actTelephoneCommunication(X),exists([TEL1,TEL2,ORIGIN,DEST],and(origin(X,ORIGIN),destination(X,DEST),siteForContact(ORIGIN,TEL1),siteForContact(DEST,TEL2),tObjectTelephone(TEL1),tObjectTelephone(TEL2),instrument(X,TEL1),instrument(X,TEL2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':765764).
lisp_trans(genls(actOperatorAssistedTelephoneCommunication,actTelephoneCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':766107).
lisp_trans(documentation(actOperatorAssistedTelephoneCommunication,vEnglishLanguage,'OperatorAssistedTelephoneCommunication refers to #$TelephoneCommunication where an intermediary person connects origin and destination'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':766180).
lisp_trans(termFormat(vEnglishLanguage,actOperatorAssistedTelephoneCommunication,s("operator","assisted","telephone","communication")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':766390).
lisp_trans(=>(actOperatorAssistedTelephoneCommunication(X),exists([ORIGIN,DEST,OPERATOR],and(origin(X,ORIGIN),destination(X,DEST),tSumoHuman(OPERATOR),hasPurpose(OPERATOR,exists([PROC],and(actIntentionalProcess(PROC),agent(PROC,OPERATOR),subProcess(PROC,X),result(PROC,RESULT),equal(RESULT,modalAttribute(exists([COMM],and(actCommunication(COMM),origin(COMM,ORIGIN),destination(COMM,DEST))),tSumoPossibility)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':766503).
lisp_trans(genls(actDirectDialTelephoneCommunication,actTelephoneCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':767190).
lisp_trans(documentation(actDirectDialTelephoneCommunication,vEnglishLanguage,'DirectDialTelephoneCommunication refers to #$TelephoneCommunication where there  is no operator that connects origin and destination'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':767257).
lisp_trans(termFormat(vEnglishLanguage,actDirectDialTelephoneCommunication,s("direct","dial","telephone","communication")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':767460).
lisp_trans(=>(actDirectDialTelephoneCommunication(X),not(exists([OPERATOR],and(tSumoHuman(OPERATOR),hasPurpose(OPERATOR,exists([PROC],and(actIntentionalProcess(PROC),agent(PROC,OPERATOR),subProcess(PROC,X),result(PROC,RESULT),equal(RESULT,modalAttribute(exists([COMM],and(actCommunication(COMM),origin(COMM,ORIGIN),destination(COMM,DEST))),tSumoPossibility))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':767561).
lisp_trans(genls(tSumoVoiceMail,actAudioRecording),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768237).
lisp_trans(documentation(tSumoVoiceMail,vEnglishLanguage,'VoiceMail refers to an #$AudioRecording that is done through the #$TelephoneSystem'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768273).
lisp_trans(=>(tSumoVoiceMail(X),exists([TEL],and(actTelephoneCommunication(TEL),patient(TEL,X)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768425).
lisp_trans(vtRelationalAttribute(mobLocal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768620).
lisp_trans(documentation(mobLocal,vEnglishLanguage,'Local refers to something within the same region or area'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768657).
lisp_trans(termFormat(vEnglishLanguage,mobLocal,"local"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768756).
lisp_trans(=>(and(actTelephoneCommunication(X),sumoAttribute(X,mobLocal)),exists([TEL1,TEL2,ORIGIN,DEST,CODE],and(origin(X,ORIGIN),destination(X,DEST),telephoneNumber(TEL1,ORIGIN),telephoneNumber(TEL2,DEST),telecomAreaCode(CODE,TEL1),telecomAreaCode(CODE,TEL2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':768800).
lisp_trans(vtRelationalAttribute(tSumoDomestic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769136).
lisp_trans(documentation(tSumoDomestic,vEnglishLanguage,'Domestic refers to something within the same #$Nation'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769176).
lisp_trans(termFormat(vEnglishLanguage,tSumoDomestic,"domestic"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769275).
lisp_trans(=>(and(actTelephoneCommunication(X),sumoAttribute(X,tSumoDomestic)),exists([ORIGIN,DEST,COUNTRY],and(origin(X,ORIGIN),destination(X,DEST),located(ORIGIN,COUNTRY),located(DEST,COUNTRY),actNation(COUNTRY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769331).
lisp_trans(vtRelationalAttribute(tSumoInternational),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769612).
lisp_trans(documentation(tSumoInternational,vEnglishLanguage,'International refers to something outside of the country'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769657).
lisp_trans(termFormat(vEnglishLanguage,tSumoInternational,"international"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769764).
lisp_trans(=>(and(actTelephoneCommunication(X),sumoAttribute(X,tSumoInternational)),exists([ORIGIN,DEST,CTRY1,CTRY2],and(origin(X,ORIGIN),destination(X,DEST),located(ORIGIN,CTRY1),located(DEST,CTRY2),actNation(CTRY1),actNation(CTRY2),not(equal(CTRY1,CTRY2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':769830).
lisp_trans(vtRelationalAttribute(vtCommunalAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770216).
lisp_trans(documentation(vtCommunalAttribute,vEnglishLanguage,'CommunalAttribute  describes how an #$Object is shared by many'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770265).
lisp_trans(termFormat(vEnglishLanguage,vtCommunalAttribute,"communal"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770382).
lisp_trans(vtRelationalAttribute(vtPrivateAttribute),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770441).
lisp_trans(documentation(vtPrivateAttribute,vEnglishLanguage,'PrivateAttribute describes how an  object is not available to other people without the consent of the  current owner'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770489).
lisp_trans(=>(sumoAttribute(X,vtCommunalAttribute),tSumoObject(X)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770660).
lisp_trans(=>(sumoAttribute(X,vtPrivateAttribute),modalAttribute(not(sumoAttribute(X,vtCommunalAttribute)),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770724).
lisp_trans(=>(sumoAttribute(X,vtCommunalAttribute),modalAttribute(not(sumoAttribute(X,vtPrivateAttribute)),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770833).
lisp_trans(documentation(cwPolicy,vEnglishLanguage,'Policy is (the contents of) a type of #$Declaring created and enforced by an #$Organization such as a government or a business, which contains guiding principles or a plan or course of action adopted by that organization.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':770968).
lisp_trans(termFormat(vEnglishLanguage,cwPolicy,"policy"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771233).
lisp_trans(genls(cwPolicy,tProposition),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771279).
lisp_trans(=>(cwPolicy(POLICY),exists([ORG],policyOwner(ORG,POLICY))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771468).
lisp_trans(rtBinaryPredicate(policyOwner),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771554).
lisp_trans(documentation(policyOwner,vEnglishLanguage,s("(","#$policyOwner","?","#$Organization","?","#$Policy",")","describes","how","?","#$Policy","is","adopted","and","enforced","by","?","#$Organization")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771593).
lisp_trans(termFormat(vEnglishLanguage,policyOwner,s("policy","owner")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771748).
lisp_trans(argIsa(policyOwner,1,tGroupedOrganization),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771805).
lisp_trans(argIsa(policyOwner,2,cwPolicy),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771841).
lisp_trans(=>(policyOwner(AGENT,POLICY),exists([CREATE],and(actCreation(CREATE),agent(CREATE,AGENT),result(CREATE,POLICY)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':771912).
lisp_trans(rtBinaryPredicate(conventionalLongName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772122).
lisp_trans(documentation(conventionalLongName,vEnglishLanguage,s("(","#$conventionalLongName","?","NAME","?","THING",")","means","that","the","string","?","NAME","is","the","long","form","of","the","name","conventionally","used","for","?","THING",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772171).
lisp_trans(argIsa(conventionalLongName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772354).
lisp_trans(argIsa(conventionalLongName,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772401).
lisp_trans(termFormat(vEnglishLanguage,conventionalLongName,s("official","name")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772440).
lisp_trans(genlPreds(conventionalLongName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772507).
lisp_trans(rtBinaryPredicate(conventionalShortName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772549).
lisp_trans(documentation(conventionalShortName,vEnglishLanguage,s("(","#$conventionalShortName","?","NAME","?","THING",")","means","that","the","string","?","NAME","is","the","short","form","of","the","name","conventionally","used","for","?","THING",".","For","a","more","specialized","subset","of","short","names",",","see","#$abbreviation",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772599).
lisp_trans(argIsa(conventionalShortName,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772852).
lisp_trans(argIsa(conventionalShortName,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772900).
lisp_trans(genlPreds(conventionalShortName,names),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772940).
lisp_trans(rtBinaryPredicate(abbreviation),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':772983).
lisp_trans(argIsa(abbreviation,1,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':773023).
lisp_trans(argIsa(abbreviation,2,tThing),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':773062).
lisp_trans(genlPreds(abbreviation,conventionalShortName),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':773093).
lisp_trans(documentation(abbreviation,vEnglishLanguage,s("(","#$abbreviation","?","STRING","?","THING",")","means","that","?","STRING","is","an","abbreviation","used","to","refer","to","?","THING",".","Abbreviations","include","acronyms","and","other","abbreviated","forms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':773143).
lisp_trans(termFormat(vEnglishLanguage,conventionalShortName,"acronym"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':773347).
lisp_trans(genls(tHydrogen,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775134).
lisp_trans(names(tHydrogen,"Hydrogen"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775173).
lisp_trans(conventionalShortName("H",tHydrogen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775201).
lisp_trans(atomicNumber(tHydrogen,1),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775238).
lisp_trans(=>(and(tHydrogen(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(1.0079,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775264).
lisp_trans(documentation(tHydrogen,vEnglishLanguage,s("Colourless",",","odourless","gaseous","chemical","element",".","Lightest","and","most","abundant","element","in","the","universe",".","Present","in","water","and","in","all","organic","compounds",".","Chemically","reacts","with","most","elements",".","Discovered","by","Henry","Cavendish","in","1776",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775375).
lisp_trans(genls(tHelium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775651).
lisp_trans(names(tHelium,"Helium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775688).
lisp_trans(conventionalShortName("He",tHelium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775712).
lisp_trans(atomicNumber(tHelium,2),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775748).
lisp_trans(=>(and(tHelium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(4.0026,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775772).
lisp_trans(documentation(tHelium,vEnglishLanguage,s("Colourless",",","odourless","gaseous","nonmetallic","element",".","Belongs","to","group","18","of","the","periodic","table",".","Lowest","boiling","point","of","all","elements","and","can","only","be","solidified","under","pressure",".","Chemically","inert",",","no","known","compounds",".","Discovered","in","the","solar","spectrum","in","1868","by","Lockyer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':775881).
lisp_trans(genls(tLithium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776196).
lisp_trans(names(tLithium,"Lithium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776234).
lisp_trans(conventionalShortName("Li",tLithium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776260).
lisp_trans(atomicNumber(tLithium,3),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776297).
lisp_trans(=>(and(tLithium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(6.939,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776322).
lisp_trans(documentation(tLithium,vEnglishLanguage,s("Socket","silvery","metal",".","First","member","of","group","1","of","the","periodic","table",".","Lithium","salts","are","used","in","psychomedicine",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776431).
lisp_trans(genls(tBeryllium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776589).
lisp_trans(names(tBeryllium,"Beryllium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776629).
lisp_trans(conventionalShortName("Be",tBeryllium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776659).
lisp_trans(atomicNumber(tBeryllium,4),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776698).
lisp_trans(=>(and(tBeryllium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(9.0122,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776725).
lisp_trans(documentation(tBeryllium,vEnglishLanguage,s("Grey","metallic","element","of","group","2","of","the","periodic","table",".","Is","toxic","and","can","cause","severe","lung","diseases","and","dermatitis",".","Shows","high","covalent","character",".","It","was","isolated","independently","by","F",".","Wohler","and","A",".","A",".","Bussy","in","1828",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':776837).
lisp_trans(genls(tBoron,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777105).
lisp_trans(names(tBoron,"Boron"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777141).
lisp_trans(conventionalShortName("B",tBoron),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777163).
lisp_trans(atomicNumber(tBoron,5),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777197).
lisp_trans(=>(and(tBoron(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(10.811,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777220).
lisp_trans(documentation(tBoron,vEnglishLanguage,s("An","element","of","group","13","of","the","periodic","table",".","There","are","two","allotropes",",","amorphous","boron","is","a","brown","power",",","but","metallic","boron","is","black",".","The","metallic","form","is","hard","(","9.3","on","Mohs","'","scale",")","and","a","bad","conductor","in","room","temperatures",".","It","is","never","found","free","in","nature",".","Boron","-10","is","used","in","nuclear","reactor","control","rods","and","shields",".","It","was","discovered","in","1808","by","Sir","Humphry","Davy","and","by","J",".","L",".","Gay","-","Lussac","and","L",".","J",".","Thenard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777328).
lisp_trans(genls(tCarbon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777790).
lisp_trans(names(tCarbon,"Carbon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777827).
lisp_trans(conventionalShortName("C",tCarbon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777851).
lisp_trans(atomicNumber(tCarbon,6),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777886).
lisp_trans(=>(and(tCarbon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(12.01115,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':777910).
lisp_trans(documentation(tCarbon,vEnglishLanguage,s("Carbon","is","a","member","of","group","14","of","the","periodic","table",".","It","has","three","allotropic","forms","of","it",",","diamonds",",","graphite","and","fullerite",".","Carbon","-14","is","commonly","used","in","radioactive","dating",".","Carbon","occurs","in","all","organic","life","and","is","the","basis","of","organic","chemistry",".","Carbon","has","the","interesting","chemical","property","of","being","able","to","bond","with","itself",",","and","a","wide","variety","of","other","elements",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778021).
lisp_trans(genls(tNitrogen,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778439).
lisp_trans(names(tNitrogen,"Nitrogen"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778478).
lisp_trans(conventionalShortName("N",tNitrogen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778506).
lisp_trans(atomicNumber(tNitrogen,7),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778543).
lisp_trans(=>(and(tNitrogen(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(14.0067,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778569).
lisp_trans(documentation(tNitrogen,vEnglishLanguage,s("Colourless",",","gaseous","element","which","belongs","to","group","15","of","the","periodic","table",".","Constitutes","~78","percent","of","the","atmosphere","and","is","an","essential","part","of","the","ecosystem",".","Nitrogen","for","industrial","purposes","is","acquired","by","the","fractional","distillation","of","liquid","air",".","Chemically","inactive",",","reactive","generally","only","at","high","temperatures","or","in","electrical","discharges",".","It","was","discovered","in","1772","by","D",".","Rutherford",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':778681).
lisp_trans(genls(tOxygen,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779128).
lisp_trans(names(tOxygen,"Oxygen"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779165).
lisp_trans(conventionalShortName("O",tOxygen),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779189).
lisp_trans(atomicNumber(tOxygen,8),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779224).
lisp_trans(=>(and(tOxygen(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(15.9994,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779248).
lisp_trans(documentation(tOxygen,vEnglishLanguage,s("A","colourless",",","odourless","gaseous","element","belonging","to","group","16","of","the","periodic","table",".","It","is","the","most","abundant","element","present","in","the","earth","'s","crust",".","It","also","makes","up","20.8","percent","of","the","Earth","'s","atmosphere",".","For","industrial","purposes",",","it","is","separated","from","liquid","air","by","fractional","distillation",".","It","is","used","in","high","temperature","welding",",","and","in","breathing",".","It","commonly","comes","in","the","form","of","Oxygen",",","but","is","found","as","Ozone","in","the","upper","atmosphere",".","It","was","discovered","by","Priestley","in","1774",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779358).
lisp_trans(genls(tFluorine,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779889).
lisp_trans(names(tFluorine,"Fluorine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779928).
lisp_trans(conventionalShortName("F",tFluorine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779956).
lisp_trans(atomicNumber(tFluorine,9),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':779993).
lisp_trans(=>(and(tFluorine(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(18.9984,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780019).
lisp_trans(documentation(tFluorine,vEnglishLanguage,s("A","poisonous","pale","yellow","gaseous","element","belonging","to","group","17","of","the","periodic","table","(","The","halogens",")",".","It","is","the","most","chemically","reactive","and","electronegative","element",".","It","is","highly","dangerous",",","causing","severe","chemical","burns","on","contact","with","flesh",".","Fluorine","was","identified","by","Scheele","in","1771","and","first","isolated","by","Moissan","in","1886",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780131).
lisp_trans(genls(tNeon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780506).
lisp_trans(names(tNeon,"Neon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780541).
lisp_trans(conventionalShortName("Ne",tNeon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780561).
lisp_trans(atomicNumber(tNeon,10),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780595).
lisp_trans(=>(and(tNeon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(20.183,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780618).
lisp_trans(documentation(tNeon,vEnglishLanguage,s("Colourless","gaseous","element","of","group","18","on","the","periodic","table","(","noble","gases",")",".","Neon","occurs","in","the","atmosphere",",","and","comprises","0.0018","percent","of","the","volume","of","the","atmosphere",".","It","has","a","distinct","reddish","glow","when","used","in","discharge","tubes","and","neon","based","lamps",".","It","forms","almost","no","chemical","compounds",".","Neon","was","discovered","in","1898","by","Sir","William","Ramsey","and","M",".","W",".","Travers",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':780725).
lisp_trans(genls(tSodium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781136).
lisp_trans(names(tSodium,"Sodium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781173).
lisp_trans(conventionalShortName("Na",tSodium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781197).
lisp_trans(atomicNumber(tSodium,11),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781233).
lisp_trans(=>(and(tSodium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(22.9898,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781258).
lisp_trans(documentation(tSodium,vEnglishLanguage,s("Soft","silvery","reactive","element","belonging","to","group","1","of","the","periodic","table","(","alkali","metals",")",".","It","is","highly","reactive",",","oxidizing","in","air","and","reacting","violently","with","water",",","forcing","it","to","be","kept","under","oil",".","It","was","first","isolated","by","Humphrey","Davy","in","1807",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781368).
lisp_trans(genls(tMagnesium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781662).
lisp_trans(names(tMagnesium,"Magnesium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781702).
lisp_trans(conventionalShortName("Mg",tMagnesium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781732).
lisp_trans(atomicNumber(tMagnesium,12),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781771).
lisp_trans(=>(and(tMagnesium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(24.312,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781799).
lisp_trans(documentation(tMagnesium,vEnglishLanguage,s("Silvery","metallic","element","belonging","to","group","2","of","the","periodic","table","(","alkaline","-","earth","metals",")",".","It","is","essential","for","living","organisms",",","and","is","used","in","a","number","of","light","alloys",".","Chemically","very","reactive",",","it","forms","a","protective","oxide","coating","when","exposed","to","air","and","burns","with","an","intense","white","flame",".","It","also","reacts","with","sulphur",",","nitrogen","and","the","halogens",".","First","isolated","by","Bussy","in","1828",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':781911).
lisp_trans(genls(tAluminum,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782348).
lisp_trans(names(tAluminum,"Aluminum"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782387).
lisp_trans(conventionalShortName("Al",tAluminum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782415).
lisp_trans(atomicNumber(tAluminum,13),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782453).
lisp_trans(=>(and(tAluminum(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(26.9815,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782480).
lisp_trans(documentation(tAluminum,vEnglishLanguage,s("Silvery","-","white","lustrous","metallic","element","of","group","3","of","the","periodic","table",".","Highly","reactive","but","protected","by","a","thin","transparent","layer","of","the","oxide","which","quickly","forms","in","air",".","There","are","many","alloys","of","aluminum",",","as","well","as","a","good","number","of","industrial","uses",".","Makes","up","8.1","percent","of","the","Earth","'s","crust",",","by","weight",".","Isolated","in","1825","by","H",".","C",".","Oersted",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782592).
lisp_trans(genls(tSilicon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':782988).
lisp_trans(names(tSilicon,"Silicon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783026).
lisp_trans(conventionalShortName("Si",tSilicon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783052).
lisp_trans(atomicNumber(tSilicon,14),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783089).
lisp_trans(=>(and(tSilicon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(28.086,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783115).
lisp_trans(documentation(tSilicon,vEnglishLanguage,s("Metalloid","element","belonging","to","group","14","of","the","periodic","table",".","It","is","the","second","most","abundant","element","in","the","Earth","'s","crust",",","making","up","25.7","percent","of","it","by","weight",".","Chemically","less","reactive","than","carbon",".","First","identified","by","Lavoisier","in","1787","and","first","isolated","in","1823","by","Berzelius",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783225).
lisp_trans(genls(tPhosphorus,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783557).
lisp_trans(names(tPhosphorus,"Phosphorus"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783598).
lisp_trans(conventionalShortName("P",tPhosphorus),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783630).
lisp_trans(atomicNumber(tPhosphorus,15),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783669).
lisp_trans(=>(and(tPhosphorus(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(30.9738,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783698).
lisp_trans(documentation(tPhosphorus,vEnglishLanguage,s("Non","-","metallic","element","belonging","to","group","15","of","the","periodic","table",".","Has","a","multiple","allotropic","forms",".","Essential","element","for","living","organisms",".","It","was","discovered","by","Brandt","in","1669",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':783812).
lisp_trans(genls(tSumoSulphur,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784040).
lisp_trans(names(tSumoSulphur,"Sulphur"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784078).
lisp_trans(conventionalShortName("S",tSumoSulphur),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784104).
lisp_trans(atomicNumber(tSumoSulphur,16),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784140).
lisp_trans(=>(and(tSumoSulphur(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(32.064,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784166).
lisp_trans(documentation(tSumoSulphur,vEnglishLanguage,s("Yellow",",","nonmetallic","element","belonging","to","group","16","of","the","periodic","table",".","It","is","an","essential","element","in","living","organisms",",","needed","in","the","amino","acids","cysteine","and","methionine",",","and","hence","in","many","proteins",".","Absorbed","by","plants","from","the","soil","as","sulphate","ion",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784276).
lisp_trans(genls(tChlorine,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784575).
lisp_trans(names(tChlorine,"Chlorine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784614).
lisp_trans(conventionalShortName("Cl",tChlorine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784642).
lisp_trans(atomicNumber(tChlorine,17),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784680).
lisp_trans(=>(and(tChlorine(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(35.453,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784707).
lisp_trans(documentation(tChlorine,vEnglishLanguage,s("Halogen","element",".","Poisonous","greenish","-","yellow","gas",".","Occurs","widely","in","nature","as","sodium","chloride","in","seawater",".","Reacts","directly","with","many","elements","and","compounds",",","strong","oxidizing","agent",".","Discovered","by","Karl","Scheele","in","1774",".","Humphrey","David","confirmed","it","as","an","element","in","1810",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':784818).
lisp_trans(genls(tArgon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785137).
lisp_trans(names(tArgon,"Argon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785173).
lisp_trans(conventionalShortName("Ar",tArgon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785195).
lisp_trans(atomicNumber(tArgon,18),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785230).
lisp_trans(=>(and(tArgon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(39.948,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785254).
lisp_trans(documentation(tArgon,vEnglishLanguage,s("Monatomic","noble","gas",".","Makes","up","0.93","percent","of","the","air",".","Colourless",",","odorless",".","Is","inert","and","has","no","true","compounds",".","Lord","Rayleigh","and","Sir","william","Ramsey","identified","argon","in","1894",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785362).
lisp_trans(genls(tPotassium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785586).
lisp_trans(names(tPotassium,"Potassium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785626).
lisp_trans(conventionalShortName("K",tPotassium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785656).
lisp_trans(atomicNumber(tPotassium,19),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785694).
lisp_trans(=>(and(tPotassium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(39.0983,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785722).
lisp_trans(documentation(tPotassium,vEnglishLanguage,s("Soft","silvery","metallic","element","belonging","to","group","1","of","the","periodic","table","(","alkali","metals",")",".","Occurs","naturally","in","seawater","and","a","many","minerals",".","Highly","reactive",",","chemically",",","it","resembles","sodium","in","its","behavior","and","compounds",".","Discovered","by","Sir","Humphry","Davy","in","1807",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':785835).
lisp_trans(genls(tCalcium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786147).
lisp_trans(names(tCalcium,"Calcium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786185).
lisp_trans(conventionalShortName("Ca",tCalcium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786211).
lisp_trans(atomicNumber(tCalcium,20),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786248).
lisp_trans(=>(and(tCalcium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(40.08,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786274).
lisp_trans(documentation(tCalcium,vEnglishLanguage,s("Soft","grey","metallic","element","belonging","to","group","2","of","the","periodic","table",".","Used","a","reducing","agent","in","the","extraction","of","thorium",",","zirconium","and","uranium",".","Essential","element","for","living","organisms",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786383).
lisp_trans(genls(tScandium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786617).
lisp_trans(names(tScandium,"Scandium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786656).
lisp_trans(conventionalShortName("Sc",tScandium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786684).
lisp_trans(atomicNumber(tScandium,21),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786722).
lisp_trans(=>(and(tScandium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(44.956,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786749).
lisp_trans(documentation(tScandium,vEnglishLanguage,s("Rare","soft","silvery","metallic","element","belonging","to","group","3","of","the","periodic","table",".","There","are","ten","isotopes",",","nine","of","which","are","radioactive","and","have","short","half","-","lives",".","Predicted","in","1869","by","Mendeleev",",","isolated","by","Nilson","in","1879",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':786860).
lisp_trans(genls(tTitanium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787130).
lisp_trans(names(tTitanium,"Titanium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787169).
lisp_trans(conventionalShortName("Ti",tTitanium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787197).
lisp_trans(atomicNumber(tTitanium,22),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787235).
lisp_trans(=>(and(tTitanium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(47.9,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787262).
lisp_trans(documentation(tTitanium,vEnglishLanguage,s("White","metallic","transition","element",".","Occurs","in","numerous","minerals",".","Used","in","strong",",","light","corrosion","-","resistant","alloys",".","Forms","a","passive","oxide","coating","when","exposed","to","air",".","First","discovered","by","Gregor","in","1789",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787372).
lisp_trans(genls(tVanadium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787625).
lisp_trans(names(tVanadium,"Vanadium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787664).
lisp_trans(conventionalShortName("V",tVanadium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787692).
lisp_trans(atomicNumber(tVanadium,23),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787729).
lisp_trans(=>(and(tVanadium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(50.9415,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787756).
lisp_trans(documentation(tVanadium,vEnglishLanguage,s("Soft","and","ductile",",","bright","white","metal",".","Good","resistance","to","corrosion","by","alkalis",",","sulphuric","and","hydrochloric","acid",".","It","oxidizes","readily","about","933","K",".","There","are","two","naturally","occurring","isotopes","of","vanadium",",","and","5","radioisotopes",",","V","-49","having","the","longest","half","-","life","at","337","days",".","Vanadium","has","nuclear","applications",",","the","foil","is","used","in","cladding","titanium","to","steel",",","and","vanadium","-","gallium","tape","is","used","to","produce","a","superconductive","magnet",".","Originally","discovered","by","Andres","Manuel","del","Rio","of","Mexico","City","in","1801",".","His","discovery","went","unheeded",",","however",",","and","in","1820",",","Nils","Gabriel","Sefstron","of","Sweden","rediscovered","it",".","Metallic","vanadium","was","isolated","by","Henry","Enfield","Roscoe","in","1867",".","The","name","vanadium","comes","from","{","Vanadis","}",",","a","goddess","of","Scandinavian","mythology",".","Silvery","-","white","metallic","transition","element",".","Vanadium","is","essential","to","{","ascidian","}","s",".","Rats","and","chickens","are","also","known","to","require","it",".","Metal","powder","is","a","fire","hazard",",","and","vanadium","compounds","should","be","considered","highly","toxic",".","May","cause","lung","cancer","if","inhaled",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':787868).
lisp_trans(genls(tChromium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':788926).
lisp_trans(names(tChromium,"Chromium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':788965).
lisp_trans(conventionalShortName("Cr",tChromium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':788993).
lisp_trans(atomicNumber(tChromium,24),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789031).
lisp_trans(=>(and(tChromium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(51.996,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789058).
lisp_trans(documentation(tChromium,vEnglishLanguage,s("Hard","silvery","transition","element",".","Used","in","decorative","electroplating",".","Discovered","in","1797","by","Vauquelin",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789169).
lisp_trans(genls(tManganese,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789318).
lisp_trans(names(tManganese,"Manganese"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789358).
lisp_trans(conventionalShortName("Mn",tManganese),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789388).
lisp_trans(atomicNumber(tManganese,25),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789427).
lisp_trans(=>(and(tManganese(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(54.938,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789455).
lisp_trans(documentation(tManganese,vEnglishLanguage,s("Grey","brittle","metallic","transition","element",".","Rather","electropositive",",","combines","with","some","non","-","metals","when","heated",".","Discovered","in","1774","by","Scheele",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789567).
lisp_trans(genls(tIron,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789757).
lisp_trans(names(tIron,"Iron"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789792).
lisp_trans(conventionalShortName("Fe",tIron),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789812).
lisp_trans(atomicNumber(tIron,26),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789846).
lisp_trans(=>(and(tIron(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(55.847,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789869).
lisp_trans(documentation(tIron,vEnglishLanguage,s("Silvery","malleable","and","ductile","metallic","transition","element",".","Has","nine","isotopes","and","is","the","fourth","most","abundant","element","in","the","earth","'s","crust",".","Required","by","living","organisms","as","a","trace","element","(","used","in","hemoglobin","in","humans",".",")","Quite","reactive",",","oxidizes","in","moist","air",",","displaces","hydrogen","from","dilute","acids","and","combines","with","nonmetallic","elements",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':789976).
lisp_trans(genls(tCobalt,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790358).
lisp_trans(names(tCobalt,"Cobalt"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790395).
lisp_trans(conventionalShortName("Co",tCobalt),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790419).
lisp_trans(atomicNumber(tCobalt,27),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790455).
lisp_trans(=>(and(tCobalt(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(58.993,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790480).
lisp_trans(documentation(tCobalt,vEnglishLanguage,s("Light","grey","transition","element",".","Some","meteorites","contain","small","amounts","of","metallic","cobalt",".","Generally","alloyed","for","use",".","Mammals","require","small","amounts","of","cobalt","salts",".","Cobalt","-60",",","an","artificially","produced","radioactive","isotope","of","Cobalt","is","an","important","radioactive","tracer","and","cancer","-","treatment","agent",".","Discovered","by","G",".","Brandt","in","1737",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790589).
lisp_trans(genls(tNickel,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':790967).
lisp_trans(names(tNickel,"Nickel"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791004).
lisp_trans(conventionalShortName("Ni",tNickel),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791028).
lisp_trans(atomicNumber(tNickel,28),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791064).
lisp_trans(=>(and(tNickel(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(58.71,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791089).
lisp_trans(documentation(tNickel,vEnglishLanguage,s("Malleable","ductile","silvery","metallic","transition","element",".","Discovered","by","A",".","F",".","Cronstedt","in","1751",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791197).
lisp_trans(genls(tCopper,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791336).
lisp_trans(names(tCopper,"Copper"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791373).
lisp_trans(conventionalShortName("Cu",tCopper),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791397).
lisp_trans(atomicNumber(tCopper,29),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791433).
lisp_trans(=>(and(tCopper(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(63.54,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791458).
lisp_trans(documentation(tCopper,vEnglishLanguage,s("Red","-","brown","transition","element",".","Known","by","the","Romans","as","'","cuprum",".","'","Extracted","and","used","for","thousands","of","years",".","Malleable",",","ductile","and","an","excellent","conductor","of","heat","and","electricity",".","When","in","moist","conditions",",","a","greenish","layer","forms","on","the","outside",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791566).
lisp_trans(genls(tZinc,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791857).
lisp_trans(names(tZinc,"Zinc"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791892).
lisp_trans(conventionalShortName("Zn",tZinc),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791912).
lisp_trans(atomicNumber(tZinc,30),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791946).
lisp_trans(=>(and(tZinc(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(65.38,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':791969).
lisp_trans(documentation(tZinc,vEnglishLanguage,s("Blue","-","white","metallic","element",".","Occurs","in","multiple","compounds","naturally",".","Five","stable","isotopes","are","six","radioactive","isotopes","have","been","found",".","Chemically","a","reactive","metal",",","combines","with","oxygen","and","other","non","-","metals",",","reacts","with","dilute","acids","to","release","hydrogen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792075).
lisp_trans(genls(tGallium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792376).
lisp_trans(names(tGallium,"Gallium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792414).
lisp_trans(conventionalShortName("Ga",tGallium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792440).
lisp_trans(atomicNumber(tGallium,31),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792477).
lisp_trans(=>(and(tGallium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(69.72,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792503).
lisp_trans(documentation(tGallium,vEnglishLanguage,s("Soft","silvery","metallic","element",",","belongs","to","group","13","of","the","periodic","table",".","The","two","stable","isotopes","are","Ga","-69","and","Ga","-71",".","Eight","radioactive","isotopes","are","known",",","all","having","short","half","-","lives",".","Gallium","Arsenide","is","used","as","a","semiconductor",".","Corrodes","most","other","metals","by","diffusing","into","their","lattice",".","First","identified","by","Francois","Lecoq","de","Boisbaudran","in","1875",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':792612).
lisp_trans(genls(tGermanium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793016).
lisp_trans(names(tGermanium,"Germanium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793056).
lisp_trans(conventionalShortName("Ge",tGermanium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793086).
lisp_trans(atomicNumber(tGermanium,32),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793125).
lisp_trans(=>(and(tGermanium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(72.59,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793153).
lisp_trans(documentation(tGermanium,vEnglishLanguage,s("Lustrous","hard","metalloid","element",",","belongs","to","group","14","of","the","periodic","table",".","Forms","a","large","number","of","organometallic","compounds",".","Predicted","by","Mendeleev","in","1871",",","it","was","actually","found","in","1886","by","Winkler",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793264).
lisp_trans(genls(tArsenic,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793515).
lisp_trans(names(tArsenic,"Arsenic"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793553).
lisp_trans(conventionalShortName("As",tArsenic),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793579).
lisp_trans(atomicNumber(tArsenic,33),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793616).
lisp_trans(=>(and(tArsenic(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(74.922,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793642).
lisp_trans(documentation(tArsenic,vEnglishLanguage,s("Metalloid","element","of","group","15",".","There","are","three","allotropes",",","yellow",",","black",",","and","grey",".","Reacts","with","halogens",",","concentrated","oxidizing","acids","and","hot","alkalis",".","Albertus","Magnus","is","believed","to","have","been","the","first","to","isolate","the","element","in","1250",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':793752).
lisp_trans(genls(tSelenium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794037).
lisp_trans(names(tSelenium,"Selenium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794076).
lisp_trans(conventionalShortName("Se",tSelenium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794104).
lisp_trans(atomicNumber(tSelenium,34),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794142).
lisp_trans(=>(and(tSelenium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(78.96,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794169).
lisp_trans(documentation(tSelenium,vEnglishLanguage,s("Metalloid","element",",","belongs","to","group","16","of","the","periodic","table",".","Multiple","allotropic","forms","exist",".","Chemically","resembles","sulphur",".","Discovered","in","1817","by","Jons","J",".","Berzelius",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794279).
lisp_trans(genls(tBromine,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794496).
lisp_trans(names(tBromine,"Bromine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794534).
lisp_trans(conventionalShortName("Br",tBromine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794560).
lisp_trans(atomicNumber(tBromine,35),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794597).
lisp_trans(=>(and(tBromine(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(79.909,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794623).
lisp_trans(documentation(tBromine,vEnglishLanguage,s("Halogen","element",".","Red","volatile","liquid","at","room","temperature",".","Its","reactivity","is","somewhere","between","chlorine","and","iodine",".","Harmful","to","human","tissue","in","a","liquid","state",",","the","vapour","irritates","eyes","and","throat",".","Discovered","in","1826","by","Antoine","Balard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':794733).
lisp_trans(genls(tKrypton,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795018).
lisp_trans(names(tKrypton,"Krypton"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795056).
lisp_trans(conventionalShortName("Kr",tKrypton),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795082).
lisp_trans(atomicNumber(tKrypton,36),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795119).
lisp_trans(=>(and(tKrypton(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(83.8,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795145).
lisp_trans(documentation(tKrypton,vEnglishLanguage,s("Colorless","gaseous","element",",","belongs","to","the","noble","gases",".","Occurs","in","the","air",",","0.0001","percent","by","volume",".","It","can","be","extracted","from","liquid","air","by","fractional","distillation",".","Generally","not","isolated",",","but","used","with","other","inert","gases","in","fluorescent","lamps",".","Five","natural","isotopes",",","and","five","radioactive","isotopes",".","Kr","-85",",","the","most","stable","radioactive","isotope",",","has","a","half","-","life","of","10.76","years","and","is","produced","in","fission","reactors",".","Practically","inert",",","though","known","to","form","compounds","with","{","fluorine","}",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795254).
lisp_trans(genls(tRubidium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795786).
lisp_trans(names(tRubidium,"Rubidium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795825).
lisp_trans(conventionalShortName("Rb",tRubidium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795853).
lisp_trans(atomicNumber(tRubidium,37),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795891).
lisp_trans(=>(and(tRubidium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(85.47,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':795918).
lisp_trans(documentation(tRubidium,vEnglishLanguage,s("Soft","silvery","metallic","element",",","belongs","to","group","1","of","the","periodic","table",".","Rb","-97",",","the","naturally","occurring","isotope",",","is","radioactive",".","It","is","highly","reactive",",","with","properties","similar","to","other","elements","in","group","1",",","like","igniting","spontaneously","in","air",".","Discovered","spectroscopically","in","1861","by","W",".","Bunsen","and","G",".","R",".","Kirchoff",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796028).
lisp_trans(genls(tStrontium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796393).
lisp_trans(names(tStrontium,"Strontium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796433).
lisp_trans(conventionalShortName("Sr",tStrontium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796463).
lisp_trans(atomicNumber(tStrontium,38),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796502).
lisp_trans(=>(and(tStrontium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(87.62,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796530).
lisp_trans(documentation(tStrontium,vEnglishLanguage,s("Soft","yellowish","metallic","element",",","belongs","to","group","2","of","the","periodic","table",".","Highly","reactive","chemically",".","Sr","-90","is","present","in","radioactive","fallout","and","has","a","half","-","life","of","28","years",".","Discovered","in","1798","by","Klaproth","and","Hope",",","isolated","in","1808","by","Humphry","Davy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796641).
lisp_trans(genls(tYttrium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796945).
lisp_trans(names(tYttrium,"Yttrium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':796983).
lisp_trans(conventionalShortName("Y",tYttrium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797009).
lisp_trans(atomicNumber(tYttrium,39),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797045).
lisp_trans(=>(and(tYttrium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(88.905,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797071).
lisp_trans(documentation(tYttrium,vEnglishLanguage,s("Silvery","-","grey","metallic","element","of","group","3","on","the","periodic","table",".","Found","in","uranium","ores",".","The","only","natural","isotope","is","Y","-89",",","there","are","14","other","artificial","isotopes",".","Chemically","resembles","the","lanthanoids",".","Stable","in","the","air","below","400","degrees",",","celsius",".","Discovered","in","1828","by","Friedrich","Wohler",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797181).
lisp_trans(genls(tZirconium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797519).
lisp_trans(names(tZirconium,"Zirconium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797559).
lisp_trans(conventionalShortName("Zr",tZirconium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797589).
lisp_trans(atomicNumber(tZirconium,40),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797628).
lisp_trans(=>(and(tZirconium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(91.22,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797656).
lisp_trans(documentation(tZirconium,vEnglishLanguage,s("Grey","-","white","metallic","transition","element",".","Five","natural","isotopes","and","six","radioactive","isotopes","are","known",".","Used","in","nuclear","reactors","for","a","{","neutron","}","absorber",".","Discovered","in","1789","by","Martin","Klaproth",",","isolated","in","1824","by","Berzelius",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':797767).
lisp_trans(genls(tNiobium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798042).
lisp_trans(names(tNiobium,"Niobium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798080).
lisp_trans(conventionalShortName("Nb",tNiobium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798106).
lisp_trans(atomicNumber(tNiobium,41),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798143).
lisp_trans(=>(and(tNiobium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(92.906,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798169).
lisp_trans(documentation(tNiobium,vEnglishLanguage,s("Soft",",","ductile","grey","-","blue","metallic","transition","element",".","Used","in","special","steels","and","in","welded","joints","to","increase","strength",".","Combines","with","halogens","and","oxidizes","in","air","at","200","degrees","celsius",".","Discovered","by","Charles","Hatchett","in","1801","and","isolated","by","Blomstrand","in","1864",".","Called","{","columbium","}","originally",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798279).
lisp_trans(genls(tMolybdenum,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798623).
lisp_trans(names(tMolybdenum,"Molybdenum"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798664).
lisp_trans(conventionalShortName("Mo",tMolybdenum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798696).
lisp_trans(atomicNumber(tMolybdenum,42),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798736).
lisp_trans(=>(and(tMolybdenum(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(95.94,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798765).
lisp_trans(documentation(tMolybdenum,vEnglishLanguage,s("Silvery","-","white",",","hard","metallic","transition","element",".","It","is","chemically","unreactive","and","is","not","affected","by","most","acids",".","It","oxidizes","at","high","temperatures",".","There","are","seven","natural","isotopes",",","and","four","radioisotopes",",","Mo","-93","being","the","most","stable","with","a","half","-","life","of","3500","years",".","Molybdenum","is","used","in","almost","all","high","-","strength","steels",",","it","has","nuclear","applications",",","and","is","a","catalyst","in","petroleum","refining",".","Discovered","in","1778","by","Carl","Welhelm","Scheele","of","Sweden",".","Impure","metal","was","prepared","in","1782","by","Peter","Jacob","Hjelm",".","The","name","comes","from","the","Greek","word","molybdos","which","means","lead",".","Trace","amounts","of","molybdenum","are","required","for","all","known","forms","of","life",".","All","molybdenum","compounds","should","be","considered","highly","toxic",",","and","will","also","cause","severe","birth","defects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':798877).
lisp_trans(genls(tObjectTechnetium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799676).
lisp_trans(names(tObjectTechnetium,"Technetium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799717).
lisp_trans(conventionalShortName("Tc",tObjectTechnetium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799749).
lisp_trans(atomicNumber(tObjectTechnetium,43),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799789).
lisp_trans(=>(and(tObjectTechnetium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(98,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799818).
lisp_trans(documentation(tObjectTechnetium,vEnglishLanguage,"Radioactive metallic transition element.  Can  be detected in some stars and the fission products of uranium.  First made  by Perrier and Segre by bombarding molybdenum with deutrons, giving them  Tc-97.  Tc-99 is the most stable isotope with a half-life of 2.6*10^6  years.  Sixteen isotopes are known.  Organic technetium compounds are used  in bone imaging.  Chemical properties are intermediate between rhenium and  manganese."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':799927).
lisp_trans(genls(tRuthenium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800405).
lisp_trans(names(tRuthenium,"Ruthenium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800445).
lisp_trans(conventionalShortName("Ru",tRuthenium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800475).
lisp_trans(atomicNumber(tRuthenium,44),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800514).
lisp_trans(=>(and(tRuthenium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(101.07,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800542).
lisp_trans(documentation(tRuthenium,vEnglishLanguage,s("Hard","white","metallic","transition","element",".","Found","with","platinum",",","used","as","a","catalyst","in","some","platinum","alloys",".","Dissolves","in","fused","alkalis",",","and","is","not","attacked","by","acids",".","Reacts","with","halogens","and","oxygen","at","high","temperatures",".","Isolated","in","1844","by","K",".","K",".","Klaus",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800654).
lisp_trans(genls(tRhodium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800957).
lisp_trans(names(tRhodium,"Rhodium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':800995).
lisp_trans(conventionalShortName("Rh",tRhodium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801021).
lisp_trans(atomicNumber(tRhodium,45),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801058).
lisp_trans(=>(and(tRhodium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(102.905,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801084).
lisp_trans(documentation(tRhodium,vEnglishLanguage,s("Silvery","white","metallic","transition","element",".","Found","with","platinum","and","used","in","some","platinum","alloys",".","Not","attacked","by","acids",",","dissolves","only","in","aqua","regia",".","Discovered","in","1803","by","W",".","H",".","Wollaston",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801195).
lisp_trans(genls(tPalladium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801433).
lisp_trans(names(tPalladium,"Palladium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801473).
lisp_trans(conventionalShortName("Pd",tPalladium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801503).
lisp_trans(atomicNumber(tPalladium,46),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801542).
lisp_trans(=>(and(tPalladium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(106.4,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801570).
lisp_trans(documentation(tPalladium,vEnglishLanguage,s("Soft","white","ductile","transition","element",".","Found","with","some","copper","and","nickel","ores",".","Does","not","react","with","oxygen","at","normal","temperatures",".","Dissolves","slowly","in","hydrochloric","acid",".","Discovered","in","1803","by","W",".","H",".","Wollaston",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801681).
lisp_trans(genls(tSilver,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801942).
lisp_trans(names(tSilver,"Silver"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':801979).
lisp_trans(conventionalShortName("Ag",tSilver),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802003).
lisp_trans(atomicNumber(tSilver,47),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802039).
lisp_trans(=>(and(tSilver(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(107.87,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802064).
lisp_trans(documentation(tSilver,vEnglishLanguage,s("White","lustrous","soft","metallic","transition","element",".","Found","in","both","its","elemental","form","and","in","minerals",".","Used","in","jewellery",",","tableware","and","so","on",".","Less","reactive","than","silver",",","chemically",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802174).
lisp_trans(genls(tCadmium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802400).
lisp_trans(names(tCadmium,"Cadmium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802438).
lisp_trans(conventionalShortName("Cd",tCadmium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802464).
lisp_trans(atomicNumber(tCadmium,48),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802501).
lisp_trans(=>(and(tCadmium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(112.4,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802527).
lisp_trans(documentation(tCadmium,vEnglishLanguage,s("Soft","bluish","metal","belonging","to","group","12","of","the","periodic","table",".","Extremely","toxic","even","in","low","concentrations",".","Chemically","similar","to","zinc",",","but","lends","itself","to","more","complex","compounds",".","Discovered","in","1817","by","F",".","Stromeyer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802637).
lisp_trans(genls(tIndium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802903).
lisp_trans(names(tIndium,"Indium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802940).
lisp_trans(conventionalShortName("In",tIndium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':802964).
lisp_trans(atomicNumber(tIndium,49),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803000).
lisp_trans(=>(and(tIndium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(114.82,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803025).
lisp_trans(documentation(tIndium,vEnglishLanguage,"Soft silvery element belonging to group 13 of the  periodic table.  The most common natural isotope is In-115, which has a  half-life of 6*10^4 years.  Five other radioisotopes exist.  Discovered in  1863 by Reich and Richter."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803134).
lisp_trans(genls(tTin,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803404).
lisp_trans(names(tTin,"Tin"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803438).
lisp_trans(conventionalShortName("Sn",tTin),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803456).
lisp_trans(atomicNumber(tTin,50),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803489).
lisp_trans(=>(and(tTin(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(118.69,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803511).
lisp_trans(documentation(tTin,vEnglishLanguage,s("Silvery","malleable","metallic","element","belonging","to","group","14","of","the","periodic","table",".","Twenty","-","six","isotopes","are","known",",","five","of","which","are","radioactive",".","Chemically","reactive",".","Combines","directly","with","chlorine","and","oxygen","and","displaces","hydrogen","from","dilute","acids",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803617).
lisp_trans(genls(tAntimony,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803913).
lisp_trans(names(tAntimony,"Antimony"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803952).
lisp_trans(conventionalShortName("Sb",tAntimony),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':803980).
lisp_trans(atomicNumber(tAntimony,51),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804018).
lisp_trans(=>(and(tAntimony(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(121.75,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804045).
lisp_trans(documentation(tAntimony,vEnglishLanguage,s("Element","of","group","15",".","Multiple","allotropic","forms",".","The","stable","form","of","antimony","is","a","blue","-","white","metal",".","Yellow","and","black","antimony","are","unstable","non","-","metals",".","Used","in","flame","-","proofing",",","paints",",","ceramics",",","enamels",",","and","rubber",".","Attacked","by","oxidizing","acids","and","halogens",".","First","reported","by","Tholden","in","1450",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804156).
lisp_trans(genls(tTellurium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804501).
lisp_trans(names(tTellurium,"Tellurium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804541).
lisp_trans(conventionalShortName("Te",tTellurium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804571).
lisp_trans(atomicNumber(tTellurium,52),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804610).
lisp_trans(=>(and(tTellurium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(127.6,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804638).
lisp_trans(documentation(tTellurium,vEnglishLanguage,s("Silvery","metalloid","element","of","group","16",".","Eight","natural","isotopes",",","nine","radioactive","isotopes",".","Used","in","semiconductors","and","to","a","degree","in","some","steels",".","Chemistry","is","similar","to","{","sulphur","}",".","Discovered","in","1782","by","Franz","Miller",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':804750).
lisp_trans(genls(tIodine,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805019).
lisp_trans(names(tIodine,"Iodine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805056).
lisp_trans(conventionalShortName("I",tIodine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805080).
lisp_trans(atomicNumber(tIodine,53),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805115).
lisp_trans(=>(and(tIodine(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(126.904,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805140).
lisp_trans(documentation(tIodine,vEnglishLanguage,s("Dark","violet","nonmetallic","element",",","belongs","to","group","17","of","the","periodic","table",".","Insoluble","in","water",".","Required","as","a","trace","element","for","living","organisms",".","One","stable","isotope",",","I","-127","exists",",","in","addition","to","fourteen","radioactive","isotopes",".","Chemically","the","least","reactive","of","the","halogens",",","and","the","most","electropositive","metallic","halogen",".","Discovered","in","1812","by","Courtois",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805250).
lisp_trans(genls(tXenon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805657).
lisp_trans(names(tXenon,"Xenon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805693).
lisp_trans(conventionalShortName("Xe",tXenon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805715).
lisp_trans(atomicNumber(tXenon,54),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805750).
lisp_trans(=>(and(tXenon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(131.3,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805774).
lisp_trans(documentation(tXenon,vEnglishLanguage,s("Colourless",",","odourless","gas","belonging","to","group","18","on","the","periodic","table","(","the","noble","gases",".",")","Nine","natural","isotopes","and","seven","radioactive","isotopes","are","known",".","Xenon","was","part","of","the","first","noble","-","gas","compound","synthesized",".","Several","others","involving","Xenon","have","been","found","since","then",".","Xenon","was","discovered","by","Ramsey","and","Travers","in","1898",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':805882).
lisp_trans(genls(tSumoCaesium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806255).
lisp_trans(names(tSumoCaesium,"Caesium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806293).
lisp_trans(conventionalShortName("Cs",tSumoCaesium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806319).
lisp_trans(atomicNumber(tSumoCaesium,55),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806356).
lisp_trans(=>(and(tSumoCaesium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(132.90545,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806382).
lisp_trans(documentation(tSumoCaesium,vEnglishLanguage,s("Soft","silvery","-","white","metallic","element","belonging","to","group","1","of","the","periodic","table",".","One","of","the","three","metals","which","are","liquid","at","room","temperature",".","Cs","-133","is","the","natural",",","and","only","stable",",","isotope",".","Fifteen","other","radioisotopes","exist",".","Caesium","reacts","explosively","with","cold","water",",","and","ice","at","temperatures","above","157","K",".","Caesium","hydroxide","is","the","strongest","base","known",".","Caesium","is","the","most","electropositive",",","most","alkaline","and","has","the","least","ionization","potential","of","all","the","elements",".","Known","uses","include","the","basis","of","atomic","clocks",",","catalyst","for","the","hydrogenation","of","some","organic","compounds",",","and","in","photoelectric","cells",".","Caesium","was","discovered","by","Gustav","Kirchoff","and","Robert","Bunsen","in","Germany","in","1860","spectroscopically",".","Its","identification","was","based","upon","the","bright","blue","lines","in","its","spectrum",".","The","name","comes","from","the","latin","word","caesius",",","which","means","sky","blue",".","Caesium","should","be","considered","highly","toxic",".","Some","of","the","radioisotopes","are","even","more","toxic",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':806495).
lisp_trans(genls(tBarium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807488).
lisp_trans(names(tBarium,"Barium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807525).
lisp_trans(conventionalShortName("Ba",tBarium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807549).
lisp_trans(atomicNumber(tBarium,56),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807585).
lisp_trans(=>(and(tBarium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(137.34,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807610).
lisp_trans(documentation(tBarium,vEnglishLanguage,s("Silvery","-","white","reactive","element",",","belonging","to","group","2","of","the","periodic","table",".","Soluble","barium","compounds","are","extremely","poisonous",".","Identified","in","1774","by","Karl","Scheele","and","extracted","in","1808","by","Humphry","Davy",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807719).
lisp_trans(genls(tLanthanum,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':807967).
lisp_trans(names(tLanthanum,"Lanthanum"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808007).
lisp_trans(conventionalShortName("La",tLanthanum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808037).
lisp_trans(atomicNumber(tLanthanum,57),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808076).
lisp_trans(=>(and(tLanthanum(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(138.9055,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808104).
lisp_trans(documentation(tLanthanum,vEnglishLanguage,s("(","From","the","Greek","word","lanthanein",",","to","line","hidden",")","Silvery","metallic","element","belonging","to","group","3","of","the","periodic","table","and","oft","considered","to","be","one","of","the","lanthanoids",".","Found","in","some","rare","-","earth","minerals",".","Twenty","-","five","natural","isotopes","exist",".","La","-139","which","is","stable",",","and","La","-138","which","has","a","half","-","life","of","10","^","10","to","10","^","15","years",".","The","other","twenty","-","three","isotopes","are","radioactive",".","It","resembles","the","lanthanoids","chemically",".","Lanthanum","has","a","low","to","moderate","level","of","toxicity",",","and","should","be","handled","with","care",".","Discovered","in","1839","by","C",".","G",".","Mosander",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808218).
lisp_trans(genls(tCerium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808809).
lisp_trans(names(tCerium,"Cerium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808846).
lisp_trans(conventionalShortName("Ce",tCerium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808870).
lisp_trans(atomicNumber(tCerium,58),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808906).
lisp_trans(=>(and(tCerium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(140.12,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':808931).
lisp_trans(documentation(tCerium,vEnglishLanguage,s("Silvery","metallic","element",",","belongs","to","the","lanthanoids",".","Four","natural","isotopes","exist",",","and","fifteen","radioactive","isotopes","have","been","identified",".","Used","in","some","rare","-","earth","alloys",".","The","oxidized","form","is","used","in","the","glass","industry",".","Discovered","by","Martin",".","H",".","Klaproth","in","1803",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809040).
lisp_trans(genls(tPraseodymium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809354).
lisp_trans(names(tPraseodymium,"Praseodymium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809397).
lisp_trans(conventionalShortName("Pr",tPraseodymium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809433).
lisp_trans(atomicNumber(tPraseodymium,59),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809475).
lisp_trans(=>(and(tPraseodymium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(140.907,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809506).
lisp_trans(documentation(tPraseodymium,vEnglishLanguage,s("Soft","silvery","metallic","element",",","belongs","to","the","lanthanoids",".","Only","natural","isotope","is","Pr","-141","which","is","not","radioactive",".","Fourteen","radioactive","isotopes","have","been","artificially","produced",".","Used","in","rare","-","earth","alloys",".","Discovered","in","1885","by","C",".","A",".","von","Welsbach",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809622).
lisp_trans(genls(tNeodymium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809925).
lisp_trans(names(tNeodymium,"Neodymium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809965).
lisp_trans(conventionalShortName("Nd",tNeodymium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':809995).
lisp_trans(atomicNumber(tNeodymium,60),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':810034).
lisp_trans(=>(and(tNeodymium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(144.24,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':810062).
lisp_trans(documentation(tNeodymium,vEnglishLanguage,s("Soft","bright","silvery","metallic","element",",","belongs","to","the","lanthanoids",".","Seven","natural","isotopes",",","Nd","-144","being","the","only","radioactive","one","with","a","half","-","life","of","10","^","10","to","10","^","15","years",".","Six","artificial","radioisotopes","have","been","produced",".","The","metal","is","used","in","glass","works","to","color","class","a","shade","of","violet","-","purple","and","make","it","dichroic",".","One","of","the","more","reactive","rare","-","earth","metals",",","quickly","reacts","with","air",".","Used","in","some","rare","-","earth","alloys",".","Neodymium","is","used","to","color","the","glass","used","in","welder","'s","glasses",".","Neodymium","is","also","used","in","very","powerful",",","permanent","magnets","(","Nd2Fe14B",")",".","Discovered","by","Carl","F",".","Auer","von","Welsbach","in","Austria","in","1885","by","separating","didymium","into","its","elemental","components","{","praseodymium","}","and","neodymium",".","The","name","comes","from","the","Greek","words","'","neos","didymos","'","which","means","'","new","twin","'",".","Neodymium","should","be","considered","highly","toxic",",","however","evidence","would","seem","to","show","that","it","acts","as","little","more","than","a","skin","and","eye","irritant",".","The","dust","however",",","presents","a","fire","and","explosion","hazard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':810174).
lisp_trans(genls(tPromethium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811206).
lisp_trans(names(tPromethium,"Promethium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811247).
lisp_trans(conventionalShortName("Pm",tPromethium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811279).
lisp_trans(atomicNumber(tPromethium,61),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811319).
lisp_trans(=>(and(tPromethium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(147,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811348).
lisp_trans(documentation(tPromethium,vEnglishLanguage,s("Soft","silvery","metallic","element",",","belongs","to","the","lanthanoids",".","Pm","-147",",","the","only","natural","isotope",",","is","radioactive","and","has","a","half","-","life","of","252","years",".","Eighteen","radioisotopes","have","been","produced",",","but","all","have","very","short","half","-","lives",".","Found","only","in","nuclear","decay","waste",".","Pm","-147","is","of","interest","as","a","beta","-","decay","source",",","however","Pm","-146","and","Pm","-148","have","to","be","removed","from","it","first",",","as","they","generate","gamma","radiation",".","Discovered","by","J",".","A",".","Marinsky",",","L",".","E",".","Glendenin","and","C",".","D",".","Coryell","in","1947",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811458).
lisp_trans(genls(tSamarium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':811986).
lisp_trans(names(tSamarium,"Samarium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812025).
lisp_trans(conventionalShortName("Sm",tSamarium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812053).
lisp_trans(atomicNumber(tSamarium,62),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812091).
lisp_trans(=>(and(tSamarium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(150.35,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812118).
lisp_trans(documentation(tSamarium,vEnglishLanguage,"Soft silvery metallic element, belongs to the  lanthanoids.  Seven natural isotopes, Sm-147 is the only radioisotope, and  has a half-life of 2.5*10^11 years.  Used for making special alloys needed  in the production of nuclear reactors.  Also used as a neutron absorber.   Small quantities of samarium oxide is used in special optical glasses.   The largest use of the element is its ferromagnetic alloy which produces  permanent magnets that are five times stronger than magnets produced by  any other material.  Discovered by Francois Lecoq de Boisbaudran in  1879."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812229).
lisp_trans(genls(tEuropium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812843).
lisp_trans(names(tEuropium,"Europium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812882).
lisp_trans(conventionalShortName("Eu",tEuropium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812910).
lisp_trans(atomicNumber(tEuropium,63),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812948).
lisp_trans(=>(and(tEuropium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(151.25,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':812975).
lisp_trans(documentation(tEuropium,vEnglishLanguage,s("Soft","silvery","metallic","element","belonging","to","the","lanthanoids",".","Eu","-151","and","Eu","-153","are","the","only","two","stable","isotopes",",","both","of","which","are","{","neutron","}","absorbers",".","Discovered","in","1889","by","Sir","William","Crookes",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813086).
lisp_trans(genls(tGadolinium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813330).
lisp_trans(names(tGadolinium,"Gadolinium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813371).
lisp_trans(conventionalShortName("Gd",tGadolinium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813403).
lisp_trans(atomicNumber(tGadolinium,64),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813443).
lisp_trans(=>(and(tGadolinium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(157.25,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813472).
lisp_trans(documentation(tGadolinium,vEnglishLanguage,s("Soft","silvery","metallic","element","belonging","to","the","lanthanoids",".","Seven","natural",",","stable","isotopes","are","known","in","addition","to","eleven","artificial","isotopes",".","Gd","-155","and","Gd","-157","and","the","best","neutron","absorbers","of","all","elements",".","Gadolinium","compounds","are","used","in","electronics",".","Discovered","by","J",".","C",".","G","Marignac","in","1880",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813585).
lisp_trans(genls(tTerbium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813934).
lisp_trans(names(tTerbium,"Terbium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813972).
lisp_trans(conventionalShortName("Tb",tTerbium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':813998).
lisp_trans(atomicNumber(tTerbium,65),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814035).
lisp_trans(=>(and(tTerbium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(158.924,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814061).
lisp_trans(documentation(tTerbium,vEnglishLanguage,s("Silvery","metallic","element","belonging","to","the","lanthanoids",".","Tb","-159","is","the","only","stable","isotope",",","there","are","seventeen","artificial","isotopes",".","Discovered","by","G",".","G",".","Mosander","in","1843",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814172).
lisp_trans(genls(tDysprosium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814389).
lisp_trans(names(tDysprosium,"Dysprosium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814430).
lisp_trans(conventionalShortName("Dy",tDysprosium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814462).
lisp_trans(atomicNumber(tDysprosium,66),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814502).
lisp_trans(=>(and(tDysprosium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(162.5,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814531).
lisp_trans(documentation(tDysprosium,vEnglishLanguage,"Metallic with a bright silvery-white lustre.   Dysprosium belongs to the lanthanoids.  It is relatively stable in air at  room temperatures, it will however dissolve in mineral acids, evolving  hydrogen.  It is found in from rare-earth minerals.  There are seven  natural isotopes of dysprosium, and eight radioisotopes, Dy-154 being the  most stable with a half-life of 3*10^6 years.  Dysprosium is used as a  neutron absorber in nuclear fission reactions, and in compact disks.  It  was discovered by Paul Emile Lecoq de Boisbaudran in 1886 in France.  Its  name comes from the Greek word dysprositos, which means hard to obtain."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':814644).
lisp_trans(genls(tHolmium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815323).
lisp_trans(names(tHolmium,"Holmium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815361).
lisp_trans(conventionalShortName("Ho",tHolmium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815387).
lisp_trans(atomicNumber(tHolmium,67),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815424).
lisp_trans(=>(and(tHolmium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(167.26,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815450).
lisp_trans(documentation(tHolmium,vEnglishLanguage,s("Relatively","soft","and","malleable","silvery","-","white","metallic","element",",","which","is","stable","in","dry","air","at","room","temperature",".","It","oxidizes","in","moist","air","and","at","high","temperatures",".","It","belongs","to","the","lanthanoids",".","A","rare","-","earth","metal",",","it","is","found","in","the","minerals","monazite","and","gadolinite",".","It","possesses","unusual","magnetic","properties",".","One","natural","isotope",",","Ho","-165","exists",",","six","radioisotopes","exist",",","the","most","stable","being","Ho","-163","with","a","half","-","life","of","4570","years",".","Holmium","is","used","in","some","metal","alloys",",","it","is","also","said","to","stimulate","the","metabolism",".","Discovered","by","Per","Theodor","Cleve","and","J",".","L",".","Soret","in","Switzerland","in","1879",".","The","name","homium","comes","from","the","Greek","word","Holmia","which","means","Sweden",".","While","all","holmium","compounds","should","be","considered","highly","toxic",",","initial","evidence","seems","to","indicate","that","they","do","not","pose","much","danger",".","The","metal","'s","dust","however",",","is","a","fire","hazard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':815560).
lisp_trans(genls(tErbium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816456).
lisp_trans(names(tErbium,"Erbium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816493).
lisp_trans(conventionalShortName("Er",tErbium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816517).
lisp_trans(atomicNumber(tErbium,68),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816553).
lisp_trans(=>(and(tErbium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(167.26,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816578).
lisp_trans(documentation(tErbium,vEnglishLanguage,s("Soft","silvery","metallic","element","which","belongs","to","the","lanthanoids",".","Six","natural","isotopes","that","are","stable",".","Twelve","artificial","isotopes","are","known",".","Used","in","nuclear","technology","as","a","neutron","absorber",".","It","is","being","investigated","for","other","possible","uses",".","Discovered","by","Carl","G",".","Mosander","in","1843",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':816687).
lisp_trans(genls(tThulium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817020).
lisp_trans(names(tThulium,"Thulium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817058).
lisp_trans(conventionalShortName("Tm",tThulium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817084).
lisp_trans(atomicNumber(tThulium,69),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817121).
lisp_trans(=>(and(tThulium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(168.934,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817147).
lisp_trans(documentation(tThulium,vEnglishLanguage,s("Soft","grey","metallic","element","that","belongs","to","the","lanthanoids",".","One","natural","isotope","exists",",","Tm","-169",",","and","seventeen","artificial","isotopes","have","been","produced",".","No","known","uses","for","the","element",".","Discovered","in","1879","by","Per","Theodor","Cleve",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817258).
lisp_trans(genls(tYtterbium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817530).
lisp_trans(names(tYtterbium,"Ytterbium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817570).
lisp_trans(conventionalShortName("Yb",tYtterbium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817600).
lisp_trans(atomicNumber(tYtterbium,70),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817639).
lisp_trans(=>(and(tYtterbium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(173.04,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817667).
lisp_trans(documentation(tYtterbium,vEnglishLanguage,s("Silvery","metallic","element","of","the","lanthanoids",".","Seven","natural","isotopes","and","ten","artificial","isotopes","are","known",".","Used","in","certain","steels",".","Discovered","by","J",".","D",".","G",".","Marignac","in","1878",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':817779).
lisp_trans(genls(tLutetium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818001).
lisp_trans(names(tLutetium,"Lutetium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818040).
lisp_trans(conventionalShortName("Lu",tLutetium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818068).
lisp_trans(atomicNumber(tLutetium,71),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818106).
lisp_trans(=>(and(tLutetium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(194.967,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818133).
lisp_trans(documentation(tLutetium,vEnglishLanguage,s("Silvery","-","white","rare","-","earth","metal","which","is","relatively","stable","in","air",".","It","happens","to","be","the","most","expensive","rare","-","earth","metal",".","Its","found","with","almost","all","rare","-","earth","metals",",","but","is","very","difficult","to","separate","from","other","elements",".","Least","abundant","of","all","natural","elements",".","Used","in","metal","alloys",",","and","as","a","catalyst","in","various","processes",".","There","are","two","natural",",","stable","isotopes",",","and","seven","radioisotopes",",","the","most","stable","being","Lu","-174","with","a","half","-","life","of","3.3","years",".","The","separation","of","lutetium","from","{","ytterbium","}","was","described","by","Georges","Urbain","in","1907",".","It","was","discovered","at","approximately","the","same","time","by","Carl","Auer","von","Welsbach",".","The","name","comes","from","the","Greek","word","lutetia","which","means","Paris",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818245).
lisp_trans(genls(tHafnium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':818977).
lisp_trans(names(tHafnium,"Hafnium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819015).
lisp_trans(conventionalShortName("Hf",tHafnium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819041).
lisp_trans(atomicNumber(tHafnium,72),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819078).
lisp_trans(=>(and(tHafnium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(178.49,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819104).
lisp_trans(documentation(tHafnium,vEnglishLanguage,s("Silvery","lustrous","metallic","transition","element",".","Used","in","tungsten","alloys","in","filaments","and","electrodes",",","also","acts","as","a","neutron","absorber",".","First","reported","by","Urbain","in","1911",",","existence","was","finally","established","in","1923","by","D",".","Coster",",","G",".","C",".","de","Hevesy","in","1923",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819214).
lisp_trans(genls(tTantalum,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819511).
lisp_trans(names(tTantalum,"Tantalum"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819550).
lisp_trans(conventionalShortName("Ta",tTantalum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819578).
lisp_trans(atomicNumber(tTantalum,73),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819616).
lisp_trans(=>(and(tTantalum(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(180.948,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819643).
lisp_trans(documentation(tTantalum,vEnglishLanguage,s("Heavy","blue","-","grey","metallic","transition","element",".","Ta","-181","is","a","stable","isotope",",","and","Ta","-180","is","a","radioactive","isotope",",","with","a","half","-","life","in","excess","of","10","^","7","years",".","Used","in","surgery","as","it","is","unreactive",".","Forms","a","passive","oxide","layer","in","air",".","Identified","in","1802","by","Ekeberg","and","isolated","in","1820","by","Jons","J",".","Berzelius",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':819755).
lisp_trans(genls(tTungsten,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820107).
lisp_trans(names(tTungsten,"Tungsten"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820146).
lisp_trans(conventionalShortName("W",tTungsten),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820174).
lisp_trans(atomicNumber(tTungsten,74),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820211).
lisp_trans(=>(and(tTungsten(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(183.85,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820238).
lisp_trans(documentation(tTungsten,vEnglishLanguage,s("White","or","grey","metallic","transition","element",",","formerly","called","{","wolfram","}",".","Forms","a","protective","oxide","in","air","and","can","be","oxidized","at","high","temperature",".","First","isolated","by","Jose","and","Fausto","de","Elhuyer","in","1783",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820349).
lisp_trans(genls(tRhenium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820596).
lisp_trans(names(tRhenium,"Rhenium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820634).
lisp_trans(conventionalShortName("Re",tRhenium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820660).
lisp_trans(atomicNumber(tRhenium,75),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820697).
lisp_trans(=>(and(tRhenium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(186.2,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820723).
lisp_trans(documentation(tRhenium,vEnglishLanguage,s("Silvery","-","white","metallic","transition","element",".","Obtained","as","a","by","-","product","of","molybdenum","refinement",".","Rhenium","-","molybdenum","alloys","are","superconducting",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':820832).
lisp_trans(genls(tOsmium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821021).
lisp_trans(names(tOsmium,"Osmium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821058).
lisp_trans(conventionalShortName("Os",tOsmium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821082).
lisp_trans(atomicNumber(tOsmium,76),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821118).
lisp_trans(=>(and(tOsmium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(190.2,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821143).
lisp_trans(documentation(tOsmium,vEnglishLanguage,s("Hard","blue","-","white","metallic","transition","element",".","Found","with","platinum","and","used","in","some","alloys","with","platinum","and","iridium",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821251).
lisp_trans(genls(tIridium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821412).
lisp_trans(names(tIridium,"Iridium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821450).
lisp_trans(conventionalShortName("Ir",tIridium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821476).
lisp_trans(atomicNumber(tIridium,77),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821513).
lisp_trans(=>(and(tIridium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(192.217,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821539).
lisp_trans(documentation(tIridium,vEnglishLanguage,s("Very","hard","and","brittle",",","silvery","metallic","transition","element",".","It","has","a","yellowish","cast","to","it",".","Salts","of","iridium","are","highly","colored",".","It","is","the","most","corrosion","resistant","metal","known",",","not","attacked","by","any","acid",",","but","is","attacked","by","molten","salts",".","There","are","two","natural","isotopes","of","iridium",",","and","4","radioisotopes",",","the","most","stable","being","Ir","-192","with","a","half","-","life","of","73.83","days",".","Ir","-192","decays","into","{","platinum","}",",","while","the","other","radioisotopes","decay","into","{","osmium","}",".","Iridium","is","used","in","high","temperature","apparatus",",","electrical","contacts",",","and","as","a","hardening","agent","for","platinum",".","Discovered","in","1803","by","Smithson","Tennant","in","England",".","The","name","comes","from","the","Greek","word","iris",",","which","means","rainbow",".","Iridium","metal","is","generally","non","-","toxic","due","to","its","relative","unreactivity",",","but","iridium","compounds","should","be","considered","highly","toxic",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':821650).
lisp_trans(genls(tPlatinum,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822504).
lisp_trans(names(tPlatinum,"Platinum"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822543).
lisp_trans(conventionalShortName("Pt",tPlatinum),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822571).
lisp_trans(atomicNumber(tPlatinum,78),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822609).
lisp_trans(=>(and(tPlatinum(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(195.078,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822636).
lisp_trans(documentation(tPlatinum,vEnglishLanguage,s("Attractive","greyish","-","white","metal",".","When","pure",",","it","is","malleable","and","ductile",".","Does","not","oxidize","in","air",",","insoluble","in","hydrochloric","and","nitric","acid",".","Corroded","by","halogens",",","cyandies",",","sulphur","and","alkalis",".","{","Hydrogen","}","and","{","oxygen","}","react","explosively","in","the","presence","of","platinum",".","There","are","six","stable","isotopes","and","three","radioisotopes",",","the","most","stable","being","Pt","-193","with","a","half","-","life","of","60","years",".","Platinum","is","used","in","jewelry",",","laboratory","equipment",",","electrical","contacts",",","dentistry",",","and","anti","-","pollution","devices","in","cars",".","PtCl2","(","NH3",")","2","is","used","to","treat","some","forms","of","cancer",".","Platinum","-","{","cobalt","}","alloys","have","magnetic","properties",".","It","is","also","used","in","the","definition","of","the","Standard","Hydrogen","Electrode",".","Discovered","by","Antonio","de","Ulloa","in","South","America","in","1735",".","The","name","comes","from","the","Spanish","word","platina","which","means","silver",".","Platinum","metal","is","generally","not","a","health","concern","due","to","its","unreactivity",",","however","platinum","compounds","should","be","considered","highly","toxic",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':822748).
lisp_trans(genls(tGold,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823745).
lisp_trans(names(tGold,"Gold"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823780).
lisp_trans(conventionalShortName("Au",tGold),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823800).
lisp_trans(atomicNumber(tGold,79),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823834).
lisp_trans(=>(and(tGold(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(196.96655,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823857).
lisp_trans(documentation(tGold,vEnglishLanguage,s("Gold","is","gold","colored",".","It","is","the","most","malleable","and","ductile","metal","known",".","There","is","only","one","stable","isotope","of","gold",",","and","five","radioisotopes","of","gold",",","Au","-195","being","the","most","stable","with","a","half","-","life","of","186","days",".","Gold","is","used","as","a","monetary","standard",",","in","jewelry",",","dentistry",",","electronics",".","Au","-198","is","used","in","treating","cancer","and","some","other","medical","conditions",".","Gold","has","been","known","to","exist","as","far","back","as","2600","BC",".","Gold","comes","from","the","Anglo","-","Saxon","word","gold",".","Its","symbol",",","Au",",","comes","from","the","Latin","word","aurum",",","which","means","gold",".","Gold","is","not","particularly","toxic",",","however","it","is","known","to","cause","damage","to","the","liver","and","kidneys","in","some",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':823967).
lisp_trans(genls(tMercury,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824636).
lisp_trans(names(tMercury,"Mercury"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824674).
lisp_trans(conventionalShortName("Hg",tMercury),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824700).
lisp_trans(atomicNumber(tMercury,80),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824737).
lisp_trans(=>(and(tMercury(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(200.59,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824763).
lisp_trans(documentation(tMercury,vEnglishLanguage,s("Heavy","silvery","liquid","metallic","element",",","belongs","to","the","zinc","group",".","Used","in","thermometers",",","barometers","and","other","scientific","apparatus",".","Less","reactive","than","zinc","and","cadmium",",","does","not","displace","hydrogen","from","acids",".","Forms","a","number","of","complexes","and","organomercury","compounds",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':824873).
lisp_trans(genls(tThallium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825188).
lisp_trans(names(tThallium,"Thallium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825227).
lisp_trans(conventionalShortName("Tl",tThallium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825255).
lisp_trans(atomicNumber(tThallium,81),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825293).
lisp_trans(=>(and(tThallium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(204.3833,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825320).
lisp_trans(documentation(tThallium,vEnglishLanguage,s("Pure",",","unreacted","thallium","appears","silvery","-","white","and","exhibits","a","metallic","lustre",".","Upon","reacting","with","air",",","it","begins","to","turn","bluish","-","grey","and","looks","like","lead",".","It","is","very","malleable",",","and","can","be","cut","with","a","knife",".","There","are","two","stable","isotopes",",","and","four","radioisotopes",",","Tl","-204","being","the","most","stable","with","a","half","-","life","of","3.78","years",".","Thallium","sulphate","was","used","as","a","rodenticide",".","Thallium","sulphine","'s","conductivity","changes","with","exposure","to","infrared","light",",","this","gives","it","a","use","in","infrared","detectors",".","Discovered","by","Sir","William","Crookes","via","spectroscopy",".","Its","name","comes","from","the","Greek","word","thallos",",","which","means","green","twig",".","Thallium","and","its","compounds","are","toxic","and","can","cause","cancer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':825433).
lisp_trans(genls(tLead,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826157).
lisp_trans(names(tLead,"Lead"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826192).
lisp_trans(conventionalShortName("Pb",tLead),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826212).
lisp_trans(atomicNumber(tLead,82),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826246).
lisp_trans(=>(and(tLead(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(207.19,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826269).
lisp_trans(documentation(tLead,vEnglishLanguage,s("Heavy","dull","grey","ductile","metallic","element",",","belongs","to","group","14",".","Used","in","building","construction",",","lead","-","place","accumulators",",","bullets","and","shot",",","and","is","part","of","solder",",","pewter",",","bearing","metals",",","type","metals","and","fusible","alloys",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826376).
lisp_trans(genls(tBismuth,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826637).
lisp_trans(names(tBismuth,"Bismuth"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826675).
lisp_trans(conventionalShortName("Bi",tBismuth),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826701).
lisp_trans(atomicNumber(tBismuth,83),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826738).
lisp_trans(=>(and(tBismuth(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(208.98,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826764).
lisp_trans(documentation(tBismuth,vEnglishLanguage,s("White","crystalline","metal","with","a","pink","tinge",",","belongs","to","group","15",".","Most","diamagnetic","of","all","metals","and","has","the","lowest","thermal","conductivity","of","all","the","elements","except","mercury",".","Lead","-","free","bismuth","compounds","are","used","in","cosmetics","and","medical","procedures",".","Burns","in","the","air","and","produces","a","blue","flame",".","In","1753",",","C",".","G",".","Junine","first","demonstrated","that","it","was","different","from","lead",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':826875).
lisp_trans(genls(tPolonium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827290).
lisp_trans(names(tPolonium,"Polonium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827329).
lisp_trans(conventionalShortName("Po",tPolonium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827357).
lisp_trans(atomicNumber(tPolonium,84),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827395).
lisp_trans(=>(and(tPolonium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(210,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827422).
lisp_trans(documentation(tPolonium,vEnglishLanguage,s("Rare","radioactive","metallic","element",",","belongs","to","group","16","of","the","periodic","table",".","Over","30","known","isotopes","exist",",","the","most","of","all","elements",".","Po","-209","has","a","half","-","life","of","103","years",".","Possible","uses","in","heating","spacecraft",".","Discovered","by","Marie","Curie","in","1898","in","a","sample","of","pitchblende",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827530).
lisp_trans(genls(tAstatine,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827853).
lisp_trans(names(tAstatine,"Astatine"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827892).
lisp_trans(conventionalShortName("At",tAstatine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827920).
lisp_trans(atomicNumber(tAstatine,85),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827958).
lisp_trans(=>(and(tAstatine(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(210,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':827985).
lisp_trans(documentation(tAstatine,vEnglishLanguage,s("Radioactive","halogen","element",".","Occurs","naturally","from","uranium","and","thorium","decay",".","At","least","20","known","isotopes",".","At","-210",",","the","most","stable",",","has","a","half","-","life","of","8.3","hours",".","Synthesized","by","nuclear","bombardment","in","1940","by","D",".","R",".","Corson",",","K",".","R",".","MacKenzie","and","E",".","Segre","at","the","University","of","California",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828093).
lisp_trans(genls(tRadon,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828430).
lisp_trans(names(tRadon,"Radon"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828466).
lisp_trans(conventionalShortName("Rn",tRadon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828488).
lisp_trans(atomicNumber(tRadon,86),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828523).
lisp_trans(=>(and(tRadon(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(222,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828547).
lisp_trans(documentation(tRadon,vEnglishLanguage,s("Colorless","radioactive","gaseous","element",",","belongs","to","the","noble","gases",".","Of","the","twenty","known","isotopes",",","the","most","stable","is","Rn","-222","with","a","half","-","life","of","3.8","days",".","Formed","by","the","radioactive","decay","of","{","Radium","}","-226",".","Radon","itself","decays","into","{","polonium","}",".","Used","in","radiotherapy",".","As","a","noble","gas",",","it","is","effectively","inert",",","though","radon","fluoride","has","been","synthesized",".","First","isolated","in","1908","by","Ramsey","and","Gray",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':828652).
lisp_trans(genls(tFrancium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829094).
lisp_trans(names(tFrancium,"Francium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829133).
lisp_trans(conventionalShortName("Fr",tFrancium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829161).
lisp_trans(atomicNumber(tFrancium,87),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829199).
lisp_trans(=>(and(tFrancium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(223,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829226).
lisp_trans(documentation(tFrancium,vEnglishLanguage,s("Radioactive","element",",","belongs","to","group","1","of","the","periodic","table",".","Found","in","uranium","and","thorium","ores",".","The","22","known","isotopes","are","all","radioactive",",","with","the","most","stable","being","Fr","-223",".","Its","existence","was","confirmed","in","1939","by","Marguerite","Perey",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829334).
lisp_trans(genls(tRadium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829618).
lisp_trans(names(tRadium,"Radium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829655).
lisp_trans(conventionalShortName("Ra",tRadium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829679).
lisp_trans(atomicNumber(tRadium,88),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829715).
lisp_trans(=>(and(tRadium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(226,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829740).
lisp_trans(documentation(tRadium,vEnglishLanguage,s("Radioactive","metallic","transuranic","element",",","belongs","to","group","2","of","the","periodic","table",".","Most","stable","isotope",",","Ra","-226","has","a","half","-","life","of","1602","years",",","which","decays","into","radon",".","Isolated","from","pitchblende","in","1898","Marie","and","Pierre","Curie",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':829846).
lisp_trans(genls(tActinium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830120).
lisp_trans(names(tActinium,"Actinium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830159).
lisp_trans(conventionalShortName("Ac",tActinium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830187).
lisp_trans(atomicNumber(tActinium,89),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830225).
lisp_trans(=>(and(tActinium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(227,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830252).
lisp_trans(documentation(tActinium,vEnglishLanguage,s("Silvery","radioactive","metallic","element",",","belongs","to","group","3","of","the","periodic","table",".","The","most","stable","isotope",",","Ac","-227",",","has","a","half","-","life","of","217","years",".","Ac","-228","(","half","-","life","of","6.13","hours",")","also","occurs","in","nature",".","There","are","22","other","artificial","isotopes",",","all","radioactive","and","having","very","short","half","-","lives",".","Chemistry","similar","to","lanthanum",".","Used","as","a","source","of","alpha","particles",".","Discovered","by","A",".","Debierne","in","1899",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830360).
lisp_trans(genls(tThorium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830810).
lisp_trans(names(tThorium,"Thorium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830848).
lisp_trans(conventionalShortName("Th",tThorium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830874).
lisp_trans(atomicNumber(tThorium,90),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830911).
lisp_trans(=>(and(tThorium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(232.038,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':830937).
lisp_trans(documentation(tThorium,vEnglishLanguage,s("Grey","radioactive","metallic","element",".","Belongs","to","actinoids",".","Found","in","monazite","sand","in","Brazil",",","India","and","the","US",".","Thorium","-232","has","a","half","-","life","of","1.39","x10","^","10","years",".","Can","be","used","as","a","nuclear","fuel","for","breeder","reactors",".","Thorium","-232","captures","slow","{","neutron","}","s","and","breeds","uranium","-233",".","Discovered","by","Jons","J",".","Berzelius","in","1829",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831048).
lisp_trans(genls(tProtactinium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831415).
lisp_trans(names(tProtactinium,"Protactinium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831458).
lisp_trans(conventionalShortName("Pa",tProtactinium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831494).
lisp_trans(atomicNumber(tProtactinium,91),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831536).
lisp_trans(=>(and(tProtactinium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(231,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831567).
lisp_trans(documentation(tProtactinium,vEnglishLanguage,"Radioactive metallic element, belongs to the  actinoids.  The most stable isotope, Pa-231 has a half-life of 2.43*10^4  years.  At least 10 other radioactive isotopes are known.  No practical  applications are known.  Discovered in 1917 by Lise Meitner and Otto  Hahn."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831679).
lisp_trans(genls(tUranium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':831997).
lisp_trans(names(tUranium,"Uranium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832035).
lisp_trans(conventionalShortName("U",tUranium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832061).
lisp_trans(atomicNumber(tUranium,92),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832097).
lisp_trans(=>(and(tUranium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(231,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832123).
lisp_trans(documentation(tUranium,vEnglishLanguage,s("White","radioactive","metallic","element","belonging","to","the","actinoids",".","Three","natural","isotopes",",","U","-238",",","U","-235","and","U","-234",".","Uranium","-235","is","used","as","the","fuel","for","nuclear","reactors","and","weapons",".","Discovered","by","Martin","H",".","Klaproth","in","1789",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832230).
lisp_trans(genls(tNeptunium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832500).
lisp_trans(names(tNeptunium,"Neptunium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832540).
lisp_trans(conventionalShortName("Np",tNeptunium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832570).
lisp_trans(atomicNumber(tNeptunium,93),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832609).
lisp_trans(=>(and(tNeptunium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(237,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832637).
lisp_trans(documentation(tNeptunium,vEnglishLanguage,"Radioactive metallic transuranic element,  belongs to the actinoids.  Np-237, the most stable isotope, has a  half-life of 2.2*10^6 years and is a by product of nuclear reactors.  The  other known isotopes have mass numbers 229 through 236, and 238 through  241.  Np-236 has a half-life of 5*10^3 years.  First produced by Edwin M.   McMillan and P.H.  Abelson in 1940."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':832746).
lisp_trans(genls(tPlutonium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833162).
lisp_trans(names(tPlutonium,"Plutonium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833202).
lisp_trans(conventionalShortName("Pu",tPlutonium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833232).
lisp_trans(atomicNumber(tPlutonium,94),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833271).
lisp_trans(=>(and(tPlutonium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(242,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833299).
lisp_trans(documentation(tPlutonium,vEnglishLanguage,"Dense silvery radioactive metallic transuranic  element, belongs to the actinoids.  Pu-244 is the most stable isotope with  a half-life of 7.6*10^7 years.  Thirteen isotopes are known.  Pu-239 is  the most important, it undergoes nuclear fission with slow neutrons and is  hence important to nuclear weapons and reactors.  Plutonium production is  monitored down to the gram to prevent military misuse.  First produced by  Gleen T.  Seaborg, Edwin M.  McMillan, J.W.  Kennedy and A.C.  Wahl in  1940."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833408).
lisp_trans(genls(tObjectAmericium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833955).
lisp_trans(names(tObjectAmericium,"Americium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':833995).
lisp_trans(conventionalShortName("Am",tObjectAmericium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834025).
lisp_trans(atomicNumber(tObjectAmericium,95),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834064).
lisp_trans(=>(and(tObjectAmericium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(243,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834092).
lisp_trans(documentation(tObjectAmericium,vEnglishLanguage,"Radioactive metallic transuranic element,  belongs to the actinoids.  Ten known isotopes.  Am-243 is the most stable  isotope, with a half-life of 7.95*10^3 years.  Discovered by Glenn T.   Seaborg and associates in 1945, it was obtained by bombarding  {uranium}-238 with alpha particles."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834201).
lisp_trans(genls(tObjectCurium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834536).
lisp_trans(names(tObjectCurium,"Curium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834573).
lisp_trans(conventionalShortName("Cm",tObjectCurium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834597).
lisp_trans(atomicNumber(tObjectCurium,96),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834633).
lisp_trans(=>(and(tObjectCurium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(247,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834658).
lisp_trans(documentation(tObjectCurium,vEnglishLanguage,"Radioactive metallic transuranic element.  Belongs  to actinoid series.  Nine known isotopes, Cm-247 has a half-life of  1.64*10^7 years.  First identified by Glenn T.  Seaborg and associates in  1944, first produced by L.B.  Werner and I.  Perlman in 1947 by bombarding  americium-241 with {neutron}s.  Named for Marie Curie."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':834764).
lisp_trans(genls(tObjectBerkelium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835134).
lisp_trans(names(tObjectBerkelium,"Berkelium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835174).
lisp_trans(conventionalShortName("Bk",tObjectBerkelium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835204).
lisp_trans(atomicNumber(tObjectBerkelium,97),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835243).
lisp_trans(=>(and(tObjectBerkelium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(247,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835271).
lisp_trans(documentation(tObjectBerkelium,vEnglishLanguage,"Radioactive metallic transuranic element.   Belongs to actinoid series.  Eight known isotopes, the most common Bk-247,  has a half-life of 1.4*10^3 years.  First produced by Glenn T.  Seaborg  and associates in 1949 by bombarding americium-241 with alpha  particles."),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835380).
lisp_trans(genls(tObjectCalifornium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835693).
lisp_trans(names(tObjectCalifornium,"Californium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835735).
lisp_trans(conventionalShortName("Cf",tObjectCalifornium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835769).
lisp_trans(atomicNumber(tObjectCalifornium,98),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835810).
lisp_trans(=>(and(tObjectCalifornium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(249,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835840).
lisp_trans(documentation(tObjectCalifornium,vEnglishLanguage,s("Radioactive","metallic","transuranic","element",".","Belongs","to","actinoid","series",".","Cf","-251","has","a","half","life","of","about","700","years",".","Nine","isotopes","are","known",".","Cf","-252","is","an","intense","{","neutron","}","source",",","which","makes","it","an","intense","{","neutron","}","source","and","gives","it","a","use","in","{","neutron","}","activation","analysis","and","a","possible","use","as","a","radiation","source","in","medicine",".","First","produced","by","Glenn","T",".","Seaborg","and","associates","in","1950",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':835951).
lisp_trans(genls(tObjectEinsteinium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836395).
lisp_trans(names(tObjectEinsteinium,"Einsteinium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836437).
lisp_trans(conventionalShortName("Es",tObjectEinsteinium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836471).
lisp_trans(atomicNumber(tObjectEinsteinium,99),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836512).
lisp_trans(=>(and(tObjectEinsteinium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(254,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836542).
lisp_trans(documentation(tObjectEinsteinium,vEnglishLanguage,s("Appearance","is","unknown",",","however","it","is","most","probably","metallic","and","silver","or","gray","in","color",".","Radioactive","metallic","transuranic","element","belonging","to","the","actinoids",".","Es","-254","has","the","longest","half","-","life","of","the","eleven","known","isotopes","at","270","days",".","First","identified","by","Albert","Ghiorso","and","associates","in","the","debris","of","the","1952","hydrogen","bomb","explosion",".","In","1961","the","first","microgram","quantities","of","Es","-232","were","separated",".","While","einsteinium","never","exists","naturally",",","if","a","sufficient","amount","was","assembled",",","it","would","pose","a","radiation","hazard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':836653).
lisp_trans(genls(tObjectFermium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837226).
lisp_trans(names(tObjectFermium,"Fermium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837264).
lisp_trans(conventionalShortName("Fm",tObjectFermium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837290).
lisp_trans(atomicNumber(tObjectFermium,100),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837327).
lisp_trans(=>(and(tObjectFermium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(253,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837354).
lisp_trans(documentation(tObjectFermium,vEnglishLanguage,s("Radioactive","metallic","transuranic","element",",","belongs","to","the","actinoids",".","Ten","known","isotopes",",","most","stable","is","Fm","-257","with","a","half","-","life","of","10","days",".","First","identified","by","Albert","Ghiorso","and","associates","in","the","debris","of","the","first","hydrogen","-","bomb","explosion","in","1952",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837461).
lisp_trans(genls(tObjectMendelevium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837759).
lisp_trans(names(tObjectMendelevium,"Mendelevium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837801).
lisp_trans(conventionalShortName("Md",tObjectMendelevium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837835).
lisp_trans(atomicNumber(tObjectMendelevium,101),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837876).
lisp_trans(=>(and(tObjectMendelevium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(256,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':837907).
lisp_trans(documentation(tObjectMendelevium,vEnglishLanguage,s("Radioactive","metallic","transuranic","element",".","Belongs","to","the","actinoid","series",".","Only","known","isotope",",","Md","-256","has","a","half","-","life","of","1.3","hours",".","First","identified","by","Glenn","T",".","Seaborg",",","Albert","Ghiorso","and","associates","in","1955",".","Alternative","name","{","unnilunium","}","has","been","proposed",".","Named","after","the","'","inventor","'","of","the","periodic","table",",","Dmitri","Mendeleev",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838018).
lisp_trans(genls(tObjectNobelium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838402).
lisp_trans(names(tObjectNobelium,"Nobelium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838441).
lisp_trans(conventionalShortName("No",tObjectNobelium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838469).
lisp_trans(atomicNumber(tObjectNobelium,102),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838507).
lisp_trans(=>(and(tObjectNobelium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(254,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838535).
lisp_trans(documentation(tObjectNobelium,vEnglishLanguage,s("Radioactive","metallic","transuranic","element",",","belongs","to","the","actinoids",".","Seven","known","isotopes","exist",",","the","most","stable","being","No","-254","with","a","half","-","life","of","255","seconds",".","First","identified","with","certainty","by","Albert","Ghiorso","and","Glenn","T",".","Seaborg","in","1966",".","{","Unnilbium","}","has","been","proposed","as","an","alternative","name",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838643).
lisp_trans(genls(tObjectLawrencium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':838988).
lisp_trans(names(tObjectLawrencium,"Lawrencium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839029).
lisp_trans(conventionalShortName("Lr",tObjectLawrencium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839061).
lisp_trans(atomicNumber(tObjectLawrencium,103),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839101).
lisp_trans(=>(and(tObjectLawrencium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(262,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839131).
lisp_trans(documentation(tObjectLawrencium,vEnglishLanguage,s("Appearance","unknown",",","however","it","is","most","likely","silvery","-","white","or","grey","and","metallic",".","Lawrencium","is","a","synthetic","rare","-","earth","metal",".","There","are","eight","known","radioisotopes",",","the","most","stable","being","Lr","-262","with","a","half","-","life","of","3.6","hours",".","Due","to","the","short","half","-","life","of","lawrencium",",","and","its","radioactivity",",","there","are","no","known","uses","for","it",".","Identified","by","Albert","Ghiorso","in","1961","at","Berkeley",".","It","was","produced","by","bombarding","californium","with","boron","ions",".","The","name","is","temporary","{","IUPAC","}","nomenclature",",","the","origin","of","the","name","comes","from","Ernest","O",".","Lawrence",",","the","inventor","of","the","cyclotron",".","If","sufficient","amounts","of","lawrencium","were","produced",",","it","would","pose","a","radiation","hazard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839241).
lisp_trans(genls(tSumoUnnilquadium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839948).
lisp_trans(names(tSumoUnnilquadium,"Unnilquadium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':839991).
lisp_trans(conventionalShortName("Unq",tSumoUnnilquadium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840027).
lisp_trans(atomicNumber(tSumoUnnilquadium,104),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840070).
lisp_trans(=>(and(tSumoUnnilquadium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(261,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840102).
lisp_trans(documentation(tSumoUnnilquadium,vEnglishLanguage,s("Radioactive","transactinide","element",".","Expected","to","have","similar","chemical","properties","to","those","displayed","by","hafnium",".","Rf","-260","was","discovered","by","the","Joint","Nuclear","Research","Institute","at","Dubna","(","U",".","S",".","S",".","R",".",")","in","1964",".","Researchers","at","Berkeley","discovered","Unq","-257","and","Unq","-258","in","1964",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840214).
lisp_trans(genls(tSumoUnnilpentium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840536).
lisp_trans(names(tSumoUnnilpentium,"Unnilpentium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840579).
lisp_trans(conventionalShortName("Unp",tSumoUnnilpentium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840615).
lisp_trans(atomicNumber(tSumoUnnilpentium,105),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840658).
lisp_trans(=>(and(tSumoUnnilpentium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(262,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840690).
lisp_trans(documentation(tSumoUnnilpentium,vEnglishLanguage,s("Radioactive","transactinide","element",".","Half","-","life","of","1.6","s",".","Discovered","in","1970","by","Berkeley","researchers",".","So","far",",","seven","isotopes","have","been","discovered",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840802).
lisp_trans(genls(tSumoUnnilhexium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':840999).
lisp_trans(names(tSumoUnnilhexium,"Unnilhexium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841041).
lisp_trans(atomicNumber(tSumoUnnilhexium,106),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841075).
lisp_trans(=>(and(tSumoUnnilhexium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(263,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841106).
lisp_trans(documentation(tSumoUnnilhexium,vEnglishLanguage,s("Half","-","life","of","0.9","+","/","-","0.2","s",".","Discovered","by","the","Joint","Institute","for","Nuclear","Research","at","Dubna","(","U",".","S",".","S",".","R",".",")","in","June","of","1974",".","Its","existence","was","confirmed","by","the","Lawrence","Berkeley","Laboratory","and","Livermore","National","Laboratory","in","September","of","1974",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841217).
lisp_trans(genls(tSumoUnnilseptium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841510).
lisp_trans(names(tSumoUnnilseptium,"Unnilseptium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841553).
lisp_trans(atomicNumber(tSumoUnnilseptium,107),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841589).
lisp_trans(=>(and(tSumoUnnilseptium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(262,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841621).
lisp_trans(documentation(tSumoUnnilseptium,vEnglishLanguage,s("Radioactive","transition","metal",".","Half","-","life","of","approximately","1","/","500","s",".","Discovered","by","the","Joint","Institute","for","Nuclear","Research","at","Dubna","(","U",".","S",".","S",".","R",".",")","in","1976",".","Confirmed","by","West","German","physicists","at","the","Heavy","Ion","Research","Laboratory","at","Darmstadt",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':841733).
lisp_trans(genls(tSumoUnniloctium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842025).
lisp_trans(names(tSumoUnniloctium,"Unniloctium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842067).
lisp_trans(conventionalShortName("Uno",tSumoUnniloctium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842101).
lisp_trans(atomicNumber(tSumoUnniloctium,108),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842143).
lisp_trans(=>(and(tSumoUnniloctium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(265,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842174).
lisp_trans(documentation(tSumoUnniloctium,vEnglishLanguage,s("Radioactive","transition","metal",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842285).
lisp_trans(genls(tObjectMeitnerium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842362).
lisp_trans(names(tObjectMeitnerium,"Meitnerium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842403).
lisp_trans(conventionalShortName("Mt",tObjectMeitnerium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842435).
lisp_trans(atomicNumber(tObjectMeitnerium,109),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842475).
lisp_trans(=>(and(tObjectMeitnerium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(266,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842505).
lisp_trans(documentation(tObjectMeitnerium,vEnglishLanguage,s("Half","-","life","of","approximately","5","ms",".","The","creation","of","this","element","demonstrated","that","fusion","techniques","could","indeed","be","used","to","make","new",",","heavy","nuclei",".","Made","and","identified","by","physicists","of","the","Heavy","Ion","Research","Laboratory",",","Darmstadt",",","West","Germany","in","1982",".","Named","in","honor","of","Lise","Meitner","the","Austrian","physicist",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842615).
lisp_trans(genls(tSumoUnnildecium,tSumoElementalSubstance),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':842974).
lisp_trans(names(tSumoUnnildecium,"Unnildecium"),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843016).
lisp_trans(conventionalShortName("Unn",tSumoUnnildecium),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843050).
lisp_trans(atomicNumber(tSumoUnnildecium,110),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843092).
lisp_trans(=>(and(tSumoUnnildecium(ATOM),tSumoAtomMolecule(ATOM)),measure(ATOM,uMeasureFn(272,tSumoAmu))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843123).
lisp_trans(documentation(tSumoUnnildecium,vEnglishLanguage,s("Half","-","life","of","approximately","10","ms",".","Reported","in","1994","by","German","researchers","at","Darmstadt",",","Germany",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843234).
lisp_trans(meltingPoint(tHydrogen,uMeasureFn(14.01,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843379).
lisp_trans(boilingPoint(tHydrogen,uMeasureFn(20.28,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843434).
lisp_trans(meltingPoint(tHelium,uMeasureFn(0.95,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843489).
lisp_trans(boilingPoint(tHelium,uMeasureFn(4.216,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843541).
lisp_trans(meltingPoint(tLithium,uMeasureFn(453.69,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843594).
lisp_trans(boilingPoint(tLithium,uMeasureFn(1590,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843649).
lisp_trans(meltingPoint(tBeryllium,uMeasureFn(1551,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843702).
lisp_trans(boilingPoint(tBeryllium,uMeasureFn(3243,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843757).
lisp_trans(meltingPoint(tBoron,uMeasureFn(2573,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843812).
lisp_trans(boilingPoint(tBoron,uMeasureFn(2823,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843863).
lisp_trans(meltingPoint(tCarbon,uMeasureFn(3823,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843914).
lisp_trans(boilingPoint(tCarbon,uMeasureFn(5100,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':843966).
lisp_trans(meltingPoint(tNitrogen,uMeasureFn(63.29,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844018).
lisp_trans(boilingPoint(tNitrogen,uMeasureFn(77.4,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844073).
lisp_trans(meltingPoint(tOxygen,uMeasureFn(54.75,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844127).
lisp_trans(boilingPoint(tOxygen,uMeasureFn(90.188,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844180).
lisp_trans(meltingPoint(tFluorine,uMeasureFn(53.53,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844234).
lisp_trans(boilingPoint(tFluorine,uMeasureFn(85.01,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844289).
lisp_trans(meltingPoint(tNeon,uMeasureFn(24.48,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844344).
lisp_trans(boilingPoint(tNeon,uMeasureFn(27.1,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844395).
lisp_trans(meltingPoint(tSodium,uMeasureFn(370.95,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844445).
lisp_trans(boilingPoint(tSodium,uMeasureFn(1165,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844499).
lisp_trans(meltingPoint(tMagnesium,uMeasureFn(921.95,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844551).
lisp_trans(boilingPoint(tMagnesium,uMeasureFn(1380,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844608).
lisp_trans(meltingPoint(tAluminum,uMeasureFn(933.52,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844663).
lisp_trans(boilingPoint(tAluminum,uMeasureFn(2740,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844719).
lisp_trans(meltingPoint(tSilicon,uMeasureFn(1683,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844773).
lisp_trans(boilingPoint(tSilicon,uMeasureFn(2628,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844826).
lisp_trans(meltingPoint(tPhosphorus,uMeasureFn(317.3,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844879).
lisp_trans(boilingPoint(tPhosphorus,uMeasureFn(553,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844936).
lisp_trans(meltingPoint(tSumoSulphur,uMeasureFn(386,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':844991).
lisp_trans(boilingPoint(tSumoSulphur,uMeasureFn(717.824,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845043).
lisp_trans(meltingPoint(tChlorine,uMeasureFn(172.17,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845099).
lisp_trans(boilingPoint(tChlorine,uMeasureFn(238.55,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845155).
lisp_trans(meltingPoint(tArgon,uMeasureFn(83.78,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845211).
lisp_trans(boilingPoint(tArgon,uMeasureFn(87.29,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845263).
lisp_trans(meltingPoint(tPotassium,uMeasureFn(336.8,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845315).
lisp_trans(boilingPoint(tPotassium,uMeasureFn(1047,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845371).
lisp_trans(meltingPoint(tCalcium,uMeasureFn(1112,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845426).
lisp_trans(boilingPoint(tCalcium,uMeasureFn(1760,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845479).
lisp_trans(meltingPoint(tScandium,uMeasureFn(1812,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845532).
lisp_trans(boilingPoint(tScandium,uMeasureFn(3105,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845586).
lisp_trans(meltingPoint(tTitanium,uMeasureFn(1933,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845640).
lisp_trans(boilingPoint(tTitanium,uMeasureFn(3533,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845694).
lisp_trans(meltingPoint(tVanadium,uMeasureFn(2163,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845748).
lisp_trans(boilingPoint(tVanadium,uMeasureFn(3653,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845802).
lisp_trans(meltingPoint(tChromium,uMeasureFn(2130,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845856).
lisp_trans(boilingPoint(tChromium,uMeasureFn(2755,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845910).
lisp_trans(meltingPoint(tManganese,uMeasureFn(1517,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':845964).
lisp_trans(boilingPoint(tManganese,uMeasureFn(2370,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846019).
lisp_trans(meltingPoint(tIron,uMeasureFn(1808,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846074).
lisp_trans(boilingPoint(tIron,uMeasureFn(3023,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846124).
lisp_trans(meltingPoint(tCobalt,uMeasureFn(1768,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846174).
lisp_trans(boilingPoint(tCobalt,uMeasureFn(3143,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846226).
lisp_trans(meltingPoint(tNickel,uMeasureFn(1726,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846278).
lisp_trans(boilingPoint(tNickel,uMeasureFn(3005,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846330).
lisp_trans(meltingPoint(tCopper,uMeasureFn(1356.6,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846382).
lisp_trans(boilingPoint(tCopper,uMeasureFn(2868,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846436).
lisp_trans(meltingPoint(tZinc,uMeasureFn(692.73,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846488).
lisp_trans(boilingPoint(tZinc,uMeasureFn(1180,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846540).
lisp_trans(meltingPoint(tGallium,uMeasureFn(302.93,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846590).
lisp_trans(boilingPoint(tGallium,uMeasureFn(2676,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846645).
lisp_trans(meltingPoint(tGermanium,uMeasureFn(1210.55,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846698).
lisp_trans(boilingPoint(tGermanium,uMeasureFn(3103,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846756).
lisp_trans(meltingPoint(tArsenic,uMeasureFn(886,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846811).
lisp_trans(boilingPoint(tArsenic,uMeasureFn(886,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846863).
lisp_trans(meltingPoint(tSelenium,uMeasureFn(490,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846915).
lisp_trans(boilingPoint(tSelenium,uMeasureFn(958.1,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':846968).
lisp_trans(meltingPoint(tBromine,uMeasureFn(265.9,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847023).
lisp_trans(boilingPoint(tBromine,uMeasureFn(331.93,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847077).
lisp_trans(meltingPoint(tKrypton,uMeasureFn(116.55,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847132).
lisp_trans(boilingPoint(tKrypton,uMeasureFn(120.85,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847187).
lisp_trans(meltingPoint(tRubidium,uMeasureFn(312.2,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847242).
lisp_trans(boilingPoint(tRubidium,uMeasureFn(961,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847297).
lisp_trans(meltingPoint(tStrontium,uMeasureFn(1042,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847350).
lisp_trans(boilingPoint(tStrontium,uMeasureFn(1657,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847405).
lisp_trans(meltingPoint(tYttrium,uMeasureFn(1796,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847460).
lisp_trans(boilingPoint(tYttrium,uMeasureFn(3610,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847513).
lisp_trans(meltingPoint(tZirconium,uMeasureFn(2125,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847566).
lisp_trans(boilingPoint(tZirconium,uMeasureFn(4650,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847621).
lisp_trans(meltingPoint(tNiobium,uMeasureFn(2741,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847676).
lisp_trans(boilingPoint(tNiobium,uMeasureFn(5200,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847729).
lisp_trans(meltingPoint(tMolybdenum,uMeasureFn(2890,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847782).
lisp_trans(boilingPoint(tMolybdenum,uMeasureFn(5833,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847838).
lisp_trans(meltingPoint(tObjectTechnetium,uMeasureFn(2445,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847894).
lisp_trans(boilingPoint(tObjectTechnetium,uMeasureFn(5303,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':847950).
lisp_trans(meltingPoint(tRuthenium,uMeasureFn(2583,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848006).
lisp_trans(boilingPoint(tRuthenium,uMeasureFn(4173,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848061).
lisp_trans(meltingPoint(tRhodium,uMeasureFn(2239,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848116).
lisp_trans(boilingPoint(tRhodium,uMeasureFn(4000,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848169).
lisp_trans(meltingPoint(tPalladium,uMeasureFn(1825,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848222).
lisp_trans(boilingPoint(tPalladium,uMeasureFn(3413,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848277).
lisp_trans(meltingPoint(tSilver,uMeasureFn(1235.08,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848332).
lisp_trans(boilingPoint(tSilver,uMeasureFn(2485,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848387).
lisp_trans(meltingPoint(tCadmium,uMeasureFn(594.1,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848439).
lisp_trans(boilingPoint(tCadmium,uMeasureFn(1038,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848493).
lisp_trans(meltingPoint(tIndium,uMeasureFn(429.32,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848546).
lisp_trans(boilingPoint(tIndium,uMeasureFn(2353,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848600).
lisp_trans(meltingPoint(tTin,uMeasureFn(505.118,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848652).
lisp_trans(boilingPoint(tTin,uMeasureFn(2543,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848704).
lisp_trans(meltingPoint(tAntimony,uMeasureFn(903.89,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848753).
lisp_trans(boilingPoint(tAntimony,uMeasureFn(2023,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848809).
lisp_trans(meltingPoint(tTellurium,uMeasureFn(722.7,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848863).
lisp_trans(boilingPoint(tTellurium,uMeasureFn(1263,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848919).
lisp_trans(meltingPoint(tIodine,uMeasureFn(386.65,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':848974).
lisp_trans(boilingPoint(tIodine,uMeasureFn(457.55,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849028).
lisp_trans(meltingPoint(tXenon,uMeasureFn(161.3,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849082).
lisp_trans(boilingPoint(tXenon,uMeasureFn(166.1,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849134).
lisp_trans(meltingPoint(tSumoCaesium,uMeasureFn(301.55,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849186).
lisp_trans(boilingPoint(tSumoCaesium,uMeasureFn(963,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849241).
lisp_trans(meltingPoint(tBarium,uMeasureFn(998,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849293).
lisp_trans(boilingPoint(tBarium,uMeasureFn(1913,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849344).
lisp_trans(meltingPoint(tLanthanum,uMeasureFn(1193,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849396).
lisp_trans(boilingPoint(tLanthanum,uMeasureFn(3727,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849451).
lisp_trans(meltingPoint(tCerium,uMeasureFn(1071,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849506).
lisp_trans(boilingPoint(tCerium,uMeasureFn(3530,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849558).
lisp_trans(meltingPoint(tPraseodymium,uMeasureFn(1204,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849610).
lisp_trans(boilingPoint(tPraseodymium,uMeasureFn(3485,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849668).
lisp_trans(meltingPoint(tNeodymium,uMeasureFn(1283,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849726).
lisp_trans(boilingPoint(tNeodymium,uMeasureFn(3400,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849781).
lisp_trans(meltingPoint(tPromethium,uMeasureFn(1353,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849836).
lisp_trans(boilingPoint(tPromethium,uMeasureFn(3000,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849892).
lisp_trans(meltingPoint(tSamarium,uMeasureFn(1345,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':849948).
lisp_trans(boilingPoint(tSamarium,uMeasureFn(2051,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850002).
lisp_trans(meltingPoint(tEuropium,uMeasureFn(1095,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850056).
lisp_trans(boilingPoint(tEuropium,uMeasureFn(1870,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850110).
lisp_trans(meltingPoint(tGadolinium,uMeasureFn(1584,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850164).
lisp_trans(boilingPoint(tGadolinium,uMeasureFn(3506,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850220).
lisp_trans(meltingPoint(tTerbium,uMeasureFn(1633,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850276).
lisp_trans(boilingPoint(tTerbium,uMeasureFn(3314,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850329).
lisp_trans(meltingPoint(tDysprosium,uMeasureFn(1682,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850382).
lisp_trans(boilingPoint(tDysprosium,uMeasureFn(2608,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850438).
lisp_trans(meltingPoint(tHolmium,uMeasureFn(1743,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850494).
lisp_trans(boilingPoint(tHolmium,uMeasureFn(2993,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850547).
lisp_trans(meltingPoint(tErbium,uMeasureFn(1795,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850600).
lisp_trans(boilingPoint(tErbium,uMeasureFn(2783,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850652).
lisp_trans(meltingPoint(tThulium,uMeasureFn(1818,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850704).
lisp_trans(boilingPoint(tThulium,uMeasureFn(2000,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850757).
lisp_trans(meltingPoint(tYtterbium,uMeasureFn(1097,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850810).
lisp_trans(boilingPoint(tYtterbium,uMeasureFn(1466,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850865).
lisp_trans(meltingPoint(tLutetium,uMeasureFn(1929,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850920).
lisp_trans(boilingPoint(tLutetium,uMeasureFn(3588,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':850974).
lisp_trans(meltingPoint(tHafnium,uMeasureFn(2423,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851028).
lisp_trans(boilingPoint(tHafnium,uMeasureFn(5673,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851081).
lisp_trans(meltingPoint(tTantalum,uMeasureFn(3269,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851134).
lisp_trans(boilingPoint(tTantalum,uMeasureFn(5698,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851188).
lisp_trans(meltingPoint(tTungsten,uMeasureFn(3680,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851242).
lisp_trans(boilingPoint(tTungsten,uMeasureFn(6200,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851296).
lisp_trans(meltingPoint(tRhenium,uMeasureFn(3453,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851350).
lisp_trans(boilingPoint(tRhenium,uMeasureFn(5900,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851403).
lisp_trans(meltingPoint(tOsmium,uMeasureFn(3318,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851456).
lisp_trans(boilingPoint(tOsmium,uMeasureFn(5300,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851508).
lisp_trans(meltingPoint(tIridium,uMeasureFn(2683,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851560).
lisp_trans(boilingPoint(tIridium,uMeasureFn(4403,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851613).
lisp_trans(meltingPoint(tPlatinum,uMeasureFn(2045,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851666).
lisp_trans(boilingPoint(tPlatinum,uMeasureFn(4100,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851720).
lisp_trans(meltingPoint(tGold,uMeasureFn(1337.58,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851774).
lisp_trans(boilingPoint(tGold,uMeasureFn(3213,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851827).
lisp_trans(meltingPoint(tMercury,uMeasureFn(234.28,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851877).
lisp_trans(boilingPoint(tMercury,uMeasureFn(629.73,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851932).
lisp_trans(meltingPoint(tThallium,uMeasureFn(576.7,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':851987).
lisp_trans(boilingPoint(tThallium,uMeasureFn(1730,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852042).
lisp_trans(meltingPoint(tLead,uMeasureFn(600.65,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852096).
lisp_trans(boilingPoint(tLead,uMeasureFn(2013,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852148).
lisp_trans(meltingPoint(tBismuth,uMeasureFn(544.5,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852198).
lisp_trans(boilingPoint(tBismuth,uMeasureFn(1833,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852252).
lisp_trans(meltingPoint(tPolonium,uMeasureFn(527,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852305).
lisp_trans(boilingPoint(tPolonium,uMeasureFn(1235,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852358).
lisp_trans(meltingPoint(tAstatine,uMeasureFn(575,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852412).
lisp_trans(boilingPoint(tAstatine,uMeasureFn(610,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852465).
lisp_trans(meltingPoint(tRadon,uMeasureFn(202,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852518).
lisp_trans(boilingPoint(tRadon,uMeasureFn(211.4,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852568).
lisp_trans(meltingPoint(tFrancium,uMeasureFn(300,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852620).
lisp_trans(boilingPoint(tFrancium,uMeasureFn(950,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852673).
lisp_trans(meltingPoint(tRadium,uMeasureFn(973,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852726).
lisp_trans(boilingPoint(tRadium,uMeasureFn(1413,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852777).
lisp_trans(meltingPoint(tActinium,uMeasureFn(1320,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852829).
lisp_trans(boilingPoint(tActinium,uMeasureFn(3470,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852883).
lisp_trans(meltingPoint(tThorium,uMeasureFn(2023,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852937).
lisp_trans(boilingPoint(tThorium,uMeasureFn(5060,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':852990).
lisp_trans(meltingPoint(tProtactinium,uMeasureFn(1827,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853043).
lisp_trans(boilingPoint(tProtactinium,uMeasureFn(4300,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853101).
lisp_trans(meltingPoint(tUranium,uMeasureFn(1405.5,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853159).
lisp_trans(boilingPoint(tUranium,uMeasureFn(4091,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853214).
lisp_trans(meltingPoint(tNeptunium,uMeasureFn(913,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853267).
lisp_trans(boilingPoint(tNeptunium,uMeasureFn(4175,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853321).
lisp_trans(meltingPoint(tPlutonium,uMeasureFn(914,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853376).
lisp_trans(boilingPoint(tPlutonium,uMeasureFn(3600,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853430).
lisp_trans(meltingPoint(tObjectAmericium,uMeasureFn(1267,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853485).
lisp_trans(boilingPoint(tObjectAmericium,uMeasureFn(2880,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853540).
lisp_trans(meltingPoint(tObjectCurium,uMeasureFn(1613,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853596).
lisp_trans(meltingPoint(tObjectBerkelium,uMeasureFn(1259,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853648).
lisp_trans(meltingPoint(tObjectCalifornium,uMeasureFn(1173,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853703).
lisp_trans(meltingPoint(tObjectEinsteinium,uMeasureFn(1133,vtKelvinDegree)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853760).
lisp_trans(genls(tSumoVehicleDoor,tSumoDevice),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853818).
lisp_trans(documentation(tSumoVehicleDoor,vEnglishLanguage,s("An","equivalent","to","a","#$Door","but","in","a","#$Vehicle",",","rather","than","a","#$StationaryObject",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853848).
lisp_trans(relatedInternalConcept(tSumoDoor,tSumoVehicleDoor),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':853974).
lisp_trans(=>(tSumoVehicleDoor(VD),hasPurpose(VD,exists([O],and(actOpening(O),patient(O,VD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854016).
lisp_trans(=>(tSumoVehicleDoor(VD),hasPurpose(VD,exists([C],and(actClosing(C),patient(C,VD))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854155).
lisp_trans(=>(and(tSumoVehicleDoor(VD),sumoAttribute(VD,tSumoDeviceNormal)),and(capability(patient,actOpening,VD),capability(patient,actClosing,VD))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854294).
lisp_trans(typicalPart(tSumoVehicleDoor,tObjectAutomobile),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854454).
lisp_trans(vtInternalAttribute(tSumoDeviceNormal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854492).
lisp_trans(documentation(tSumoDeviceNormal,vEnglishLanguage,s("An","#$Attribute","stating","that","the","#$Device","has","not","be","subject","to","#$Damaging",",","at","least","not","without","a","#$Repairing",",","and","can","function","as","to","its","intended","#$hasPurpose",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854534).
lisp_trans(=>(sumoAttribute(D,tSumoDeviceNormal),not(exists([DAM],and(actDamaging(DAM),patient(DAM,D),not(exists([R],and(actRepairing(R),patient(R,D),earlier(D,R)))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':854744).
lisp_trans(=>(and(sumoAttribute(D,tSumoDeviceNormal),hasPurpose(D,F)),modalAttribute(F,tSumoPossibility)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855034).
lisp_trans(vtInternalAttribute(tSumoDeviceDamaged),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855137).
lisp_trans(contraryAttribute(tSumoDeviceDamaged,tSumoDeviceNormal),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855180).
lisp_trans(documentation(tSumoDeviceDamaged,vEnglishLanguage,s("An","#$Attribute","stating","that","the","#$Device","has","been","subjected","to","a","#$Damaging",",","and","has","not","had","a","subsequent","succesful","#$Repairing",",","and","cannot","function","as","to","its","intended","#$hasPurpose",".","Note","that","this","does","not","include","cosmetic","damage","that","does","not","change","the","function","of","the","#$Object",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855227).
lisp_trans(=>(sumoAttribute(D,tSumoDeviceDamaged),exists([DAM],and(actDamaging(DAM),patient(DAM,D),not(exists([R],and(actRepairing(R),patient(R,D),earlier(D,R))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855558).
lisp_trans(=>(and(sumoAttribute(D,tSumoDeviceDamaged),hasPurpose(D,F)),not(modalAttribute(F,tSumoPossibility))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855821).
lisp_trans(genls(actVending,actFinancialTransaction),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855935).
lisp_trans(documentation(actVending,vEnglishLanguage,s("A","#$FinancialTransaction","in","which","the","seller","is","a","#$Machine")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':855975).
lisp_trans(=>(actVending(V),exists([VM],and(tObjectVendingMachine(VM),origin(V,VM)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856078).
lisp_trans(genls(tObjectVendingMachine,tSumoMachine),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856199).
lisp_trans(documentation(tObjectVendingMachine,vEnglishLanguage,s("A","#$Machine","that","is","the","instrument","of","a","#$FinancialTransaction","that","accepts","payment","and","releases","some","object",",","often","food","or","drink",",","to","the","customer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856233).
lisp_trans(=>(tObjectVendingMachine(VM),hasPurpose(VM,exists([H,O],and(actVending(V),tSumoHuman(H),tSumoObject(O),objectTransferred(V,O),instrument(V,VM),origin(V,VM),not(tObjectCurrency(O)),destination(V,H))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856431).
lisp_trans(=>(and(actVending(V),objectTransferred(V,O),not(tObjectCurrency(O))),modalAttribute(or(isa(O,uFoodForFn(tSumoHuman)),tSumoBeverage(O)),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856773).
lisp_trans(vtRelationalAttribute(tSumoCoinOperated),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':856985).
lisp_trans(documentation(tSumoCoinOperated,vEnglishLanguage,s("An","#$Attribute","stating","that","a","#$Machine","is","operated","by","its","intended","#$customer","only","by","receive","one","or","more","#$CurrencyCoins",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857029).
lisp_trans(=>(sumoAttribute(M,tSumoCoinOperated),tSumoMachine(M)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857201).
lisp_trans(=>(sumoAttribute(M,tSumoCoinOperated),hasPurpose(M,exists([C,FT,A,ACT],and(tSumoCurrencyCoin(C),actFinancialTransaction(FT),destination(FT,M),patient(FT,C),origin(FT,A),causes(FT,ACT),wants(A,ACT))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857261).
lisp_trans(genls(tSumoFishTank,tSumoFluidContainer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857564).
lisp_trans(documentation(tSumoFishTank,vEnglishLanguage,s("A","#$Container","designed","to","hold","#$Water","and","#$Fish",".","Note","that","many","such","tanks","can","be","repurposed","to","hold","reptiles","or","insects",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857599).
lisp_trans(=>(tSumoFishTank(FT),hasPurpose(FT,exists([W,F],and(tWater(W),tClazzFish(F),contains(FT,W),contains(FT,F))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857768).
lisp_trans(vtRelationalAttribute(tCollectible),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':857959).
lisp_trans(documentation(tCollectible,vEnglishLanguage,s("Something","that","an","agent","wants","that","is","not","primarily","based","on","its","utility",".","Note","that","this","includes","#$ArtWorks",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858002).
lisp_trans(=>(and(sumoAttribute(C,tCollectible),hasPurpose(C,P)),exists([H],and(tSumoHuman(H),wants(H,C),desires(H,P2),entails(P2,possesses(H,C)),not(equal(P,P2))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858160).
lisp_trans(genls(tObjectTradingCard,tSumoIcon),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858410).
lisp_trans(documentation(tObjectTradingCard,vEnglishLanguage,s("A","#$Collectible","that","depicts","some","#$Human","(","such","as","a","professional","sports","star",")","or","imaginary","#$Agent","(","in","the","case","of","fantasy","trading","cards","like","Pokemon",")",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858438).
lisp_trans(=>(tObjectTradingCard(TC),sumoAttribute(TC,tCollectible)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858639).
lisp_trans(genls(tSumoPortableComputer,tObjectComputer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858704).
lisp_trans(documentation(tSumoPortableComputer,vEnglishLanguage,s("A","#$Computer","that","is","designed","to","be","tranferred","easily","by","a","#$Human","from","one","location","to","another",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858741).
lisp_trans(=>(tSumoPortableComputer(PC),hasPurpose(PC,exists([T,H],and(actCarrying(T),patient(T,PC),agent(C,H))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':858890).
lisp_trans(genls(tSumoLaptop,tSumoPortableComputer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859060).
lisp_trans(documentation(tSumoLaptop,vEnglishLanguage,s("A","#$PortableComputer","that","includes","a","standard","sized","#$ComputerKeyboard",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859095).
lisp_trans(initiallyContainsPart(tPartTypeComputerKeyboard,tSumoLaptop),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859209).
lisp_trans(initiallyContainsPart(tSumoComputerScreen,tSumoLaptop),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859257).
lisp_trans(genls(tObjectTabletComputer,tSumoPortableComputer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859304).
lisp_trans(documentation(tObjectTabletComputer,vEnglishLanguage,s("A","#$PortableComputer","lacking","a","physical","#$ComputerKeyboard",",","but","having","a","touch","-","sensitive","screen",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859347).
lisp_trans(=>(tObjectTabletComputer(T),not(exists([K],and(tPartTypeComputerKeyboard(K),part(K,T))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859494).
lisp_trans(=>(tObjectTabletComputer(T),exists([K],and(tSumoComputerTouchscreen(K),part(K,T)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859629).
lisp_trans(genls(tSumoSmartPhone,tSumoMobileCellPhone),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859751).
lisp_trans(genls(tSumoSmartPhone,tSumoPortableComputer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859789).
lisp_trans(documentation(tSumoSmartPhone,vEnglishLanguage,s("A","#$MobileCellPhone","with","a","user","-","accessible","computing","capabality",".","A","phone","that","simply","has","a","computer","in","it",",","but","where","the","user","is","not","able","to","program","it","or","install","new","programs",",","does","not","constitute","a","smart","phone",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':859828).
lisp_trans(rtCaseRole(suffers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860087).
lisp_trans(rtBinaryRelation(suffers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860115).
lisp_trans(rtPartialValuedRelation(suffers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860149).
lisp_trans(argIsa(suffers,1,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860190).
lisp_trans(argIsa(suffers,2,tAgent),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860217).
lisp_trans(documentation(suffers,vEnglishLanguage,s("The","opposite","of","#$benefits",".","The","#$Agent","does","not","want","the","action","to","occur",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860242).
lisp_trans(=>(suffers(A,B),not(benefits(A,B))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860361).
lisp_trans(=>(benefits(A,B),not(suffers(A,B))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860416).
lisp_trans(=>(and(equal(PROCESS_START,uBeginFn(uWhenFn(PROCESS))),equal(AGENT_END,iTimeOf_EndFn(uWhenFn(AGENT))),suffers(PROCESS,AGENT)),before(PROCESS_START,AGENT_END)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860469).
lisp_trans(=>(benefits(A,B),wants(B,A)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860724).
lisp_trans(=>(suffers(A,B),not(wants(B,A))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860765).
lisp_trans(genls(actApologizing,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860853).
lisp_trans(documentation(actApologizing,vEnglishLanguage,s("The","speaker","states","that","some","action","he","or","she","took","previously","was","wrong","in","some","way",",","that","it","caused","harm","to","the","hearer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':860884).
lisp_trans(=>(and(actApologizing(A),agent(A,AG),destination(A,P)),exists([ACT],and(suffers(ACT,P),agent(ACT,AG),holdsDuring(uWhenFn(A),not(wants(AG,ACT)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861051).
lisp_trans(genls(actConfirming,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861299).
lisp_trans(documentation(actConfirming,vEnglishLanguage,s("An","utterance","in","which","the","speaker","is","part","of","a","#$ReachingAgreement","and","in","which","the","#$Proposition","under","consideration","has","already","been","#$Stated",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861329).
lisp_trans(=>(and(actConfirming(C),agent(C,A),containsInformation(C,P)),exists([S,RA,A2],and(actStating(S),earlier(S,C),tSumoReachingAgreement(RA),agent(S,A2),containsInformation(RA,P),containsInformation(S,P),partyToAgreement(RA,A),partyToAgreement(RA,A2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861520).
lisp_trans(genls(actElaborating,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861891).
lisp_trans(documentation(actElaborating,vEnglishLanguage,s("A","#$LinguisticCommunication","in","which","the","#$agent","adds","additional","content","beyond","the","original","utterance",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':861938).
lisp_trans(=>(actElaborating(E),exists([L,EP,LP],and(actLinguisticCommunication(L),earlier(L,E),containsInformation(E,EP),containsInformation(L,LP),subsumesContentInstance(EP,LP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862089).
lisp_trans(genls(actRestating,actLinguisticCommunication),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862339).
lisp_trans(documentation(actRestating,vEnglishLanguage,s("A","#$Communication","act","in","which","the","speaker","reiterates","the","same","#$Proposition","as","a","previous","speech","act",".","Note","that","this","is","not","a","#$Stating",",","since","the","speaker","may","simply","be","saying","what","someone","else","said",",","and","not","actually","committing","to","the","truth","of","what","that","person","said",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862384).
lisp_trans(=>(actRestating(R),exists([L],and(actLinguisticCommunication(L),earlier(L,R),containsInformation(E,RP),containsInformation(L,LP),equivalentContentInstance(RP,LP)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862698).
lisp_trans(genls(actCorrecting,actStating),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862934).
lisp_trans(documentation(actCorrecting,vEnglishLanguage,s("A","#$Correcting","is","a","part","of","a","#$Disagreeing","in","which","the","speaker","explicitly","#$refers","to","a","prior","statement",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':862964).
lisp_trans(=>(actCorrecting(C),exists([D,S,SP,CP],and(actDisagreeing(D),subProcess(C,D),actStating(S),subProcess(S,D),containsInformation(S,SP),containsInformation(C,CP),refers(CP,SP),not(consistent(CS,SP))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':863117).
lisp_trans(genls(actPrompting,actRequesting),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':863597).
lisp_trans(documentation(actPrompting,vEnglishLanguage,s("A","#$Prompting","is","an","implied","sort","of","#$Requesting",",","in","which","the","speaker","begins","an","utterance",",","asking","the","hearer","to","complete","it",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':863629).
lisp_trans(=>(actPrompting(P),exists([H,A],and(destination(P,H),agent(P,A),desires(A,exists([LC],and(actLinguisticCommunication(LC),agent(LC,H),earlier(P,LC),subsumesContentInstance(LC,P))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':863800).
lisp_trans(rtUnaryFunction(uCoveringFn),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864123).
lisp_trans(argGenl(uCoveringFn,1,tSumoBodyPart),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864159).
lisp_trans(resultGenl(uCoveringFn,tSumoWearableItem),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864198).
lisp_trans(documentation(uCoveringFn,vEnglishLanguage,s("A","#$Function","that","produces","the","class","of","all","things","intended","to","be","used","in","#$Covering","a","particular","#$BodyPart",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864238).
lisp_trans(=>(genls(C,uCoveringFn(B)),hasPurpose(C,exists([P,BI,CI],and(actCovering(P),isa(BI,B),isa(CI,C),destination(P,BI),patient(P,CI))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864394).
lisp_trans(rtBinaryPredicate(covers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864625).
lisp_trans(rtTransitiveRelation(covers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864659).
lisp_trans(rtSpatialRelation(covers),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864696).
lisp_trans(argIsa(covers,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864730).
lisp_trans(argIsa(covers,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864755).
lisp_trans(formatSumo(vEnglishLanguage,covers,s("%","1","covers","%","2")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864780).
lisp_trans(documentation(covers,vEnglishLanguage,s("A","relationship","of","partial","or","complete","physical","covering",",","which","may","be","the","result","of","a","#$Covering",".","To","cover","an","object",",","the","first","object","must","at","least","roughly","conform","to","the","surface","of","the","second","object",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':864827).
lisp_trans(=>(and(covers(A,B),superficialPart(S,B)),meetsSpatially(A,S)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865074).
lisp_trans(=>(and(actCovering(C),patient(C,P),instrument(C,I)),holdsDuring(uImmediateFutureFn(uWhenFn(C)),covers(I,P))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865160).
lisp_trans(documentation(beforeOnPath,vEnglishLanguage,s("(","beforeOnPath","?","OBJ1","?","OBJ2","?","PATH","?","PROC",")","means","that","?","OBJ1","is","spatially","before","?","OBJ2","on","the","path","?","PATH","with","respect","to","a","particular","#$Transfer","#$Process",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865320).
lisp_trans(argIsa(beforeOnPath,1,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865522).
lisp_trans(argIsa(beforeOnPath,2,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865553).
lisp_trans(argIsa(beforeOnPath,3,tSumoObject),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865584).
lisp_trans(argIsa(beforeOnPath,4,actTransfer),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865615).
lisp_trans(rtQuaternaryPredicate(beforeOnPath),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865649).
lisp_trans(rtSpatialRelation(beforeOnPath),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865694).
lisp_trans(formatSumo(vEnglishLanguage,beforeOnPath,s("%","1","%","n","before","%","2","on","path","%","3","during","%","4")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865780).
lisp_trans(termFormat(vEnglishLanguage,betweenOnPath,s("before","on","path")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865858).
lisp_trans(=>(and(betweenOnPath(O1,O2,O3,PATH),actTransfer(T),path(T,PATH),origin(T,O1),destination(T,O3)),and(beforeOnPath(O1,O2,PATH,T),beforeOnPath(O2,O3,PATH,T))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':865920).
lisp_trans(=>(orientation(O1,O2,tSumoUpstream),exists([T,L,P],and(actTransfer(T),sumoAttribute(L,tSumoLiquid),path(T,P),origin(T,O1),beforeOnPath(O1,O2,P,T),destination(T,O2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':866144).
lisp_trans(=>(orientation(O1,O2,tSumoDownstream),exists([T,L,P],and(actTransfer(T),sumoAttribute(L,tSumoLiquid),path(T,P),origin(T,O2),beforeOnPath(O2,O1,P,T),destination(T,O1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':866375).
lisp_trans(=>(orientation(O1,O2,tSumoUpwind),exists([T,L,P],and(actTransfer(T),sumoAttribute(L,tSumoLiquid),path(T,P),origin(T,O1),beforeOnPath(O1,O2,P,T),destination(T,O2)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':866608).
lisp_trans(=>(orientation(O1,O2,tSumoDownwind),exists([T,L,P],and(actTransfer(T),sumoAttribute(L,tSumoLiquid),path(T,P),origin(T,O2),beforeOnPath(O2,O1,P,T),destination(T,O1)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':866837).
lisp_trans(rtBinaryPredicate(approximateValue),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867068).
lisp_trans(argIsa(approximateValue,1,ftRealNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867112).
lisp_trans(argIsa(approximateValue,2,ftRealNumber),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867151).
lisp_trans(formatSumo(vEnglishLanguage,approximateValue,s("the","approximate","value","of","%","1","is","%","n","%","2")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867190).
lisp_trans(documentation(approximateValue,vEnglishLanguage,s("A","relation","that","specifies","two","numbers","are","equal","or","nearly","so",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867271).
lisp_trans(=>(approximateValue(N1,N2),modalAttribute(equal(N1,N2),tSumoLikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867386).
lisp_trans(=>(approximateValue(N1,N2),modalAttribute(greaterThan(0.9,uDivisionFn(N1,N2)),tSumoUnlikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867471).
lisp_trans(=>(approximateValue(N1,N2),modalAttribute(greaterThan(0.9,uDivisionFn(N2,N1)),tSumoUnlikely)),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867594).
lisp_trans(genls(tSumoInvoice,tSumoFinancialText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867725).
lisp_trans(documentation(tSumoInvoice,vEnglishLanguage,s("A","#$FinancialText","which","refers","to","the","#$Selling","of","physical","goods","and","#$confersRight","to","a","#$Buyer","to","purchase","goods","according","to","agreed","upon","terms",".","An","#$Invoice","can","occur","before","or","after","#$Buyer","'s","receipt","of","goods",",","but","only","before","before","a","#$Seller","'s","receipt","of","payment",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':867758).
lisp_trans(=>(tSumoInvoice(INVOICE),exists([NUMBER,BUYER,SELLER],and(uniqueIdentifier(NUMBER,INVOICE),tSumoBuyer(BUYER),tSumoSeller(SELLER),confersRight(exists([SELLING],and(before(uBeginFn(uWhenFn(INVOICE)),uBeginFn(uWhenFn(SELLING))),actSelling(SELLING),tProduct(PRODUCT),objectTransferred(SELLING,PRODUCT),refers(INVOICE,PRODUCT),agent(SELLING,SELLER),patient(SELLING,BUYER))),SELLER,BUYER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':868073).
lisp_trans(genls(tSumoPurchaseOrder,tSumoFinancialText),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':868770).
lisp_trans(documentation(tSumoPurchaseOrder,vEnglishLanguage,s("A","#$FinancialText","which","refers","to","the","#$Selling","of","physical","goods","and","#$confersObligation","to","a","#$Buyer","to","purchase","goods","according","to","agreed","upon","terms",".","A","#$PurchaseOrder","always","occurs","before","#$Buying",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':868809).
lisp_trans(=>(tSumoPurchaseOrder(PO),exists([NUMBER,BUYER,SELLER],and(uniqueIdentifier(NUMBER,PO),tSumoBuyer(BUYER),tSumoSeller(SELLER),confersObligation(exists([BUYING],and(before(uBeginFn(uWhenFn(PO)),uBeginFn(uWhenFn(BUYING))),actBuying(BUYING),tProduct(PRODUCT),objectTransferred(BUYING,PRODUCT),refers(PO,PRODUCT),agent(BUYING,BUYER),patient(BUYING,SELLER))),BUYER,SELLER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869060).
lisp_trans(rtTernaryPredicate(uniqueIdWithRespectTo),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869698).
lisp_trans(argIsa(uniqueIdWithRespectTo,1,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869748).
lisp_trans(argIsa(uniqueIdWithRespectTo,2,tSumoPhysical),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869791).
lisp_trans(argIsa(uniqueIdWithRespectTo,3,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869833).
lisp_trans(documentation(uniqueIdWithRespectTo,vEnglishLanguage,s("Any","ID","which","is","unique","within","some","context",",","though","not","globally","unique",".","This","relation","may","be","used","in","situations","such","as","a","user","account",",","in","which","a","#$SymbolicString","is","unique","to","a","relationship","between","one","particular","#$Human","and","one","particular","#$Corporation",",","or","a","unique","home","address","with","respect","to","a","given","#$Street",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':869881).
lisp_trans(documentation(ftAccountNumber,vEnglishLanguage,s("A","unique","#$SymbolicString","for","a","relationship","between","a","#$Corporation","and","#$Agent",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870255).
lisp_trans(genls(ftAccountNumber,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870385).
lisp_trans(=>(ftAccountNumber(AN),exists([CORPORATION,AGENT,NUMBER],and(actCorporation(CORPORATION),tAgent(AGENT),ftString(NUMBER),uniqueIdWithRespectTo(CORPORATION,HUMAN,NUMBER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870426).
lisp_trans(documentation(ftInvoiceNumber,vEnglishLanguage,s("A","#$SymbolicString","for","an","#$Invoice","which","is","unique","to","#$Seller",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870686).
lisp_trans(genls(ftInvoiceNumber,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870799).
lisp_trans(=>(ftInvoiceNumber(AN),exists([INVOICE,SELLER,NUMBER],and(tSumoInvoice(INVOICE),tSumoSeller(SELLER),ftString(NUMBER),uniqueIdWithRespectTo(INVOICE,SELLER,NUMBER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':870840).
lisp_trans(documentation(ftPurchaseOrderNumber,vEnglishLanguage,s("A","#$SymbolicString","for","a","#$Purchase","which","is","unique","to","a","#$Buyer",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871088).
lisp_trans(genls(ftPurchaseOrderNumber,ftString),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871208).
lisp_trans(=>(ftPurchaseOrderNumber(AN),exists([PO,BUYER,NUMBER],and(tSumoPurchaseOrder(PO),tSumoBuyer(BUYER),ftString(NUMBER),uniqueIdWithRespectTo(PO,BUYER,NUMBER)))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871255).
lisp_trans(documentation(tSumoBreakingRecord,vEnglishLanguage,s("A","#$Process","where","the","#$Agent","takes","a","specific","#$CaseRole","in","a","#$Process","of","a","specific","#$Class","which","no","other","#$Agent","of","the","same","#$Class","had","undertaken","in","the","same","#$CaseRole","in","a","specific","#$TimeInterval","preceeding","the","moment","when","the","record","was","broken","and","in","a","specific","#$Region",".","#$BreakingRecord","#$refers","to","a","#$Quantity","which","#$refers","to","the","#$Process","#$Class",".")),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871503).
lisp_trans(genls(tSumoBreakingRecord,actProcess),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871917).
lisp_trans(=>(and(tSumoBreakingRecord(X),agent(X,A1)),exists([AC,PC,P1,TP,ROLE,L,Q],and(tSumoSet(AC),isa(A1,AC),genls(PC,actProcess),genls(L,tPlaceLikeRegion),timeOfTimePoint(TP),vtQuantity(Q),refers(X,Q),refers(Q,PC),playsRoleInEvent(A1,ROLE,P1),eventLocated(P1,L),not(exists([A2,P2],and(isa(A2,AC),not(equal(A2,A1)),isa(P2,PC),holdsDuring(timeTimeIntervalFn(TP,iTimeOf_EndFn(uWhenFn(X))),and(playsRoleInEvent(A2,ROLE,P2),eventLocated(P2,L))))))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':871952).
lisp_trans(genls(tSumoFreighter,tSumoWaterVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':872737).
lisp_trans(documentation(tSumoFreighter,vEnglishLanguage,'Freighter is a #$WaterVehicle which transports #$Artifacts.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':872772).
lisp_trans(=>(tSumoFreighter(F),exists([T,OBJ],and(actTransportation(T),tSumoObject(OBJ),hasPurpose(F,and(agent(T,F),patient(T,OBJ)))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':872879).
lisp_trans(=>(and(actDamaging(DAM),tSumoDevice(OBJ),patient(DAM,OBJ)),holdsDuring(uImmediateFutureFn(uWhenFn(DAM)),sumoAttribute(OBJ,tSumoDeviceDamaged))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873096).
lisp_trans(documentation(tSumoDamagedVehicle,vEnglishLanguage,'DamagedVehicle is the class of #$Vehicle, that can\'t be used for their original purpose because of #$Damaging'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873317).
lisp_trans(genls(tSumoDamagedVehicle,tSumoVehicle),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873479).
lisp_trans(<=>(tSumoDamagedVehicle(DV),and(tSumoVehicle(DV),sumoAttribute(DV,tSumoDeviceDamaged))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873514).
lisp_trans(vtRelationalAttribute(tSumoUninhabited),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873636).
lisp_trans(documentation(tSumoUninhabited,vEnglishLanguage,'Attribute of a #$Region in which no #$Humans exist.'),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873679).
lisp_trans(=>(and(sumoAttribute(U,tSumoUninhabited),tPlaceLikeRegion(U)),not(exists([H],and(tSumoHuman(H),inhabits(H,U))))),'/mnt/gggg/PrologMUD/pack/prologmud_sample/runtime/games/ontologyportal_sumo/Mid-level-ontology.kif':873780).
